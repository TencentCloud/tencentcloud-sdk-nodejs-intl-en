/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const AbstractModel = require("../../common/abstract_model");

/**
 * DescribeEventConsumeTasks response structure.
 * @class
 */
class DescribeEventConsumeTasksResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Event Consumption Task Record List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {EventCaseConsumeLogOptDtoCollection || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new EventCaseConsumeLogOptDtoCollection();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * CreateRuleTemplate response structure.
 * @class
 */
class CreateRuleTemplateResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Template ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Task Alert Information
 * @class
 */
class AlarmInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Associated Task ID
         * @type {string || null}
         */
        this.TaskIds = null;

        /**
         * Alert Categories; 'failure' indicates failure alert; 'overtime' indicates timeout alert
         * @type {string || null}
         */
        this.AlarmType = null;

        /**
         * Alert Method; 'SMS' indicates SMS; 'Email' indicates email; 'HTTP' indicates an interface method; 'Wechat' indicates WeChat method
         * @type {string || null}
         */
        this.AlarmWay = null;

        /**
         * Alert Recipient, multiple recipients separated by ;
         * @type {string || null}
         */
        this.AlarmRecipient = null;

        /**
         * Alert Recipient ID, multiple recipient IDs separated by ;
         * @type {string || null}
         */
        this.AlarmRecipientId = null;

        /**
         * Estimated Running Hours, value range 0-23
         * @type {number || null}
         */
        this.Hours = null;

        /**
         * Estimated Running Minutes, value range 0-59
         * @type {number || null}
         */
        this.Minutes = null;

        /**
         * Alert Trigger Moment; '1' means first run failure; '2' means failure after all retries;
         * @type {number || null}
         */
        this.TriggerType = null;

        /**
         * Alert Information ID
         * @type {string || null}
         */
        this.AlarmId = null;

        /**
         * Alert Status Setting; '1' indicates available; '0' indicates unavailable, default is available
         * @type {number || null}
         */
        this.Status = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskIds = 'TaskIds' in params ? params.TaskIds : null;
        this.AlarmType = 'AlarmType' in params ? params.AlarmType : null;
        this.AlarmWay = 'AlarmWay' in params ? params.AlarmWay : null;
        this.AlarmRecipient = 'AlarmRecipient' in params ? params.AlarmRecipient : null;
        this.AlarmRecipientId = 'AlarmRecipientId' in params ? params.AlarmRecipientId : null;
        this.Hours = 'Hours' in params ? params.Hours : null;
        this.Minutes = 'Minutes' in params ? params.Minutes : null;
        this.TriggerType = 'TriggerType' in params ? params.TriggerType : null;
        this.AlarmId = 'AlarmId' in params ? params.AlarmId : null;
        this.Status = 'Status' in params ? params.Status : null;

    }
}

/**
 * Batch Operation Task List Pagination
 * @class
 */
class DescribeBatchOperateTaskPage extends  AbstractModel {
    constructor(){
        super();

        /**
         * Total Number of Pages
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.PageCount = null;

        /**
         * ContentNote: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<DescribeBatchOperateTaskDTO> || null}
         */
        this.Items = null;

        /**
         * Total count
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalCount = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.PageCount = 'PageCount' in params ? params.PageCount : null;

        if (params.Items) {
            this.Items = new Array();
            for (let z in params.Items) {
                let obj = new DescribeBatchOperateTaskDTO();
                obj.deserialize(params.Items[z]);
                this.Items.push(obj);
            }
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;

    }
}

/**
 * DescribeIntegrationStatistics response structure.
 * @class
 */
class DescribeIntegrationStatisticsResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Total Tasks
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalTask = null;

        /**
         * Number of Production Tasks
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.ProdTask = null;

        /**
         * Number of Development Tasks
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.DevTask = null;

        /**
         * Total Number of Reads
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalReadRecords = null;

        /**
         * Total Number of Writes
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalWriteRecords = null;

        /**
         * Total Number of Dirty Data Entries
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalErrorRecords = null;

        /**
         * Total Number of Alarm Events
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalAlarmEvent = null;

        /**
         * Daily Increase in Reads
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.IncreaseReadRecords = null;

        /**
         * Daily Increase in Writes
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.IncreaseWriteRecords = null;

        /**
         * Daily Increase in Dirty Data Entries
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.IncreaseErrorRecords = null;

        /**
         * Daily Increase in Alarm Events
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.IncreaseAlarmEvent = null;

        /**
         * Alarm Event Statistics
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.AlarmEvent = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TotalTask = 'TotalTask' in params ? params.TotalTask : null;
        this.ProdTask = 'ProdTask' in params ? params.ProdTask : null;
        this.DevTask = 'DevTask' in params ? params.DevTask : null;
        this.TotalReadRecords = 'TotalReadRecords' in params ? params.TotalReadRecords : null;
        this.TotalWriteRecords = 'TotalWriteRecords' in params ? params.TotalWriteRecords : null;
        this.TotalErrorRecords = 'TotalErrorRecords' in params ? params.TotalErrorRecords : null;
        this.TotalAlarmEvent = 'TotalAlarmEvent' in params ? params.TotalAlarmEvent : null;
        this.IncreaseReadRecords = 'IncreaseReadRecords' in params ? params.IncreaseReadRecords : null;
        this.IncreaseWriteRecords = 'IncreaseWriteRecords' in params ? params.IncreaseWriteRecords : null;
        this.IncreaseErrorRecords = 'IncreaseErrorRecords' in params ? params.IncreaseErrorRecords : null;
        this.IncreaseAlarmEvent = 'IncreaseAlarmEvent' in params ? params.IncreaseAlarmEvent : null;
        this.AlarmEvent = 'AlarmEvent' in params ? params.AlarmEvent : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * UnlockIntegrationTask response structure.
 * @class
 */
class UnlockIntegrationTaskResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Operation Success or Failure Indicator
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeReportTaskList request structure.
 * @class
 */
class DescribeReportTaskListRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Page number
         * @type {number || null}
         */
        this.PageNum = null;

        /**
         * Entries per page.
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Tenant id.
         * @type {string || null}
         */
        this.TenantId = null;

        /**
         * Project ID.
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Instance ID
         * @type {string || null}
         */
        this.InstanceId = null;

        /**
         * Job id.
         * @type {string || null}
         */
        this.JobId = null;

        /**
         * Engine task id.
         * @type {string || null}
         */
        this.EngineTaskId = null;

        /**
         * DATA source, such as DATA_INTEGRATION, DATA_EXPLORATION, DATA_QUALITY, OM_CENTER.
         * @type {string || null}
         */
        this.ProductSource = null;

        /**
         * Root account.
         * @type {string || null}
         */
        this.OnwerUid = null;

        /**
         * Start time
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * End time
         * @type {string || null}
         */
        this.EndTime = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.PageNum = 'PageNum' in params ? params.PageNum : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;
        this.TenantId = 'TenantId' in params ? params.TenantId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.InstanceId = 'InstanceId' in params ? params.InstanceId : null;
        this.JobId = 'JobId' in params ? params.JobId : null;
        this.EngineTaskId = 'EngineTaskId' in params ? params.EngineTaskId : null;
        this.ProductSource = 'ProductSource' in params ? params.ProductSource : null;
        this.OnwerUid = 'OnwerUid' in params ? params.OnwerUid : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;

    }
}

/**
 * DescribeStreamTaskLogList request structure.
 * @class
 */
class DescribeStreamTaskLogListRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Job ID
         * @type {string || null}
         */
        this.JobId = null;

        /**
         * End time
         * @type {number || null}
         */
        this.EndTime = null;

        /**
         * Start Time
         * @type {number || null}
         */
        this.StartTime = null;

        /**
         * container Name
         * @type {string || null}
         */
        this.Container = null;

        /**
         * Number of entries
         * @type {number || null}
         */
        this.Limit = null;

        /**
         * Sort Type desc asc
         * @type {string || null}
         */
        this.OrderType = null;

        /**
         * Instance ID of Job Execution
         * @type {number || null}
         */
        this.RunningOrderId = null;

        /**
         * Keyword
         * @type {string || null}
         */
        this.Keyword = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.JobId = 'JobId' in params ? params.JobId : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.Container = 'Container' in params ? params.Container : null;
        this.Limit = 'Limit' in params ? params.Limit : null;
        this.OrderType = 'OrderType' in params ? params.OrderType : null;
        this.RunningOrderId = 'RunningOrderId' in params ? params.RunningOrderId : null;
        this.Keyword = 'Keyword' in params ? params.Keyword : null;

    }
}

/**
 * DescribeIntegrationNode response structure.
 * @class
 */
class DescribeIntegrationNodeResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Node information\nNote: This field may return null, indicating that no valid value can be obtained.
         * @type {IntegrationNodeInfo || null}
         */
        this.NodeInfo = null;

        /**
         * Has the upstream node been modified? true Modified, needs to be prompted; false Not modified\nNote: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.SourceCheckFlag = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.NodeInfo) {
            let obj = new IntegrationNodeInfo();
            obj.deserialize(params.NodeInfo)
            this.NodeInfo = obj;
        }
        this.SourceCheckFlag = 'SourceCheckFlag' in params ? params.SourceCheckFlag : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Log Content Entity
 * @class
 */
class LogContentInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Log contentNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Log = null;

        /**
         * Log group Id\nNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.PkgId = null;

        /**
         * Log ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.PkgLogId = null;

        /**
         * TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Time = null;

        /**
         * Container Name the Log Belongs To
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ContainerName = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Log = 'Log' in params ? params.Log : null;
        this.PkgId = 'PkgId' in params ? params.PkgId : null;
        this.PkgLogId = 'PkgLogId' in params ? params.PkgLogId : null;
        this.Time = 'Time' in params ? params.Time : null;
        this.ContainerName = 'ContainerName' in params ? params.ContainerName : null;

    }
}

/**
 * ModifyIntegrationTask request structure.
 * @class
 */
class ModifyIntegrationTaskRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task Information
         * @type {IntegrationTaskInfo || null}
         */
        this.TaskInfo = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Default is false. When true, it indicates rolling back to the node logic
         * @type {boolean || null}
         */
        this.RollbackFlag = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.TaskInfo) {
            let obj = new IntegrationTaskInfo();
            obj.deserialize(params.TaskInfo)
            this.TaskInfo = obj;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.RollbackFlag = 'RollbackFlag' in params ? params.RollbackFlag : null;

    }
}

/**
 * DescribeRuleDimStat response structure.
 * @class
 */
class DescribeRuleDimStatResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Result
         * @type {RuleDimStat || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new RuleDimStat();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * RegisterEventListener response structure.
 * @class
 */
class RegisterEventListenerResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Success or Failure
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {BatchReturn || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new BatchReturn();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeTaskAlarmRegulations response structure.
 * @class
 */
class DescribeTaskAlarmRegulationsResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Alert Rule Information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<TaskAlarmInfo> || null}
         */
        this.TaskAlarmInfos = null;

        /**
         * Number of recordsNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.TaskAlarmInfos) {
            this.TaskAlarmInfos = new Array();
            for (let z in params.TaskAlarmInfos) {
                let obj = new TaskAlarmInfo();
                obj.deserialize(params.TaskAlarmInfos[z]);
                this.TaskAlarmInfos.push(obj);
            }
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Table Metadata Information
 * @class
 */
class ColumnBasicInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Table's Globally Unique ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableId = null;

        /**
         * Data Source Globally Unique ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatasourceId = null;

        /**
         * Data Source Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatasourceName = null;

        /**
         * Database ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatabaseId = null;

        /**
         * Database nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatabaseName = null;

        /**
         * Table Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableName = null;

        /**
         * Field NameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ColumnName = null;

        /**
         * Data Type, such as string/int etc.
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DataType = null;

        /**
         * Field Type, such as varchar(32)/int(10) etc.
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ColumnType = null;

        /**
         * Field Default Value
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ColumnDefault = null;

        /**
         * Index Type, such as PRI/MUL/PARTITION etc., For normal fields, this value is an empty string
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ColumnKey = null;

        /**
         * Field Order Identifier
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.ColumnPosition = null;

        /**
         * Field Comment
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ColumnComment = null;

        /**
         * Data TypeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.StoreType = null;

        /**
         * Project ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Project Name in English
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectName = null;

        /**
         * Project Name in Chinese
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectDisplayName = null;

        /**
         * Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreateTime = null;

        /**
         * Update timeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.UpdateTime = null;

        /**
         * Precision
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Scale = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TableId = 'TableId' in params ? params.TableId : null;
        this.DatasourceId = 'DatasourceId' in params ? params.DatasourceId : null;
        this.DatasourceName = 'DatasourceName' in params ? params.DatasourceName : null;
        this.DatabaseId = 'DatabaseId' in params ? params.DatabaseId : null;
        this.DatabaseName = 'DatabaseName' in params ? params.DatabaseName : null;
        this.TableName = 'TableName' in params ? params.TableName : null;
        this.ColumnName = 'ColumnName' in params ? params.ColumnName : null;
        this.DataType = 'DataType' in params ? params.DataType : null;
        this.ColumnType = 'ColumnType' in params ? params.ColumnType : null;
        this.ColumnDefault = 'ColumnDefault' in params ? params.ColumnDefault : null;
        this.ColumnKey = 'ColumnKey' in params ? params.ColumnKey : null;
        this.ColumnPosition = 'ColumnPosition' in params ? params.ColumnPosition : null;
        this.ColumnComment = 'ColumnComment' in params ? params.ColumnComment : null;
        this.StoreType = 'StoreType' in params ? params.StoreType : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.ProjectName = 'ProjectName' in params ? params.ProjectName : null;
        this.ProjectDisplayName = 'ProjectDisplayName' in params ? params.ProjectDisplayName : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;
        this.UpdateTime = 'UpdateTime' in params ? params.UpdateTime : null;
        this.Scale = 'Scale' in params ? params.Scale : null;

    }
}

/**
 * DescribeWorkflowInfoById request structure.
 * @class
 */
class DescribeWorkflowInfoByIdRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Workflow ID
         * @type {string || null}
         */
        this.WorkflowId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * CreateDataSource request structure.
 * @class
 */
class CreateDataSourceRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Data Source Name, cannot be empty under the same SpaceName
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Data Source Category: Binding Engine, Binding Database
         * @type {string || null}
         */
        this.Category = null;

        /**
         * Data Source Type: enumerated values
         * @type {string || null}
         */
        this.Type = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.OwnerProjectId = null;

        /**
         * Project Name
         * @type {string || null}
         */
        this.OwnerProjectName = null;

        /**
         * Project Name (Chinese)
         * @type {string || null}
         */
        this.OwnerProjectIdent = null;

        /**
         * Configuration Information Extension of Business Data Source
         * @type {string || null}
         */
        this.BizParams = null;

        /**
         * Data source configuration information, stored as JSON KV. The KV storage information varies according to the data source type
         * @type {string || null}
         */
        this.Params = null;

        /**
         * Data source description information
         * @type {string || null}
         */
        this.Description = null;

        /**
         * Data Source Display Name, for visual inspection
         * @type {string || null}
         */
        this.Display = null;

        /**
         * If the data source list is bound to a database, then it is the database name
         * @type {string || null}
         */
        this.DatabaseName = null;

        /**
         * Instance ID of the data source engine, e.g., CDB Instance ID
         * @type {string || null}
         */
        this.Instance = null;

        /**
         * Visibility of the data source, where 1 is visible and 0 is not visible. Default is 1
         * @type {number || null}
         */
        this.Status = null;

        /**
         * Name of the business space to which the data source belongs
         * @type {string || null}
         */
        this.ClusterId = null;

        /**
         * Collection Status
         * @type {string || null}
         */
        this.Collect = null;

        /**
         * COS Bucket Information
         * @type {string || null}
         */
        this.COSBucket = null;

        /**
         * cos region
         * @type {string || null}
         */
        this.COSRegion = null;

        /**
         * Connection Test Result
         * @type {string || null}
         */
        this.ConnectResult = null;

        /**
         * Development Environment Data Source Configuration
         * @type {string || null}
         */
        this.DevelopmentParams = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Name = 'Name' in params ? params.Name : null;
        this.Category = 'Category' in params ? params.Category : null;
        this.Type = 'Type' in params ? params.Type : null;
        this.OwnerProjectId = 'OwnerProjectId' in params ? params.OwnerProjectId : null;
        this.OwnerProjectName = 'OwnerProjectName' in params ? params.OwnerProjectName : null;
        this.OwnerProjectIdent = 'OwnerProjectIdent' in params ? params.OwnerProjectIdent : null;
        this.BizParams = 'BizParams' in params ? params.BizParams : null;
        this.Params = 'Params' in params ? params.Params : null;
        this.Description = 'Description' in params ? params.Description : null;
        this.Display = 'Display' in params ? params.Display : null;
        this.DatabaseName = 'DatabaseName' in params ? params.DatabaseName : null;
        this.Instance = 'Instance' in params ? params.Instance : null;
        this.Status = 'Status' in params ? params.Status : null;
        this.ClusterId = 'ClusterId' in params ? params.ClusterId : null;
        this.Collect = 'Collect' in params ? params.Collect : null;
        this.COSBucket = 'COSBucket' in params ? params.COSBucket : null;
        this.COSRegion = 'COSRegion' in params ? params.COSRegion : null;
        this.ConnectResult = 'ConnectResult' in params ? params.ConnectResult : null;
        this.DevelopmentParams = 'DevelopmentParams' in params ? params.DevelopmentParams : null;

    }
}

/**
 * Integrated Node Schema Mapping
 * @class
 */
class IntegrationNodeSchemaMapping extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task Node Source Schema ID
         * @type {string || null}
         */
        this.SourceSchemaId = null;

        /**
         * Task Node Target Schema ID
         * @type {string || null}
         */
        this.SinkSchemaId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.SourceSchemaId = 'SourceSchemaId' in params ? params.SourceSchemaId : null;
        this.SinkSchemaId = 'SinkSchemaId' in params ? params.SinkSchemaId : null;

    }
}

/**
 * DescribeTrendStat response structure.
 * @class
 */
class DescribeTrendStatResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Result
         * @type {Array.<RuleExecDateStat> || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            this.Data = new Array();
            for (let z in params.Data) {
                let obj = new RuleExecDateStat();
                obj.deserialize(params.Data[z]);
                this.Data.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeRealTimeTaskSpeed request structure.
 * @class
 */
class DescribeRealTimeTaskSpeedRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Timestamp with Milliseconds
         * @type {number || null}
         */
        this.StartTime = null;

        /**
         * Timestamp with Milliseconds
         * @type {number || null}
         */
        this.EndTime = null;

        /**
         * Granularity, 1 or 5
         * @type {number || null}
         */
        this.Granularity = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;
        this.Granularity = 'Granularity' in params ? params.Granularity : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * DescribeRuleDimStat request structure.
 * @class
 */
class DescribeRuleDimStatRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Start time, timestamp to the second
         * @type {string || null}
         */
        this.BeginDate = null;

        /**
         * End time, timestamp to the second
         * @type {string || null}
         */
        this.EndDate = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.BeginDate = 'BeginDate' in params ? params.BeginDate : null;
        this.EndDate = 'EndDate' in params ? params.EndDate : null;

    }
}

/**
 * DescribeRuleTemplates response structure.
 * @class
 */
class DescribeRuleTemplatesResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Rule Template List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<RuleTemplate> || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            this.Data = new Array();
            for (let z in params.Data) {
                let obj = new RuleTemplate();
                obj.deserialize(params.Data[z]);
                this.Data.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * CreateIntegrationNode response structure.
 * @class
 */
class CreateIntegrationNodeResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Node
         * @type {string || null}
         */
        this.Id = null;

        /**
         * Current Task ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Id = 'Id' in params ? params.Id : null;
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Task Attributes
 * @class
 */
class TaskInnerInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Task Name
         * @type {string || null}
         */
        this.TaskName = null;

        /**
         * Workflow ID
         * @type {string || null}
         */
        this.WorkflowId = null;

        /**
         * Cycle Type 0: Crontab Type, 1: minutes, 2: Hour, 3: Days, 4: Weekly, 5: Month, 6: One-time, 7: User-driven, 10: Elastic Cycle (Week), 11: Elastic Cycle (Month), 12: Year, 13: Instant Trigger (Instant Type), isolated from normal cyclic scheduling tasks
         * @type {number || null}
         */
        this.CycleType = null;

        /**
         * Virtual Task ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.VirtualTaskId = null;

        /**
         * Virtual Task Marker
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.VirtualFlag = null;

        /**
         * Real Task Workflow ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.RealWorkflowId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.TaskName = 'TaskName' in params ? params.TaskName : null;
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;
        this.CycleType = 'CycleType' in params ? params.CycleType : null;
        this.VirtualTaskId = 'VirtualTaskId' in params ? params.VirtualTaskId : null;
        this.VirtualFlag = 'VirtualFlag' in params ? params.VirtualFlag : null;
        this.RealWorkflowId = 'RealWorkflowId' in params ? params.RealWorkflowId : null;

    }
}

/**
 * CreateDsFolder response structure.
 * @class
 */
class CreateDsFolderResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Folder ID, null if creation fails
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Development Space - Data Development Script Information Response Body
 * @class
 */
class UserFileInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Resource ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ResourceId = null;

        /**
         * File NameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FileName = null;

        /**
         * File Type, such as jar, zip, etc.
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FileExtensionType = null;

        /**
         * File Upload Type, Resource Management as resource
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Type = null;

        /**
         * File MD5 Value
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Md5Value = null;

        /**
         * Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreateTime = null;

        /**
         * Update timeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.UpdateTime = null;

        /**
         * File Size, in bytes
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Size = null;

        /**
         * Local Path
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.LocalPath = null;

        /**
         * Local Temporary Path
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.LocalTempPath = null;

        /**
         * Remote Path
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.RemotePath = null;

        /**
         * File Owner's Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.OwnerName = null;

        /**
         * File owner's uin
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Owner = null;

        /**
         * File depth
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.PathDepth = null;

        /**
         * Project IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Additional information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<ParamInfo> || null}
         */
        this.ExtraInfo = null;

        /**
         * Absolute path of local temporary compressed file
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ZipPath = null;

        /**
         * File's belonging bucket 
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Bucket = null;

        /**
         * Region of the file's belonging bucket
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Region = null;

        /**
         * NoNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DeleteName = null;

        /**
         * NoNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DeleteOwner = null;

        /**
         * NoNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Operator = null;

        /**
         * NoNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.OperatorName = null;

        /**
         * Additional information base64 encoded
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EncodeExtraInfo = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ResourceId = 'ResourceId' in params ? params.ResourceId : null;
        this.FileName = 'FileName' in params ? params.FileName : null;
        this.FileExtensionType = 'FileExtensionType' in params ? params.FileExtensionType : null;
        this.Type = 'Type' in params ? params.Type : null;
        this.Md5Value = 'Md5Value' in params ? params.Md5Value : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;
        this.UpdateTime = 'UpdateTime' in params ? params.UpdateTime : null;
        this.Size = 'Size' in params ? params.Size : null;
        this.LocalPath = 'LocalPath' in params ? params.LocalPath : null;
        this.LocalTempPath = 'LocalTempPath' in params ? params.LocalTempPath : null;
        this.RemotePath = 'RemotePath' in params ? params.RemotePath : null;
        this.OwnerName = 'OwnerName' in params ? params.OwnerName : null;
        this.Owner = 'Owner' in params ? params.Owner : null;
        this.PathDepth = 'PathDepth' in params ? params.PathDepth : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

        if (params.ExtraInfo) {
            this.ExtraInfo = new Array();
            for (let z in params.ExtraInfo) {
                let obj = new ParamInfo();
                obj.deserialize(params.ExtraInfo[z]);
                this.ExtraInfo.push(obj);
            }
        }
        this.ZipPath = 'ZipPath' in params ? params.ZipPath : null;
        this.Bucket = 'Bucket' in params ? params.Bucket : null;
        this.Region = 'Region' in params ? params.Region : null;
        this.DeleteName = 'DeleteName' in params ? params.DeleteName : null;
        this.DeleteOwner = 'DeleteOwner' in params ? params.DeleteOwner : null;
        this.Operator = 'Operator' in params ? params.Operator : null;
        this.OperatorName = 'OperatorName' in params ? params.OperatorName : null;
        this.EncodeExtraInfo = 'EncodeExtraInfo' in params ? params.EncodeExtraInfo : null;

    }
}

/**
 * FreezeOpsTasks request structure.
 * @class
 */
class FreezeOpsTasksRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task List
         * @type {Array.<SimpleTaskInfo> || null}
         */
        this.Tasks = null;

        /**
         * Whether Task Operation Notifies Downstream Task Owners
         * @type {boolean || null}
         */
        this.OperateIsInform = null;

        /**
         * Whether to terminate the generated instance
         * @type {boolean || null}
         */
        this.KillInstance = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Tasks) {
            this.Tasks = new Array();
            for (let z in params.Tasks) {
                let obj = new SimpleTaskInfo();
                obj.deserialize(params.Tasks[z]);
                this.Tasks.push(obj);
            }
        }
        this.OperateIsInform = 'OperateIsInform' in params ? params.OperateIsInform : null;
        this.KillInstance = 'KillInstance' in params ? params.KillInstance : null;

    }
}

/**
 * Task Execution History Pagination Record
 * @class
 */
class InstanceOpsInfoPage extends  AbstractModel {
    constructor(){
        super();

        /**
         * Number of recordsNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * Record list
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<InstanceOpsDto> || null}
         */
        this.Items = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;

        if (params.Items) {
            this.Items = new Array();
            for (let z in params.Items) {
                let obj = new InstanceOpsDto();
                obj.deserialize(params.Items[z]);
                this.Items.push(obj);
            }
        }

    }
}

/**
 * DescribeRules response structure.
 * @class
 */
class DescribeRulesResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Rule list
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<Rule> || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            this.Data = new Array();
            for (let z in params.Data) {
                let obj = new Rule();
                obj.deserialize(params.Data[z]);
                this.Data.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Workflow Execution Information
 * @class
 */
class WorkFlowExecuteDto extends  AbstractModel {
    constructor(){
        super();

        /**
         * Start TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * End timeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EndTime = null;

        /**
         * Workflow Execution Status 0: Waiting to run, 1: Running, 2: Completed, 3: Error
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Status = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;
        this.Status = 'Status' in params ? params.Status : null;

    }
}

/**
 * Real-time task synchronization speed Bar/s
 * @class
 */
class RecordsSpeed extends  AbstractModel {
    constructor(){
        super();

        /**
         * Node TypeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.NodeType = null;

        /**
         * Node nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.NodeName = null;

        /**
         * Speed value list
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<SpeedValue> || null}
         */
        this.Values = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.NodeType = 'NodeType' in params ? params.NodeType : null;
        this.NodeName = 'NodeName' in params ? params.NodeName : null;

        if (params.Values) {
            this.Values = new Array();
            for (let z in params.Values) {
                let obj = new SpeedValue();
                obj.deserialize(params.Values[z]);
                this.Values.push(obj);
            }
        }

    }
}

/**
 * Lineage Field Information
 * @class
 */
class ColumnLineageInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Lineage ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Id = null;

        /**
         * Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatasourceId = null;

        /**
         * Field NameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ColumnName = null;

        /**
         * Field Chinese Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ColumnNameCn = null;

        /**
         * Field TypeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ColumnType = null;

        /**
         * Relationship Parameters
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.RelationParams = null;

        /**
         * ParameterNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Params = null;

        /**
         * Parent ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ParentId = null;

        /**
         * Metadata Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.MetastoreType = null;

        /**
         * Metadata Type Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.MetastoreTypeName = null;

        /**
         * Table Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableName = null;

        /**
         * Full Field Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.QualifiedName = null;

        /**
         * Number of Downstream Nodes
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.DownStreamCount = null;

        /**
         * Number of Upstream Nodes
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.UpStreamCount = null;

        /**
         * DescriptionNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Description = null;

        /**
         * Path Information Starting from the Central Node
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.PrefixPath = null;

        /**
         * Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreateTime = null;

        /**
         * Update timeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ModifyTime = null;

        /**
         * Task ID list
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<string> || null}
         */
        this.Tasks = null;

        /**
         * Parent Node List String
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ParentSet = null;

        /**
         * Child Node List String
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ChildSet = null;

        /**
         * Additional parameters
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<LineageParamRecord> || null}
         */
        this.ExtParams = null;

        /**
         * Table IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Id = 'Id' in params ? params.Id : null;
        this.DatasourceId = 'DatasourceId' in params ? params.DatasourceId : null;
        this.ColumnName = 'ColumnName' in params ? params.ColumnName : null;
        this.ColumnNameCn = 'ColumnNameCn' in params ? params.ColumnNameCn : null;
        this.ColumnType = 'ColumnType' in params ? params.ColumnType : null;
        this.RelationParams = 'RelationParams' in params ? params.RelationParams : null;
        this.Params = 'Params' in params ? params.Params : null;
        this.ParentId = 'ParentId' in params ? params.ParentId : null;
        this.MetastoreType = 'MetastoreType' in params ? params.MetastoreType : null;
        this.MetastoreTypeName = 'MetastoreTypeName' in params ? params.MetastoreTypeName : null;
        this.TableName = 'TableName' in params ? params.TableName : null;
        this.QualifiedName = 'QualifiedName' in params ? params.QualifiedName : null;
        this.DownStreamCount = 'DownStreamCount' in params ? params.DownStreamCount : null;
        this.UpStreamCount = 'UpStreamCount' in params ? params.UpStreamCount : null;
        this.Description = 'Description' in params ? params.Description : null;
        this.PrefixPath = 'PrefixPath' in params ? params.PrefixPath : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;
        this.ModifyTime = 'ModifyTime' in params ? params.ModifyTime : null;
        this.Tasks = 'Tasks' in params ? params.Tasks : null;
        this.ParentSet = 'ParentSet' in params ? params.ParentSet : null;
        this.ChildSet = 'ChildSet' in params ? params.ChildSet : null;

        if (params.ExtParams) {
            this.ExtParams = new Array();
            for (let z in params.ExtParams) {
                let obj = new LineageParamRecord();
                obj.deserialize(params.ExtParams[z]);
                this.ExtParams.push(obj);
            }
        }
        this.TableId = 'TableId' in params ? params.TableId : null;

    }
}

/**
 * SubmitTask request structure.
 * @class
 */
class SubmitTaskRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Version Notes
         * @type {string || null}
         */
        this.VersionRemark = null;

        /**
         * Whether to Enable Scheduling
         * @type {boolean || null}
         */
        this.StartScheduling = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.VersionRemark = 'VersionRemark' in params ? params.VersionRemark : null;
        this.StartScheduling = 'StartScheduling' in params ? params.StartScheduling : null;

    }
}

/**
 * ListInstances response structure.
 * @class
 */
class ListInstancesResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Instance result set.
         * @type {InstancePageVO || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new InstancePageVO();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeTableMetas request structure.
 * @class
 */
class DescribeTableMetasRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Page number
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Page size
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Filter field
         * @type {Array.<Filter> || null}
         */
        this.Filters = null;

        /**
         * Sort Fields
         * @type {Array.<OrderField> || null}
         */
        this.OrderFields = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;

        if (params.Filters) {
            this.Filters = new Array();
            for (let z in params.Filters) {
                let obj = new Filter();
                obj.deserialize(params.Filters[z]);
                this.Filters.push(obj);
            }
        }

        if (params.OrderFields) {
            this.OrderFields = new Array();
            for (let z in params.OrderFields) {
                let obj = new OrderField();
                obj.deserialize(params.OrderFields[z]);
                this.OrderFields.push(obj);
            }
        }

    }
}

/**
 * Rule Execution Result Details
 * @class
 */
class RuleExecResultDetail extends  AbstractModel {
    constructor(){
        super();

        /**
         * Data source ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.DatasourceId = null;

        /**
         * Data Source Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatasourceName = null;

        /**
         * Database GUID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatabaseId = null;

        /**
         * Database nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatabaseName = null;

        /**
         * Instance IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InstanceId = null;

        /**
         * table guid
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableId = null;

        /**
         * Table nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableName = null;

        /**
         * rule execution record
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {RuleExecResult || null}
         */
        this.RuleExecResult = null;

        /**
         * table owner userId
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TableOwnerUserId = null;

        /**
         * 2.HIVE 3.DLC
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.DatasourceType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.DatasourceId = 'DatasourceId' in params ? params.DatasourceId : null;
        this.DatasourceName = 'DatasourceName' in params ? params.DatasourceName : null;
        this.DatabaseId = 'DatabaseId' in params ? params.DatabaseId : null;
        this.DatabaseName = 'DatabaseName' in params ? params.DatabaseName : null;
        this.InstanceId = 'InstanceId' in params ? params.InstanceId : null;
        this.TableId = 'TableId' in params ? params.TableId : null;
        this.TableName = 'TableName' in params ? params.TableName : null;

        if (params.RuleExecResult) {
            let obj = new RuleExecResult();
            obj.deserialize(params.RuleExecResult)
            this.RuleExecResult = obj;
        }
        this.TableOwnerUserId = 'TableOwnerUserId' in params ? params.TableOwnerUserId : null;
        this.DatasourceType = 'DatasourceType' in params ? params.DatasourceType : null;

    }
}

/**
 * Query Data Source Pagination List
 * @class
 */
class DataSourceInfoPage extends  AbstractModel {
    constructor(){
        super();

        /**
         * pagination page number
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * pagination size
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * data source list
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<DataSourceInfo> || null}
         */
        this.Rows = null;

        /**
         * Total numberNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * total pagination pages
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalPageNumber = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;

        if (params.Rows) {
            this.Rows = new Array();
            for (let z in params.Rows) {
                let obj = new DataSourceInfo();
                obj.deserialize(params.Rows[z]);
                this.Rows.push(obj);
            }
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.TotalPageNumber = 'TotalPageNumber' in params ? params.TotalPageNumber : null;

    }
}

/**
 * Task Pagination Query
 * @class
 */
class OpsTaskInfoPage extends  AbstractModel {
    constructor(){
        super();

        /**
         * Page Number
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Page Size
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Task List Information
         * @type {Array.<TaskOpsDto> || null}
         */
        this.Items = null;

        /**
         * Total Pages
         * @type {number || null}
         */
        this.TotalPage = null;

        /**
         * Page Number
         * @type {number || null}
         */
        this.PageCount = null;

        /**
         * Total number of items
         * @type {number || null}
         */
        this.TotalCount = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;

        if (params.Items) {
            this.Items = new Array();
            for (let z in params.Items) {
                let obj = new TaskOpsDto();
                obj.deserialize(params.Items[z]);
                this.Items.push(obj);
            }
        }
        this.TotalPage = 'TotalPage' in params ? params.TotalPage : null;
        this.PageCount = 'PageCount' in params ? params.PageCount : null;
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;

    }
}

/**
 * DescribeRuleGroupExecResultsByPage request structure.
 * @class
 */
class DescribeRuleGroupExecResultsByPageRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Pagination Index
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Page size
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Filter criteria
         * @type {Array.<Filter> || null}
         */
        this.Filters = null;

        /**
         * Sort Fields
         * @type {Array.<OrderField> || null}
         */
        this.OrderFields = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;

        if (params.Filters) {
            this.Filters = new Array();
            for (let z in params.Filters) {
                let obj = new Filter();
                obj.deserialize(params.Filters[z]);
                this.Filters.push(obj);
            }
        }

        if (params.OrderFields) {
            this.OrderFields = new Array();
            for (let z in params.OrderFields) {
                let obj = new OrderField();
                obj.deserialize(params.OrderFields[z]);
                this.OrderFields.push(obj);
            }
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * Event Instance
 * @class
 */
class EventCaseAuditLogOptDto extends  AbstractModel {
    constructor(){
        super();

        /**
         * Event Instance ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CaseId = null;

        /**
         * Event nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EventName = null;

        /**
         * Event typeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EventType = null;

        /**
         * Event Split Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EventSubType = null;

        /**
         * Event Broadcast Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EventBroadcastType = null;

        /**
         * Event Instance TTL
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TTL = null;

        /**
         * Event Instance TTL Unit
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TimeUnit = null;

        /**
         * Data Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Dimension = null;

        /**
         * Event Instance Status
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Status = null;

        /**
         * Event Instance Trigger Timestamp
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EventTriggerTimestamp = null;

        /**
         * Event Instance Consumption Timestamp
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.LogTimestamp = null;

        /**
         * Event Instance Description
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Description = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.CaseId = 'CaseId' in params ? params.CaseId : null;
        this.EventName = 'EventName' in params ? params.EventName : null;
        this.EventType = 'EventType' in params ? params.EventType : null;
        this.EventSubType = 'EventSubType' in params ? params.EventSubType : null;
        this.EventBroadcastType = 'EventBroadcastType' in params ? params.EventBroadcastType : null;
        this.TTL = 'TTL' in params ? params.TTL : null;
        this.TimeUnit = 'TimeUnit' in params ? params.TimeUnit : null;
        this.Dimension = 'Dimension' in params ? params.Dimension : null;
        this.Status = 'Status' in params ? params.Status : null;
        this.EventTriggerTimestamp = 'EventTriggerTimestamp' in params ? params.EventTriggerTimestamp : null;
        this.LogTimestamp = 'LogTimestamp' in params ? params.LogTimestamp : null;
        this.Description = 'Description' in params ? params.Description : null;

    }
}

/**
 * DescribeTableLineage request structure.
 * @class
 */
class DescribeTableLineageRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Enumeration value of query direction.

- INPUT
- OUTPUT
- BOTH
         * @type {string || null}
         */
        this.Direction = null;

        /**
         * Table information
         * @type {TableLineageInfo || null}
         */
        this.Data = null;

        /**
         * Single Query Indegree, default 1
         * @type {number || null}
         */
        this.InputDepth = null;

        /**
         * Single Query Outdegree, default 1
         * @type {number || null}
         */
        this.OutputDepth = null;

        /**
         * Additional Parameters (Pass Caller Information)
         * @type {Array.<LineageParamRecord> || null}
         */
        this.ExtParams = null;

        /**
         * Filter Temporary Tables, default true
         * @type {boolean || null}
         */
        this.IgnoreTemp = null;

        /**
         * Recursively Query Number of Secondary Nodes, default is true
         * @type {boolean || null}
         */
        this.RecursiveSecond = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Direction = 'Direction' in params ? params.Direction : null;

        if (params.Data) {
            let obj = new TableLineageInfo();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.InputDepth = 'InputDepth' in params ? params.InputDepth : null;
        this.OutputDepth = 'OutputDepth' in params ? params.OutputDepth : null;

        if (params.ExtParams) {
            this.ExtParams = new Array();
            for (let z in params.ExtParams) {
                let obj = new LineageParamRecord();
                obj.deserialize(params.ExtParams[z]);
                this.ExtParams.push(obj);
            }
        }
        this.IgnoreTemp = 'IgnoreTemp' in params ? params.IgnoreTemp : null;
        this.RecursiveSecond = 'RecursiveSecond' in params ? params.RecursiveSecond : null;

    }
}

/**
 * KillOpsMakePlanInstances request structure.
 * @class
 */
class KillOpsMakePlanInstancesRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Supplemental Plan ID
         * @type {string || null}
         */
        this.PlanId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.PlanId = 'PlanId' in params ? params.PlanId : null;

    }
}

/**
 * DescribeEventCases request structure.
 * @class
 */
class DescribeEventCasesRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Event Instance Catalog, Example Value:
- Expired: expired
- Not Expired: consuming
- All: all

         * @type {string || null}
         */
        this.Category = null;

        /**
         * Page Number
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Number of items per page
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Event name
         * @type {string || null}
         */
        this.EventName = null;

        /**
         * Event type
         * @type {string || null}
         */
        this.EventType = null;

        /**
         * Event Segmentation Type
         * @type {string || null}
         */
        this.EventSubType = null;

        /**
         * Event Broadcast Type
         * @type {string || null}
         */
        this.EventBroadcastType = null;

        /**
         * Event Instance Status, Example Value:
- Consumed: COMSUMED
- Expired: EXPIRED
- Pending Consumption: ACTIVE
- Consuming: CONSUMING
         * @type {string || null}
         */
        this.Status = null;

        /**
         * Minimum Creation Time of Event Instance
         * @type {string || null}
         */
        this.CreationTimeStart = null;

        /**
         * Maximum Creation Time of Event Instance
         * @type {string || null}
         */
        this.CreationTimeEnd = null;

        /**
         * Minimum Trigger Time of Event Instance
         * @type {string || null}
         */
        this.EventTriggeredTimeStart = null;

        /**
         * Maximum Trigger Time of Event Instance
         * @type {string || null}
         */
        this.EventTriggeredTimeEnd = null;

        /**
         * Minimum Consumption Time of Event Instance
         * @type {string || null}
         */
        this.LogTimeStart = null;

        /**
         * Maximum Consumption Time of Event Instance
         * @type {string || null}
         */
        this.LogTimeEnd = null;

        /**
         * Event Instance Data Timestamp
         * @type {string || null}
         */
        this.Dimension = null;

        /**
         * Event Instance Validity Period
         * @type {string || null}
         */
        this.TimeToLive = null;

        /**
         * Sort Fields
         * @type {string || null}
         */
        this.SortItem = null;

        /**
         * Sorting Order
         * @type {string || null}
         */
        this.SortType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.Category = 'Category' in params ? params.Category : null;
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;
        this.EventName = 'EventName' in params ? params.EventName : null;
        this.EventType = 'EventType' in params ? params.EventType : null;
        this.EventSubType = 'EventSubType' in params ? params.EventSubType : null;
        this.EventBroadcastType = 'EventBroadcastType' in params ? params.EventBroadcastType : null;
        this.Status = 'Status' in params ? params.Status : null;
        this.CreationTimeStart = 'CreationTimeStart' in params ? params.CreationTimeStart : null;
        this.CreationTimeEnd = 'CreationTimeEnd' in params ? params.CreationTimeEnd : null;
        this.EventTriggeredTimeStart = 'EventTriggeredTimeStart' in params ? params.EventTriggeredTimeStart : null;
        this.EventTriggeredTimeEnd = 'EventTriggeredTimeEnd' in params ? params.EventTriggeredTimeEnd : null;
        this.LogTimeStart = 'LogTimeStart' in params ? params.LogTimeStart : null;
        this.LogTimeEnd = 'LogTimeEnd' in params ? params.LogTimeEnd : null;
        this.Dimension = 'Dimension' in params ? params.Dimension : null;
        this.TimeToLive = 'TimeToLive' in params ? params.TimeToLive : null;
        this.SortItem = 'SortItem' in params ? params.SortItem : null;
        this.SortType = 'SortType' in params ? params.SortType : null;

    }
}

/**
 * BatchResumeIntegrationTasks response structure.
 * @class
 */
class BatchResumeIntegrationTasksResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Number of Successfully Operated Tasks
         * @type {number || null}
         */
        this.SuccessCount = null;

        /**
         * Number of Failed Tasks
         * @type {number || null}
         */
        this.FailedCount = null;

        /**
         * Total Number of Tasks
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * This batch operation involves tasks for auditing
         * @type {Array.<string> || null}
         */
        this.TaskNames = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.SuccessCount = 'SuccessCount' in params ? params.SuccessCount : null;
        this.FailedCount = 'FailedCount' in params ? params.FailedCount : null;
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.TaskNames = 'TaskNames' in params ? params.TaskNames : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeFieldBasicInfo response structure.
 * @class
 */
class DescribeFieldBasicInfoResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Field Metadata
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<ColumnBasicInfo> || null}
         */
        this.ColumnBasicInfoList = null;

        /**
         * Total number of items
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.ColumnBasicInfoList) {
            this.ColumnBasicInfoList = new Array();
            for (let z in params.ColumnBasicInfoList) {
                let obj = new ColumnBasicInfo();
                obj.deserialize(params.ColumnBasicInfoList[z]);
                this.ColumnBasicInfoList.push(obj);
            }
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * ColumnItem
 * @class
 */
class ColumnItem extends  AbstractModel {
    constructor(){
        super();

        /**
         * ColumnName1
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ColumnName = null;

        /**
         * ColumnName1
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ColumnRef = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ColumnName = 'ColumnName' in params ? params.ColumnName : null;
        this.ColumnRef = 'ColumnRef' in params ? params.ColumnRef : null;

    }
}

/**
 * Rule Group Execution Result
 * @class
 */
class RuleGroupExecResult extends  AbstractModel {
    constructor(){
        super();

        /**
         * Rule Group Execution ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.RuleGroupExecId = null;

        /**
         * Rule Group ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.RuleGroupId = null;

        /**
         * Execution Trigger Type (1: Manual Trigger, 2: In-process Scheduling Trigger, 3: Periodic Scheduling Trigger)
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TriggerType = null;

        /**
         * Execution time yyyy-MM-dd HH:mm:ss
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ExecTime = null;

        /**
         * Execution Status (1. Submitted, 2. Under detection, 3. Normal, 4. Abnormal)
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Status = null;

        /**
         * Number of Exceptional Rules
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.AlarmRuleCount = null;

        /**
         * Total Number of Rules
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalRuleCount = null;

        /**
         * Source Table Responsible Person
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableOwnerName = null;

        /**
         * Source Table Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableName = null;

        /**
         * Table ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableId = null;

        /**
         * Database ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatabaseId = null;

        /**
         * Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatasourceId = null;

        /**
         * Permission Availability
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.Permission = null;

        /**
         * Execution Details, Scheduling Plan, or Associated Production Task ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ExecDetail = null;

        /**
         * Actual Execution Engine
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EngineType = null;

        /**
         * Rule Execution Result
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<RuleExecResult> || null}
         */
        this.RuleExecResultVOList = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.RuleGroupExecId = 'RuleGroupExecId' in params ? params.RuleGroupExecId : null;
        this.RuleGroupId = 'RuleGroupId' in params ? params.RuleGroupId : null;
        this.TriggerType = 'TriggerType' in params ? params.TriggerType : null;
        this.ExecTime = 'ExecTime' in params ? params.ExecTime : null;
        this.Status = 'Status' in params ? params.Status : null;
        this.AlarmRuleCount = 'AlarmRuleCount' in params ? params.AlarmRuleCount : null;
        this.TotalRuleCount = 'TotalRuleCount' in params ? params.TotalRuleCount : null;
        this.TableOwnerName = 'TableOwnerName' in params ? params.TableOwnerName : null;
        this.TableName = 'TableName' in params ? params.TableName : null;
        this.TableId = 'TableId' in params ? params.TableId : null;
        this.DatabaseId = 'DatabaseId' in params ? params.DatabaseId : null;
        this.DatasourceId = 'DatasourceId' in params ? params.DatasourceId : null;
        this.Permission = 'Permission' in params ? params.Permission : null;
        this.ExecDetail = 'ExecDetail' in params ? params.ExecDetail : null;
        this.EngineType = 'EngineType' in params ? params.EngineType : null;

        if (params.RuleExecResultVOList) {
            this.RuleExecResultVOList = new Array();
            for (let z in params.RuleExecResultVOList) {
                let obj = new RuleExecResult();
                obj.deserialize(params.RuleExecResultVOList[z]);
                this.RuleExecResultVOList.push(obj);
            }
        }

    }
}

/**
 * Alarm Event Details
 * @class
 */
class AlarmEventInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Alert ID
         * @type {string || null}
         */
        this.AlarmId = null;

        /**
         * Alarm Time
         * @type {string || null}
         */
        this.AlarmTime = null;

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Rule name
         * @type {string || null}
         */
        this.RegularName = null;

        /**
         * Alert level, 0 for normal, 1 for important, 2 for urgent
         * @type {number || null}
         */
        this.AlarmLevel = null;

        /**
         * Alert Method, separated by commas (1: email, 2: SMS, 3: WeChat, 4: voice call, 5: represents WeCom, 6: http)
         * @type {number || null}
         */
        this.AlarmWay = null;

        /**
         * Alert Recipient ID, separated by commas
         * @type {string || null}
         */
        this.AlarmRecipientId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Alert Metrics, 0 for task failure, 1 for task run timeout, 2 for task stop, 3 for task pause
         * @type {number || null}
         */
        this.AlarmIndicator = null;

        /**
         * Alert Metric Description
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.AlarmIndicatorDesc = null;

        /**
         * Metric threshold, 1 indicates the first run failure of the offline task, 2 indicates failure after all retries of the offline task
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TriggerType = null;

        /**
         * Estimated timeout, minute level
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.EstimatedTime = null;

        /**
         * Instance IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InstanceId = null;

        /**
         * Task NameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskName = null;

        /**
         * 0: Partial Success, 1: Complete Success, 2: Complete Failure
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.IsSendSuccess = null;

        /**
         * During Do Not Disturb time, 0: No, 1: Yes
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.InQuitePeriods = null;

        /**
         * Alert Record ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.RecordId = null;

        /**
         * Message ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.MessageId = null;

        /**
         * Threshold Calculation Operator, 1: Greater than, 2: Less than
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Operator = null;

        /**
         * Alert Rule ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.RegularId = null;

        /**
         * Alert Recipient Nickname
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.AlarmRecipientName = null;

        /**
         * Alert Task Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TaskType = null;

        /**
         * Send Result
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.SendResult = null;

        /**
         * Monitoring Object ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.MonitorObjectId = null;

        /**
         * Monitoring Object Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.MonitorObjectName = null;

        /**
         * Metric Threshold
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Threshold = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.AlarmId = 'AlarmId' in params ? params.AlarmId : null;
        this.AlarmTime = 'AlarmTime' in params ? params.AlarmTime : null;
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.RegularName = 'RegularName' in params ? params.RegularName : null;
        this.AlarmLevel = 'AlarmLevel' in params ? params.AlarmLevel : null;
        this.AlarmWay = 'AlarmWay' in params ? params.AlarmWay : null;
        this.AlarmRecipientId = 'AlarmRecipientId' in params ? params.AlarmRecipientId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.AlarmIndicator = 'AlarmIndicator' in params ? params.AlarmIndicator : null;
        this.AlarmIndicatorDesc = 'AlarmIndicatorDesc' in params ? params.AlarmIndicatorDesc : null;
        this.TriggerType = 'TriggerType' in params ? params.TriggerType : null;
        this.EstimatedTime = 'EstimatedTime' in params ? params.EstimatedTime : null;
        this.InstanceId = 'InstanceId' in params ? params.InstanceId : null;
        this.TaskName = 'TaskName' in params ? params.TaskName : null;
        this.IsSendSuccess = 'IsSendSuccess' in params ? params.IsSendSuccess : null;
        this.InQuitePeriods = 'InQuitePeriods' in params ? params.InQuitePeriods : null;
        this.RecordId = 'RecordId' in params ? params.RecordId : null;
        this.MessageId = 'MessageId' in params ? params.MessageId : null;
        this.Operator = 'Operator' in params ? params.Operator : null;
        this.RegularId = 'RegularId' in params ? params.RegularId : null;
        this.AlarmRecipientName = 'AlarmRecipientName' in params ? params.AlarmRecipientName : null;
        this.TaskType = 'TaskType' in params ? params.TaskType : null;
        this.SendResult = 'SendResult' in params ? params.SendResult : null;
        this.MonitorObjectId = 'MonitorObjectId' in params ? params.MonitorObjectId : null;
        this.MonitorObjectName = 'MonitorObjectName' in params ? params.MonitorObjectName : null;
        this.Threshold = 'Threshold' in params ? params.Threshold : null;

    }
}

/**
 * Real-time task synchronization speed Bytes/s
 * @class
 */
class BytesSpeed extends  AbstractModel {
    constructor(){
        super();

        /**
         * Node TypeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.NodeType = null;

        /**
         * Node nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.NodeName = null;

        /**
         * Speed value list
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<SpeedValue> || null}
         */
        this.Values = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.NodeType = 'NodeType' in params ? params.NodeType : null;
        this.NodeName = 'NodeName' in params ? params.NodeName : null;

        if (params.Values) {
            this.Values = new Array();
            for (let z in params.Values) {
                let obj = new SpeedValue();
                obj.deserialize(params.Values[z]);
                this.Values.push(obj);
            }
        }

    }
}

/**
 * CheckTaskNameExist request structure.
 * @class
 */
class CheckTaskNameExistRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID/Workspace ID.
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Task Type (consistent with scheduling parameters).
         * @type {number || null}
         */
        this.TypeId = null;

        /**
         * Task Name.
         * @type {string || null}
         */
        this.TaskName = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.TypeId = 'TypeId' in params ? params.TypeId : null;
        this.TaskName = 'TaskName' in params ? params.TaskName : null;

    }
}

/**
 * Data quality threshold
 * @class
 */
class ThresholdValue extends  AbstractModel {
    constructor(){
        super();

        /**
         * Threshold type 1. Low threshold 2. High threshold 3. Normal threshold 4. Enumerated values
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.ValueType = null;

        /**
         * ThresholdNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Value = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ValueType = 'ValueType' in params ? params.ValueType : null;
        this.Value = 'Value' in params ? params.Value : null;

    }
}

/**
 * DescribeFunctionKinds request structure.
 * @class
 */
class DescribeFunctionKindsRequest extends  AbstractModel {
    constructor(){
        super();

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

    }
}

/**
 * DescribeFunctionKinds response structure.
 * @class
 */
class DescribeFunctionKindsResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * NoNote: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<FunctionTypeOrKind> || null}
         */
        this.Kinds = null;

        /**
         * NoNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ErrorMessage = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Kinds) {
            this.Kinds = new Array();
            for (let z in params.Kinds) {
                let obj = new FunctionTypeOrKind();
                obj.deserialize(params.Kinds[z]);
                this.Kinds.push(obj);
            }
        }
        this.ErrorMessage = 'ErrorMessage' in params ? params.ErrorMessage : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeTemplateDimCount request structure.
 * @class
 */
class DescribeTemplateDimCountRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Template Type
         * @type {number || null}
         */
        this.Type = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Type = 'Type' in params ? params.Type : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * ModifyIntegrationTask response structure.
 * @class
 */
class ModifyIntegrationTaskResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeDataSourceList request structure.
 * @class
 */
class DescribeDataSourceListRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Page Number
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Number of returns
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Sorting Configuration
         * @type {Array.<OrderField> || null}
         */
        this.OrderFields = null;

        /**
         * Optional Filter Criteria, Filter optional configurations (reference): "Name": { "type": "string", "description": "Data Source Name" }, "Type": { "type": "string", "description": "Type" }, "ClusterId": { "type": "string", "description": "Cluster ID" }, "CategoryId": { "type": "string", "description": "Classification, Project or Space ID" }
         * @type {Array.<Filter> || null}
         */
        this.Filters = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;

        if (params.OrderFields) {
            this.OrderFields = new Array();
            for (let z in params.OrderFields) {
                let obj = new OrderField();
                obj.deserialize(params.OrderFields[z]);
                this.OrderFields.push(obj);
            }
        }

        if (params.Filters) {
            this.Filters = new Array();
            for (let z in params.Filters) {
                let obj = new Filter();
                obj.deserialize(params.Filters[z]);
                this.Filters.push(obj);
            }
        }

    }
}

/**
 * DescribeInstanceByCycle response structure.
 * @class
 */
class DescribeInstanceByCycleResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Statistical Results
         * @type {Array.<TaskByCycle> || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            this.Data = new Array();
            for (let z in params.Data) {
                let obj = new TaskByCycle();
                obj.deserialize(params.Data[z]);
                this.Data.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeIntegrationStatisticsRecordsTrend request structure.
 * @class
 */
class DescribeIntegrationStatisticsRecordsTrendRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task Type (Real-time: 201, Offline: 202)
         * @type {number || null}
         */
        this.TaskType = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Query Date
         * @type {string || null}
         */
        this.QueryDate = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskType = 'TaskType' in params ? params.TaskType : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.QueryDate = 'QueryDate' in params ? params.QueryDate : null;

    }
}

/**
 * DescribeDataCheckStat request structure.
 * @class
 */
class DescribeDataCheckStatRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Start time, timestamp to the second
         * @type {string || null}
         */
        this.BeginDate = null;

        /**
         * End time, timestamp to the second
         * @type {string || null}
         */
        this.EndDate = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.BeginDate = 'BeginDate' in params ? params.BeginDate : null;
        this.EndDate = 'EndDate' in params ? params.EndDate : null;

    }
}

/**
 * Asset Rating of the table updated by day
 * @class
 */
class TablePropertyScore extends  AbstractModel {
    constructor(){
        super();

        /**
         * Table ID
         * @type {string || null}
         */
        this.TableId = null;

        /**
         * Statistics Date
         * @type {string || null}
         */
        this.DayTime = null;

        /**
         * Table Integrity Score
         * @type {number || null}
         */
        this.Integrity = null;

        /**
         * Table Assurance Score
         * @type {number || null}
         */
        this.Safety = null;

        /**
         * Table Timeliness Score
         * @type {number || null}
         */
        this.Timeliness = null;

        /**
         * Table Stability Score
         * @type {number || null}
         */
        this.Stability = null;

        /**
         * Table Normalization Score
         * @type {number || null}
         */
        this.Normative = null;

        /**
         * Average Asset Score
         * @type {number || null}
         */
        this.Average = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TableId = 'TableId' in params ? params.TableId : null;
        this.DayTime = 'DayTime' in params ? params.DayTime : null;
        this.Integrity = 'Integrity' in params ? params.Integrity : null;
        this.Safety = 'Safety' in params ? params.Safety : null;
        this.Timeliness = 'Timeliness' in params ? params.Timeliness : null;
        this.Stability = 'Stability' in params ? params.Stability : null;
        this.Normative = 'Normative' in params ? params.Normative : null;
        this.Average = 'Average' in params ? params.Average : null;

    }
}

/**
 * Group Robot Subscription Configuration
 * @class
 */
class SubscribeWebHook extends  AbstractModel {
    constructor(){
        super();

        /**
         * Group Robot Type, currently supports Feishu
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.HookType = null;

        /**
         * Group Robot Webhook Address, configuration method refer to https://intl.cloud.tencent.com/document/product/1254/70736?from_cn_redirect=1
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.HookAddress = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.HookType = 'HookType' in params ? params.HookType : null;
        this.HookAddress = 'HookAddress' in params ? params.HookAddress : null;

    }
}

/**
 * GetOfflineInstanceList request structure.
 * @class
 */
class GetOfflineInstanceListRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Which Page
         * @type {string || null}
         */
        this.PageIndex = null;

        /**
         * Number of Items per Page
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * No
         * @type {SearchCondition || null}
         */
        this.SearchCondition = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.PageIndex = 'PageIndex' in params ? params.PageIndex : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

        if (params.SearchCondition) {
            let obj = new SearchCondition();
            obj.deserialize(params.SearchCondition)
            this.SearchCondition = obj;
        }

    }
}

/**
 * Task Type Map
 * @class
 */
class TaskTypeMap extends  AbstractModel {
    constructor(){
        super();

        /**
         * key
         * @type {number || null}
         */
        this.Key = null;

        /**
         * value
         * @type {string || null}
         */
        this.Value = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Key = 'Key' in params ? params.Key : null;
        this.Value = 'Value' in params ? params.Value : null;

    }
}

/**
 * Instance Lifecycle Detail
 * @class
 */
class InstanceLifeDetailDto extends  AbstractModel {
    constructor(){
        super();

        /**
         * Indicates the status of an instance.
-Indicates waiting for event.
-[12] indicates waiting for upstream.
-[6, 7, 9, 10, 18] indicates awaiting execution.
-1, 19, 22 indicate running.
-21: skip running.
-[3] indicates retry on failure.
-[8, 4, 5, 13] indicates a failure.
-[2] indicates a success.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.State = null;

        /**
         * Start Time of the State
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * Instance lifecycle phase status.

-WAIT_UPSTREAM indicates waiting for event/upstream status.
-WAIT_RUN indicates a waiting for running status.
-RUNNING indicates a running state.
-COMPLETE indicates the final state - completed.
-FAILED indicates the final state - retry on failure.
-EXPIRED indicates the final state - failure.
-SKIP_RUNNING indicates the final state - a branch skipped by the upstream branch node.
-HISTORY indicates compatibility with historical instances.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.DetailState = null;

        /**
         * End Time of the State
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EndTime = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.State = 'State' in params ? params.State : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.DetailState = 'DetailState' in params ? params.DetailState : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;

    }
}

/**
 * Workflow Information
 * @class
 */
class Workflow extends  AbstractModel {
    constructor(){
        super();

        /**
         * Workflow ID
         * @type {string || null}
         */
        this.WorkflowId = null;

        /**
         * Person in Charge
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Owner = null;

        /**
         * Responsible Person ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.OwnerId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Project Identifier
         * @type {string || null}
         */
        this.ProjectIdent = null;

        /**
         * Project name
         * @type {string || null}
         */
        this.ProjectName = null;

        /**
         * RemarksNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.WorkflowDesc = null;

        /**
         * Workflow name
         * @type {string || null}
         */
        this.WorkflowName = null;

        /**
         * Parent Folder ID
         * @type {string || null}
         */
        this.FolderId = null;

        /**
         * Workflow User Group ID If there are multiple, separate with semicolons: a;b;c
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.UserGroupId = null;

        /**
         * Workflow User Group Name If there are multiple, separate with semicolons: a;b;c
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.UserGroupName = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;
        this.Owner = 'Owner' in params ? params.Owner : null;
        this.OwnerId = 'OwnerId' in params ? params.OwnerId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.ProjectIdent = 'ProjectIdent' in params ? params.ProjectIdent : null;
        this.ProjectName = 'ProjectName' in params ? params.ProjectName : null;
        this.WorkflowDesc = 'WorkflowDesc' in params ? params.WorkflowDesc : null;
        this.WorkflowName = 'WorkflowName' in params ? params.WorkflowName : null;
        this.FolderId = 'FolderId' in params ? params.FolderId : null;
        this.UserGroupId = 'UserGroupId' in params ? params.UserGroupId : null;
        this.UserGroupName = 'UserGroupName' in params ? params.UserGroupName : null;

    }
}

/**
 * DescribeRuleExecResults request structure.
 * @class
 */
class DescribeRuleExecResultsRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Rule Group Execution ID
         * @type {number || null}
         */
        this.RuleGroupExecId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.RuleGroupExecId = 'RuleGroupExecId' in params ? params.RuleGroupExecId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * Download Log Details
 * @class
 */
class InstanceDownloadLogInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * File NameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FileName = null;

        /**
         * File URL
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FileUrl = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.FileName = 'FileName' in params ? params.FileName : null;
        this.FileUrl = 'FileUrl' in params ? params.FileUrl : null;

    }
}

/**
 * Event Instance Information
 * @class
 */
class EventCaseDTO extends  AbstractModel {
    constructor(){
        super();

        /**
         * Event Instance ID
         * @type {string || null}
         */
        this.CaseId = null;

        /**
         * Event
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Event Format
         * @type {string || null}
         */
        this.Dimension = null;

        /**
         * Creation Time
         * @type {string || null}
         */
        this.CreationTs = null;

        /**
         * Consumer ID
         * @type {string || null}
         */
        this.ConsumerId = null;

        /**
         * Description
         * @type {string || null}
         */
        this.Description = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.CaseId = 'CaseId' in params ? params.CaseId : null;
        this.Name = 'Name' in params ? params.Name : null;
        this.Dimension = 'Dimension' in params ? params.Dimension : null;
        this.CreationTs = 'CreationTs' in params ? params.CreationTs : null;
        this.ConsumerId = 'ConsumerId' in params ? params.ConsumerId : null;
        this.Description = 'Description' in params ? params.Description : null;

    }
}

/**
 * Instance Operation Details
 * @class
 */
class InstanceOpsDto extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Task NameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskName = null;

        /**
         * Workflow ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.WorkflowId = null;

        /**
         * Workflow nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.WorkflowName = null;

        /**
         * Owner
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InCharge = null;

        /**
         * Cycle Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CycleType = null;

        /**
         * Data Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CurRunDate = null;

        /**
         * Next Data Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.NextCurDate = null;

        /**
         * Running Priority
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.RunPriority = null;

        /**
         * Number of Attempts
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TryLimit = null;

        /**
         * Current Running Times
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Tries = null;

        /**
         * Total Retry Attempts
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalRunNum = null;

        /**
         * Whether to Supplement
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.DoFlag = null;

        /**
         * Whether it is a Retry
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.RedoFlag = null;

        /**
         * Instance StatusNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.State = null;

        /**
         * Run Node
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.RuntimeBroker = null;

        /**
         * Reason for Failure
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ErrorDesc = null;

        /**
         * Task TypeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {TaskTypeOpsDto || null}
         */
        this.TaskType = null;

        /**
         * Dependency Judgment Completion Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DependenceFulfillTime = null;

        /**
         * First Dependency Judgment Pass Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FirstDependenceFulfillTime = null;

        /**
         * Initial startup time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FirstStartTime = null;

        /**
         * Start startup time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * Operation completion time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EndTime = null;

        /**
         * Time Consumed
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CostTime = null;

        /**
         * Elapsed time (ms)
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.CostMillisecond = null;

        /**
         * Maximum operation duration
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.MaxCostTime = null;

        /**
         * Minimum operation duration
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.MinCostTime = null;

        /**
         * Average operation duration
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.AvgCostTime = null;

        /**
         * Recent logs
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.LastLog = null;

        /**
         * Scheduling Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.SchedulerDateTime = null;

        /**
         * Last scheduling time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.LastSchedulerDateTime = null;

        /**
         * Last update event
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.LastUpdate = null;

        /**
         * Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreateTime = null;

        /**
         * Branch, Dependency Relationship and,or
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DependencyRel = null;

        /**
         * Execution space
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ExecutionSpace = null;

        /**
         * Ignore events
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.IgnoreEvent = null;

        /**
         * Virtual Task Instance
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.VirtualFlag = null;

        /**
         * Folder ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FolderId = null;

        /**
         * Folder Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FolderName = null;

        /**
         * Recursive Instance Information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.SonList = null;

        /**
         * Product Business Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProductName = null;

        /**
         * Resource Group
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ResourceGroup = null;

        /**
         * Resource Group Specified Execution Node
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ResourceInstanceId = null;

        /**
         * Resource Queue
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.YarnQueue = null;

        /**
         * Scheduling Plan
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.SchedulerDesc = null;

        /**
         * Latest Submission Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FirstSubmitTime = null;

        /**
         * First Execution Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FirstRunTime = null;

        /**
         * Project ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Project Identifier
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectIdent = null;

        /**
         * Project nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectName = null;

        /**
         * Tenant ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TenantId = null;

        /**
         * Instance Identifier
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InstanceKey = null;

        /**
         * Resource Group ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ExecutorGroupId = null;

        /**
         * Resource Group Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ExecutorGroupName = null;

        /**
         * Associated Instance Information.
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<InstanceOpsDto> || null}
         */
        this.RelatedInstanceList = null;

        /**
         * Associated Instance Information Quantity, not strongly associated with RelatedInstanceList.
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.RelatedInstanceSize = null;

        /**
         * ownerId
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.OwnerId = null;

        /**
         * User ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.UserId = null;

        /**
         * Instance LifecycleNote: This field may return null, indicating that no valid value can be obtained.
         * @type {InstanceLifeCycleOpsDto || null}
         */
        this.InstanceLifeCycleOpsDto = null;

        /**
         * Automatic Retry Attempts
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.RetryAttempts = null;

        /**
         * Urgently Removed Dependency Parent Instance List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<string> || null}
         */
        this.DeletedFatherList = null;

        /**
         * Cyclic Dependency Associated Instances
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<InstanceOpsDto> || null}
         */
        this.CirculateInstanceList = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.TaskName = 'TaskName' in params ? params.TaskName : null;
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;
        this.WorkflowName = 'WorkflowName' in params ? params.WorkflowName : null;
        this.InCharge = 'InCharge' in params ? params.InCharge : null;
        this.CycleType = 'CycleType' in params ? params.CycleType : null;
        this.CurRunDate = 'CurRunDate' in params ? params.CurRunDate : null;
        this.NextCurDate = 'NextCurDate' in params ? params.NextCurDate : null;
        this.RunPriority = 'RunPriority' in params ? params.RunPriority : null;
        this.TryLimit = 'TryLimit' in params ? params.TryLimit : null;
        this.Tries = 'Tries' in params ? params.Tries : null;
        this.TotalRunNum = 'TotalRunNum' in params ? params.TotalRunNum : null;
        this.DoFlag = 'DoFlag' in params ? params.DoFlag : null;
        this.RedoFlag = 'RedoFlag' in params ? params.RedoFlag : null;
        this.State = 'State' in params ? params.State : null;
        this.RuntimeBroker = 'RuntimeBroker' in params ? params.RuntimeBroker : null;
        this.ErrorDesc = 'ErrorDesc' in params ? params.ErrorDesc : null;

        if (params.TaskType) {
            let obj = new TaskTypeOpsDto();
            obj.deserialize(params.TaskType)
            this.TaskType = obj;
        }
        this.DependenceFulfillTime = 'DependenceFulfillTime' in params ? params.DependenceFulfillTime : null;
        this.FirstDependenceFulfillTime = 'FirstDependenceFulfillTime' in params ? params.FirstDependenceFulfillTime : null;
        this.FirstStartTime = 'FirstStartTime' in params ? params.FirstStartTime : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;
        this.CostTime = 'CostTime' in params ? params.CostTime : null;
        this.CostMillisecond = 'CostMillisecond' in params ? params.CostMillisecond : null;
        this.MaxCostTime = 'MaxCostTime' in params ? params.MaxCostTime : null;
        this.MinCostTime = 'MinCostTime' in params ? params.MinCostTime : null;
        this.AvgCostTime = 'AvgCostTime' in params ? params.AvgCostTime : null;
        this.LastLog = 'LastLog' in params ? params.LastLog : null;
        this.SchedulerDateTime = 'SchedulerDateTime' in params ? params.SchedulerDateTime : null;
        this.LastSchedulerDateTime = 'LastSchedulerDateTime' in params ? params.LastSchedulerDateTime : null;
        this.LastUpdate = 'LastUpdate' in params ? params.LastUpdate : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;
        this.DependencyRel = 'DependencyRel' in params ? params.DependencyRel : null;
        this.ExecutionSpace = 'ExecutionSpace' in params ? params.ExecutionSpace : null;
        this.IgnoreEvent = 'IgnoreEvent' in params ? params.IgnoreEvent : null;
        this.VirtualFlag = 'VirtualFlag' in params ? params.VirtualFlag : null;
        this.FolderId = 'FolderId' in params ? params.FolderId : null;
        this.FolderName = 'FolderName' in params ? params.FolderName : null;
        this.SonList = 'SonList' in params ? params.SonList : null;
        this.ProductName = 'ProductName' in params ? params.ProductName : null;
        this.ResourceGroup = 'ResourceGroup' in params ? params.ResourceGroup : null;
        this.ResourceInstanceId = 'ResourceInstanceId' in params ? params.ResourceInstanceId : null;
        this.YarnQueue = 'YarnQueue' in params ? params.YarnQueue : null;
        this.SchedulerDesc = 'SchedulerDesc' in params ? params.SchedulerDesc : null;
        this.FirstSubmitTime = 'FirstSubmitTime' in params ? params.FirstSubmitTime : null;
        this.FirstRunTime = 'FirstRunTime' in params ? params.FirstRunTime : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.ProjectIdent = 'ProjectIdent' in params ? params.ProjectIdent : null;
        this.ProjectName = 'ProjectName' in params ? params.ProjectName : null;
        this.TenantId = 'TenantId' in params ? params.TenantId : null;
        this.InstanceKey = 'InstanceKey' in params ? params.InstanceKey : null;
        this.ExecutorGroupId = 'ExecutorGroupId' in params ? params.ExecutorGroupId : null;
        this.ExecutorGroupName = 'ExecutorGroupName' in params ? params.ExecutorGroupName : null;

        if (params.RelatedInstanceList) {
            this.RelatedInstanceList = new Array();
            for (let z in params.RelatedInstanceList) {
                let obj = new InstanceOpsDto();
                obj.deserialize(params.RelatedInstanceList[z]);
                this.RelatedInstanceList.push(obj);
            }
        }
        this.RelatedInstanceSize = 'RelatedInstanceSize' in params ? params.RelatedInstanceSize : null;
        this.OwnerId = 'OwnerId' in params ? params.OwnerId : null;
        this.UserId = 'UserId' in params ? params.UserId : null;

        if (params.InstanceLifeCycleOpsDto) {
            let obj = new InstanceLifeCycleOpsDto();
            obj.deserialize(params.InstanceLifeCycleOpsDto)
            this.InstanceLifeCycleOpsDto = obj;
        }
        this.RetryAttempts = 'RetryAttempts' in params ? params.RetryAttempts : null;
        this.DeletedFatherList = 'DeletedFatherList' in params ? params.DeletedFatherList : null;

        if (params.CirculateInstanceList) {
            this.CirculateInstanceList = new Array();
            for (let z in params.CirculateInstanceList) {
                let obj = new InstanceOpsDto();
                obj.deserialize(params.CirculateInstanceList[z]);
                this.CirculateInstanceList.push(obj);
            }
        }

    }
}

/**
 * SubmitWorkflow response structure.
 * @class
 */
class SubmitWorkflowResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Execution Result
         * @type {SubmitWorkflow || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new SubmitWorkflow();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * TriggerEvent request structure.
 * @class
 */
class TriggerEventRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Case Name
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Time format: If the trigger time is selected as June 21, 2022, it should be set to 20220621
         * @type {string || null}
         */
        this.Dimension = null;

        /**
         * Description
         * @type {string || null}
         */
        this.Description = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.Name = 'Name' in params ? params.Name : null;
        this.Dimension = 'Dimension' in params ? params.Dimension : null;
        this.Description = 'Description' in params ? params.Description : null;

    }
}

/**
 * Workflow Task Statistics
 * @class
 */
class WorkflowTaskCountOpsDto extends  AbstractModel {
    constructor(){
        super();

        /**
         * Number of Workflow Tasks
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Count = null;

        /**
         * Task Type Dimension Statistics
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<PairDto> || null}
         */
        this.TypeCount = null;

        /**
         * Task Cycle Type Dimension Statistics
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<PairDto> || null}
         */
        this.CycleCount = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Count = 'Count' in params ? params.Count : null;

        if (params.TypeCount) {
            this.TypeCount = new Array();
            for (let z in params.TypeCount) {
                let obj = new PairDto();
                obj.deserialize(params.TypeCount[z]);
                this.TypeCount.push(obj);
            }
        }

        if (params.CycleCount) {
            this.CycleCount = new Array();
            for (let z in params.CycleCount) {
                let obj = new PairDto();
                obj.deserialize(params.CycleCount[z]);
                this.CycleCount.push(obj);
            }
        }

    }
}

/**
 * No
 * @class
 */
class StageCloudApiRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * No
         * @type {string || null}
         */
        this.ClusterId = null;

        /**
         * No
         * @type {string || null}
         */
        this.StageId = null;

        /**
         * No
         * @type {string || null}
         */
        this.JobId = null;

        /**
         * No
         * @type {string || null}
         */
        this.StageName = null;

        /**
         * No
         * @type {string || null}
         */
        this.Type = null;

        /**
         * No
         * @type {string || null}
         */
        this.Mode = null;

        /**
         * No
         * @type {string || null}
         */
        this.Version = null;

        /**
         * No
         * @type {string || null}
         */
        this.Queue = null;

        /**
         * No
         * @type {string || null}
         */
        this.Content = null;

        /**
         * No
         * @type {Array.<Property> || null}
         */
        this.Parameters = null;

        /**
         * No
         * @type {string || null}
         */
        this.Description = null;

        /**
         * No
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * No
         * @type {string || null}
         */
        this.JobType = null;

        /**
         * No
         * @type {string || null}
         */
        this.WorkFlowId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ClusterId = 'ClusterId' in params ? params.ClusterId : null;
        this.StageId = 'StageId' in params ? params.StageId : null;
        this.JobId = 'JobId' in params ? params.JobId : null;
        this.StageName = 'StageName' in params ? params.StageName : null;
        this.Type = 'Type' in params ? params.Type : null;
        this.Mode = 'Mode' in params ? params.Mode : null;
        this.Version = 'Version' in params ? params.Version : null;
        this.Queue = 'Queue' in params ? params.Queue : null;
        this.Content = 'Content' in params ? params.Content : null;

        if (params.Parameters) {
            this.Parameters = new Array();
            for (let z in params.Parameters) {
                let obj = new Property();
                obj.deserialize(params.Parameters[z]);
                this.Parameters.push(obj);
            }
        }
        this.Description = 'Description' in params ? params.Description : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.JobType = 'JobType' in params ? params.JobType : null;
        this.WorkFlowId = 'WorkFlowId' in params ? params.WorkFlowId : null;

    }
}

/**
 * DescribeDependOpsTasks request structure.
 * @class
 */
class DescribeDependOpsTasksRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Upstream/Downstream Levels 1-6
         * @type {number || null}
         */
        this.Deep = null;

        /**
         * 1: Indicates querying upstream nodes; 0: Indicates querying downstream nodes; 2: Indicates querying both upstream and downstream nodes
         * @type {number || null}
         */
        this.Up = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Task Workflow ID
         * @type {string || null}
         */
        this.WorkflowId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.Deep = 'Deep' in params ? params.Deep : null;
        this.Up = 'Up' in params ? params.Up : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;

    }
}

/**
 * Table Binding Rule Group Information
 * @class
 */
class RuleGroupTable extends  AbstractModel {
    constructor(){
        super();

        /**
         * Table Information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {RuleGroupTableInnerInfo || null}
         */
        this.TableInfo = null;

        /**
         * Rule Group Scheduling Information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<RuleGroupSchedulerInfo> || null}
         */
        this.RuleGroups = null;

        /**
         * Subscriber Information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<RuleGroupSubscribe> || null}
         */
        this.Subscriptions = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.TableInfo) {
            let obj = new RuleGroupTableInnerInfo();
            obj.deserialize(params.TableInfo)
            this.TableInfo = obj;
        }

        if (params.RuleGroups) {
            this.RuleGroups = new Array();
            for (let z in params.RuleGroups) {
                let obj = new RuleGroupSchedulerInfo();
                obj.deserialize(params.RuleGroups[z]);
                this.RuleGroups.push(obj);
            }
        }

        if (params.Subscriptions) {
            this.Subscriptions = new Array();
            for (let z in params.Subscriptions) {
                let obj = new RuleGroupSubscribe();
                obj.deserialize(params.Subscriptions[z]);
                this.Subscriptions.push(obj);
            }
        }

    }
}

/**
 * DescribeInstanceLog request structure.
 * @class
 */
class DescribeInstanceLogRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Data Timestamp
         * @type {string || null}
         */
        this.CurRunDate = null;

        /**
         * Server Ip
         * @type {string || null}
         */
        this.BrokerIp = null;

        /**
         * File Name
         * @type {string || null}
         */
        this.OriginFileName = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.CurRunDate = 'CurRunDate' in params ? params.CurRunDate : null;
        this.BrokerIp = 'BrokerIp' in params ? params.BrokerIp : null;
        this.OriginFileName = 'OriginFileName' in params ? params.OriginFileName : null;

    }
}

/**
 * DescribeRuleGroupSubscription response structure.
 * @class
 */
class DescribeRuleGroupSubscriptionResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Rule Group Subscription Information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {RuleGroupSubscribe || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new RuleGroupSubscribe();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Cluster Basic Information
 * @class
 */
class BaseClusterInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Cluster ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ClusterId = null;

        /**
         * Cluster Type, EMR/CDW, etc.
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ClusterType = null;

        /**
         * Cluster NameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ClusterName = null;

        /**
         * Region Chinese
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.RegionCn = null;

        /**
         * Region English
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.RegionEn = null;

        /**
         * RegionNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.RegionArea = null;

        /**
         * Whether the Cluster is Used
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.Used = null;

        /**
         * Cluster StatusNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Status = null;

        /**
         * Cluster State Information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.StatusInfo = null;

        /**
         * Cluster Storage Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.StorageType = null;

        /**
         * Cluster Computing Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ComputeType = null;

        /**
         * Cluster Resource Quantity
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ClusterResource = null;

        /**
         * Cluster Payment Method
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ChargeType = null;

        /**
         * Cluster Creation Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreateTime = null;

        /**
         * Additional Configuration
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ExtraConf = null;

        /**
         * Ranger Account Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.RangerUserName = null;

        /**
         * CDW Account (for display)
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CdwUserName = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ClusterId = 'ClusterId' in params ? params.ClusterId : null;
        this.ClusterType = 'ClusterType' in params ? params.ClusterType : null;
        this.ClusterName = 'ClusterName' in params ? params.ClusterName : null;
        this.RegionCn = 'RegionCn' in params ? params.RegionCn : null;
        this.RegionEn = 'RegionEn' in params ? params.RegionEn : null;
        this.RegionArea = 'RegionArea' in params ? params.RegionArea : null;
        this.Used = 'Used' in params ? params.Used : null;
        this.Status = 'Status' in params ? params.Status : null;
        this.StatusInfo = 'StatusInfo' in params ? params.StatusInfo : null;
        this.StorageType = 'StorageType' in params ? params.StorageType : null;
        this.ComputeType = 'ComputeType' in params ? params.ComputeType : null;
        this.ClusterResource = 'ClusterResource' in params ? params.ClusterResource : null;
        this.ChargeType = 'ChargeType' in params ? params.ChargeType : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;
        this.ExtraConf = 'ExtraConf' in params ? params.ExtraConf : null;
        this.RangerUserName = 'RangerUserName' in params ? params.RangerUserName : null;
        this.CdwUserName = 'CdwUserName' in params ? params.CdwUserName : null;

    }
}

/**
 * DescribeIntegrationStatisticsTaskStatusTrend response structure.
 * @class
 */
class DescribeIntegrationStatisticsTaskStatusTrendResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Statistical Results
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<IntegrationStatisticsTrendResult> || null}
         */
        this.TrendsData = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.TrendsData) {
            this.TrendsData = new Array();
            for (let z in params.TrendsData) {
                let obj = new IntegrationStatisticsTrendResult();
                obj.deserialize(params.TrendsData[z]);
                this.TrendsData.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DeleteResourceFile request structure.
 * @class
 */
class DeleteResourceFileRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Resource ID
         * @type {string || null}
         */
        this.ResourceId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.ResourceId = 'ResourceId' in params ? params.ResourceId : null;

    }
}

/**
 * SaveCustomFunction request structure.
 * @class
 */
class SaveCustomFunctionRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Function Unique Identifier
         * @type {string || null}
         */
        this.FunctionId = null;

        /**
         * Classification: Window functions, Aggregation functions, Date functions...
         * @type {string || null}
         */
        this.Kind = null;

        /**
         * Cluster Engine Instance
         * @type {string || null}
         */
        this.ClusterIdentifier = null;

        /**
         * Class
         * @type {string || null}
         */
        this.ClassName = null;

        /**
         * Resource list
         * @type {Array.<FunctionResource> || null}
         */
        this.ResourceList = null;

        /**
         * Function Description
         * @type {string || null}
         */
        this.Description = null;

        /**
         * Usage
         * @type {string || null}
         */
        this.Usage = null;

        /**
         * Parameter description
         * @type {string || null}
         */
        this.ParamDesc = null;

        /**
         * Return value description
         * @type {string || null}
         */
        this.ReturnDesc = null;

        /**
         * Sample code
         * @type {string || null}
         */
        this.Example = null;

        /**
         * Project ID, cannot be modified, used by DLC when saving the function
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Database Name, cannot be modified, used by DLC when saving the function
         * @type {string || null}
         */
        this.DbName = null;

        /**
         * Function Name, cannot be modified, used by DLC when saving the function
         * @type {string || null}
         */
        this.Name = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.FunctionId = 'FunctionId' in params ? params.FunctionId : null;
        this.Kind = 'Kind' in params ? params.Kind : null;
        this.ClusterIdentifier = 'ClusterIdentifier' in params ? params.ClusterIdentifier : null;
        this.ClassName = 'ClassName' in params ? params.ClassName : null;

        if (params.ResourceList) {
            this.ResourceList = new Array();
            for (let z in params.ResourceList) {
                let obj = new FunctionResource();
                obj.deserialize(params.ResourceList[z]);
                this.ResourceList.push(obj);
            }
        }
        this.Description = 'Description' in params ? params.Description : null;
        this.Usage = 'Usage' in params ? params.Usage : null;
        this.ParamDesc = 'ParamDesc' in params ? params.ParamDesc : null;
        this.ReturnDesc = 'ReturnDesc' in params ? params.ReturnDesc : null;
        this.Example = 'Example' in params ? params.Example : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.DbName = 'DbName' in params ? params.DbName : null;
        this.Name = 'Name' in params ? params.Name : null;

    }
}

/**
 * DescribeSchedulerTaskTypeCnt request structure.
 * @class
 */
class DescribeSchedulerTaskTypeCntRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Person in Charge
         * @type {string || null}
         */
        this.InCharge = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.InCharge = 'InCharge' in params ? params.InCharge : null;

    }
}

/**
 * Supplemental Plan Tasks
 * @class
 */
class MakePlanTaskOpsDto extends  AbstractModel {
    constructor(){
        super();

        /**
         * Basic task informationNote: This field may return null, indicating that no valid value can be obtained.
         * @type {TaskOpsDto || null}
         */
        this.TaskBaseInfo = null;

        /**
         * Supplemental instances already generated for this task
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.InstanceCount = null;

        /**
         * Supplementary Task Instance Completion Percentage
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.CompletePercent = null;

        /**
         * Supplementary Task Instance Success Percentage
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.SuccessPercent = null;

        /**
         * Estimated Total Number of Instances Generated, as generation is asynchronous, -1 indicates instances are not fully generated yet
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.InstanceTotalCount = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.TaskBaseInfo) {
            let obj = new TaskOpsDto();
            obj.deserialize(params.TaskBaseInfo)
            this.TaskBaseInfo = obj;
        }
        this.InstanceCount = 'InstanceCount' in params ? params.InstanceCount : null;
        this.CompletePercent = 'CompletePercent' in params ? params.CompletePercent : null;
        this.SuccessPercent = 'SuccessPercent' in params ? params.SuccessPercent : null;
        this.InstanceTotalCount = 'InstanceTotalCount' in params ? params.InstanceTotalCount : null;

    }
}

/**
 * Quality Rule Execution Strategy
 * @class
 */
class RuleGroupExecStrategy extends  AbstractModel {
    constructor(){
        super();

        /**
         * Rule Group ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.RuleGroupId = null;

        /**
         * Monitoring Type 1. Not configured, 2. Associated with production scheduling, 3. Offline cycle detection
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.MonitorType = null;

        /**
         * Calculation Queue
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ExecQueue = null;

        /**
         * Execution Resource Group ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ExecutorGroupId = null;

        /**
         * Execution Resource Group Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ExecutorGroupName = null;

        /**
         * Associated Production Scheduling Task List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<ProdSchedulerTask> || null}
         */
        this.Tasks = null;

        /**
         * Cycle Start Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * Cycle End Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EndTime = null;

        /**
         * Scheduling Cycle Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CycleType = null;

        /**
         * Delayed Scheduling Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.DelayTime = null;

        /**
         * Interval
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.CycleStep = null;

        /**
         * Time Specification
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskAction = null;

        /**
         * Execution engine to run, if not provided, the default execution engine for this data source will be requested
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ExecEngineType = null;

        /**
         * Execution planNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ExecPlan = null;

        /**
         * Rule ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.RuleId = null;

        /**
         * Rule nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.RuleName = null;

        /**
         * Trigger Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<string> || null}
         */
        this.TriggerTypes = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.RuleGroupId = 'RuleGroupId' in params ? params.RuleGroupId : null;
        this.MonitorType = 'MonitorType' in params ? params.MonitorType : null;
        this.ExecQueue = 'ExecQueue' in params ? params.ExecQueue : null;
        this.ExecutorGroupId = 'ExecutorGroupId' in params ? params.ExecutorGroupId : null;
        this.ExecutorGroupName = 'ExecutorGroupName' in params ? params.ExecutorGroupName : null;

        if (params.Tasks) {
            this.Tasks = new Array();
            for (let z in params.Tasks) {
                let obj = new ProdSchedulerTask();
                obj.deserialize(params.Tasks[z]);
                this.Tasks.push(obj);
            }
        }
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;
        this.CycleType = 'CycleType' in params ? params.CycleType : null;
        this.DelayTime = 'DelayTime' in params ? params.DelayTime : null;
        this.CycleStep = 'CycleStep' in params ? params.CycleStep : null;
        this.TaskAction = 'TaskAction' in params ? params.TaskAction : null;
        this.ExecEngineType = 'ExecEngineType' in params ? params.ExecEngineType : null;
        this.ExecPlan = 'ExecPlan' in params ? params.ExecPlan : null;
        this.RuleId = 'RuleId' in params ? params.RuleId : null;
        this.RuleName = 'RuleName' in params ? params.RuleName : null;
        this.TriggerTypes = 'TriggerTypes' in params ? params.TriggerTypes : null;

    }
}

/**
 * ModifyWorkflowSchedule request structure.
 * @class
 */
class ModifyWorkflowScheduleRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Workflow ID
         * @type {string || null}
         */
        this.WorkflowId = null;

        /**
         * Delay time, in minutes
         * @type {number || null}
         */
        this.DelayTime = null;

        /**
         * Start Time
         * @type {number || null}
         */
        this.StartupTime = null;

        /**
         * Self-Dependency Type  1: Sequential serial, one at a time, queued, 2: Unordered serial, one at a time, not queued, 3: Parallel, multiple at once
         * @type {number || null}
         */
        this.SelfDepend = null;

        /**
         * "Cycle Type  0:crontab, 1:Minute,2:Hour,3:Day,4:Week,5:Month,6:One-time,7:User driven,10:Flexible cycle Week,11:Flexible cycle Month,12:Year,13:Immediate Trigger Instant type, isolated from normal cycle scheduling task logic
         * @type {number || null}
         */
        this.CycleType = null;

        /**
         * Step Length, Interval Time, minimum of 1
         * @type {number || null}
         */
        this.CycleStep = null;

        /**
         * Effective Start Time, format yyyy-MM-dd HH:mm:ss
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * Effective End Time, format yyyy-MM-dd HH:mm:ss
         * @type {string || null}
         */
        this.EndTime = null;

        /**
         * Scheduling Configuration - Elastic Cycle Configuration, applicable to Hourly/Weekly/Monthly/Yearly schedules. For hourly tasks scheduled at 0, 3, 4 o'clock, it would be '0,3,4'.
         * @type {string || null}
         */
        this.TaskAction = null;

        /**
         * Cron Expression is required only for Cron Tab Scheduling
         * @type {string || null}
         */
        this.CrontabExpression = null;

        /**
         * Execution Time Left Closed Interval, format: HH:mm. Applicable only to hourly scheduling. For example, for hourly tasks, it specifies the effective interval every day
         * @type {string || null}
         */
        this.ExecutionStartTime = null;

        /**
         * Execution Time Right Closed Interval, format: HH:mm. Applicable only to hourly scheduling. For example, for hourly tasks, it specifies the effective interval every day
         * @type {string || null}
         */
        this.ExecutionEndTime = null;

        /**
         * Workflow Dependency, yes or no
         * @type {string || null}
         */
        this.DependencyWorkflow = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;
        this.DelayTime = 'DelayTime' in params ? params.DelayTime : null;
        this.StartupTime = 'StartupTime' in params ? params.StartupTime : null;
        this.SelfDepend = 'SelfDepend' in params ? params.SelfDepend : null;
        this.CycleType = 'CycleType' in params ? params.CycleType : null;
        this.CycleStep = 'CycleStep' in params ? params.CycleStep : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;
        this.TaskAction = 'TaskAction' in params ? params.TaskAction : null;
        this.CrontabExpression = 'CrontabExpression' in params ? params.CrontabExpression : null;
        this.ExecutionStartTime = 'ExecutionStartTime' in params ? params.ExecutionStartTime : null;
        this.ExecutionEndTime = 'ExecutionEndTime' in params ? params.ExecutionEndTime : null;
        this.DependencyWorkflow = 'DependencyWorkflow' in params ? params.DependencyWorkflow : null;

    }
}

/**
 * CreateDsFolder request structure.
 * @class
 */
class CreateDsFolderRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Folder Name
         * @type {string || null}
         */
        this.FolderName = null;

        /**
         * Parent Folder ID
         * @type {string || null}
         */
        this.ParentsFolderId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.FolderName = 'FolderName' in params ? params.FolderName : null;
        this.ParentsFolderId = 'ParentsFolderId' in params ? params.ParentsFolderId : null;

    }
}

/**
 * RegisterEvent request structure.
 * @class
 */
class RegisterEventRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Event Name, supports English, numbers, and underscores, up to 20 characters long, cannot start with a number or underscore.
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Event Segmentation Type, cycle types: DAY, HOUR, MIN, SECOND
         * @type {string || null}
         */
        this.EventSubType = null;

        /**
         * Broadcast: BROADCAST, Unicast: SINGLE
         * @type {string || null}
         */
        this.EventBroadcastType = null;

        /**
         * For cycle types of day and hour: HOURS, For minutes: MINUTES, For seconds: SECONDS
         * @type {string || null}
         */
        this.TimeUnit = null;

        /**
         * Event Owner
         * @type {string || null}
         */
        this.Owner = null;

        /**
         * Event Type, default value: TIME_SERIES
         * @type {string || null}
         */
        this.EventType = null;

        /**
         * Corresponding DAY: yyyyMMdd, Corresponding HOUR: yyyyMMddHH, Corresponding MIN: yyyyMMddHHmm, Corresponding SECOND: yyyyMMddHHmmss
         * @type {string || null}
         */
        this.DimensionFormat = null;

        /**
         * Uptime
         * @type {number || null}
         */
        this.TimeToLive = null;

        /**
         * Event Description
         * @type {string || null}
         */
        this.Description = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.Name = 'Name' in params ? params.Name : null;
        this.EventSubType = 'EventSubType' in params ? params.EventSubType : null;
        this.EventBroadcastType = 'EventBroadcastType' in params ? params.EventBroadcastType : null;
        this.TimeUnit = 'TimeUnit' in params ? params.TimeUnit : null;
        this.Owner = 'Owner' in params ? params.Owner : null;
        this.EventType = 'EventType' in params ? params.EventType : null;
        this.DimensionFormat = 'DimensionFormat' in params ? params.DimensionFormat : null;
        this.TimeToLive = 'TimeToLive' in params ? params.TimeToLive : null;
        this.Description = 'Description' in params ? params.Description : null;

    }
}

/**
 * Details of a scheduled instance.
 * @class
 */
class InstanceDetailVO extends  AbstractModel {
    constructor(){
        super();

        /**
         * Unique id of an instance.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.InstanceKey = null;

        /**
         * Project ID.

Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Folder ID.

Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.FolderId = null;

        /**
         * Folder name.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.FolderName = null;

        /**
         * Workflow ID.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.WorkflowId = null;

        /**
         * Workflow name.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.WorkflowName = null;

        /**
         * Responsible person list.

Note: This field may return null, indicating that no valid values can be obtained.
         * @type {Array.<string> || null}
         */
        this.InChargeList = null;

        /**
         * Task ID

Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Task Name

Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.TaskName = null;

        /**
         * Task cycle type.
Support filtering multiple items with an or relationship between conditions.
* O: ONEOFF_CYCLE
* Y: YEAR_CYCLE
* M: MONTH_CYCLE
* W: WEEK_CYCLE
* D: DAY_CYCLE
* H: HOUR_CYCLE
* I: MINUTE_CYCLE
* C: CRONTAB_CYCLE
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.TaskCycleType = null;

        /**
         * Task type

Note: This field may return null, indicating that no valid values can be obtained.
         * @type {TaskTypeOpsDto || null}
         */
        this.TaskType = null;

        /**
         * Execution resource group ID.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.ExecutorGroupId = null;

        /**
         * Resource group name

Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.ExecutorGroupName = null;

        /**
         * Standard data time.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.CurRunDate = null;

        /**
         * Next standard data time.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.NextCurDate = null;

        /**
         * Limit on the number of retries issued each time a run fails.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.TryLimit = null;

        /**
         * Current number of issued run attempts.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.Tries = null;

        /**
         * Cumulative running times.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.TotalRunNum = null;

        /**
         * Lifecycle no.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.LifeRoundNum = null;

        /**
         * Instance type.

-0 indicates the supplementary entry type.
-1 indicates a periodic instance.
-2 indicates a non-periodic instance.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.InstanceType = null;

        /**
         * Indicates the status of an instance.

-Indicates waiting for event.
-[12] indicates waiting for upstream.
-[6, 7, 9, 10, 18] indicates awaiting execution.
-1, 19, 22 indicate running.
-21: skip running.
-[3] indicates retry on failure.
-[8, 4, 5, 13] indicates a failure.
-[2] indicates a success.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.InstanceState = null;

        /**
         * Planned scheduling time.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.SchedulerTime = null;

        /**
         * Start time of operation.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * Indicates the operation completion time.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.EndTime = null;

        /**
         * Time spent.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.CostTime = null;

        /**
         * Instance running trigger type.

-RERUN indicates rerunning.
-ADDITION indicates supplementary recording.
-PERIODIC indicates a period.
-APERIODIC indicates non-periodic.
-RERUN_SKIP_RUN indicates re-run - empty run.
-ADDITION_SKIP_RUN indicates a supplementary run - empty run.
-PERIODIC_SKIP_RUN indicates an empty run in a periodic cycle.
-APERIODIC_SKIP_RUN indicates a non-periodic empty run.
-MANUAL_TRIGGER indicates manual triggering.
-RERUN_MANUAL_TRIGGER indicates manual triggering - rerun.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.InstanceRunType = null;

        /**
         * Dispatch execution ID.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.ExecutionJobId = null;

        /**
         * Instance lifecycle list.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {Array.<InstanceLifeCycleVO> || null}
         */
        this.InstanceLifeCycleList = null;

        /**
         * The last execution log of the instance.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {InstanceLogVO || null}
         */
        this.LatestLog = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.InstanceKey = 'InstanceKey' in params ? params.InstanceKey : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.FolderId = 'FolderId' in params ? params.FolderId : null;
        this.FolderName = 'FolderName' in params ? params.FolderName : null;
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;
        this.WorkflowName = 'WorkflowName' in params ? params.WorkflowName : null;
        this.InChargeList = 'InChargeList' in params ? params.InChargeList : null;
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.TaskName = 'TaskName' in params ? params.TaskName : null;
        this.TaskCycleType = 'TaskCycleType' in params ? params.TaskCycleType : null;

        if (params.TaskType) {
            let obj = new TaskTypeOpsDto();
            obj.deserialize(params.TaskType)
            this.TaskType = obj;
        }
        this.ExecutorGroupId = 'ExecutorGroupId' in params ? params.ExecutorGroupId : null;
        this.ExecutorGroupName = 'ExecutorGroupName' in params ? params.ExecutorGroupName : null;
        this.CurRunDate = 'CurRunDate' in params ? params.CurRunDate : null;
        this.NextCurDate = 'NextCurDate' in params ? params.NextCurDate : null;
        this.TryLimit = 'TryLimit' in params ? params.TryLimit : null;
        this.Tries = 'Tries' in params ? params.Tries : null;
        this.TotalRunNum = 'TotalRunNum' in params ? params.TotalRunNum : null;
        this.LifeRoundNum = 'LifeRoundNum' in params ? params.LifeRoundNum : null;
        this.InstanceType = 'InstanceType' in params ? params.InstanceType : null;
        this.InstanceState = 'InstanceState' in params ? params.InstanceState : null;
        this.SchedulerTime = 'SchedulerTime' in params ? params.SchedulerTime : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;
        this.CostTime = 'CostTime' in params ? params.CostTime : null;
        this.InstanceRunType = 'InstanceRunType' in params ? params.InstanceRunType : null;
        this.ExecutionJobId = 'ExecutionJobId' in params ? params.ExecutionJobId : null;

        if (params.InstanceLifeCycleList) {
            this.InstanceLifeCycleList = new Array();
            for (let z in params.InstanceLifeCycleList) {
                let obj = new InstanceLifeCycleVO();
                obj.deserialize(params.InstanceLifeCycleList[z]);
                this.InstanceLifeCycleList.push(obj);
            }
        }

        if (params.LatestLog) {
            let obj = new InstanceLogVO();
            obj.deserialize(params.LatestLog)
            this.LatestLog = obj;
        }

    }
}

/**
 * Supplementary plan collection
 * @class
 */
class MakePlanOpsDtoCollection extends  AbstractModel {
    constructor(){
        super();

        /**
         * Total Record Count
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * Total number of records
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalPage = null;

        /**
         * Number of records on current page
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.PageCount = null;

        /**
         * Page Number
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Page Size
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Record List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<MakePlanOpsDto> || null}
         */
        this.Items = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.TotalPage = 'TotalPage' in params ? params.TotalPage : null;
        this.PageCount = 'PageCount' in params ? params.PageCount : null;
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;

        if (params.Items) {
            this.Items = new Array();
            for (let z in params.Items) {
                let obj = new MakePlanOpsDto();
                obj.deserialize(params.Items[z]);
                this.Items.push(obj);
            }
        }

    }
}

/**
 * DescribeTableMetas response structure.
 * @class
 */
class DescribeTableMetasResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Table Metadata
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<TableMeta> || null}
         */
        this.TableMetas = null;

        /**
         * Total number of items
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.TableMetas) {
            this.TableMetas = new Array();
            for (let z in params.TableMetas) {
                let obj = new TableMeta();
                obj.deserialize(params.TableMetas[z]);
                this.TableMetas.push(obj);
            }
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * UploadContent response structure.
 * @class
 */
class UploadContentResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Script Information Response
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {ScriptInfoResponse || null}
         */
        this.ScriptInfo = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.ScriptInfo) {
            let obj = new ScriptInfoResponse();
            obj.deserialize(params.ScriptInfo)
            this.ScriptInfo = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Rule Execution Log
 * @class
 */
class RuleExecLog extends  AbstractModel {
    constructor(){
        super();

        /**
         * Completion Status
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.Finished = null;

        /**
         * ContentNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Log = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Finished = 'Finished' in params ? params.Finished : null;
        this.Log = 'Log' in params ? params.Log : null;

    }
}

/**
 * Rule Template
 * @class
 */
class RuleTemplate extends  AbstractModel {
    constructor(){
        super();

        /**
         * Rule Template ID
         * @type {number || null}
         */
        this.RuleTemplateId = null;

        /**
         * Rule Template Name
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Rule Template Description
         * @type {string || null}
         */
        this.Description = null;

        /**
         * Template Type (1: System Template, 2: Self Definition)
         * @type {number || null}
         */
        this.Type = null;

        /**
         * Applicable Source Data Object Type (1: Constant, 2: Offline Table Level, 3: Offline Field Level)
         * @type {number || null}
         */
        this.SourceObjectType = null;

        /**
         * Applicable Source Data Object Type (1: Numeric, 2: String)
         * @type {number || null}
         */
        this.SourceObjectDataType = null;

        /**
         * Rule Template Source Side Content, distinguish engine, JSON Structure
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.SourceContent = null;

        /**
         * Applicable Source Data Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<number> || null}
         */
        this.SourceEngineTypes = null;

        /**
         * Quality Dimension of Rule (1: Accuracy, 2: Uniqueness, 3: Completeness, 4: Consistency, 5: Timeliness, 6: Validity)
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.QualityDim = null;

        /**
         * Supported Comparison Types for Rule (1: Fixed Value Comparison, greater than, less than, greater than or equal, etc. 2: Fluctuation Value Comparison, absolute value, increase, decrease)
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.CompareType = null;

        /**
         * Number of References
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.CitationCount = null;

        /**
         * Creator ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.UserId = null;

        /**
         * Creator Nickname
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.UserName = null;

        /**
         * Update Time yyyy-MM-dd HH:mm:ss
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.UpdateTime = null;

        /**
         * Whether to add where parameter
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.WhereFlag = null;

        /**
         * Whether to Associate Multiple Tables
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.MultiSourceFlag = null;

        /**
         * Custom Template SQL Expression from Definition
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.SqlExpression = null;

        /**
         * Template Sub-dimension,0. Parent Dimension Type,1. Consistency: Enumeration Range Consistency,2. Consistency: Numeric Range Consistency,3. Consistency: Field Data Correlation
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.SubQualityDim = null;

        /**
         * SQL Expression Parsing Object
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {SqlExpression || null}
         */
        this.ResolvedSqlExpression = null;

        /**
         * Supported Data Source Types
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<number> || null}
         */
        this.DatasourceTypes = null;

        /**
         * Created by User ID Str
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.UserIdStr = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.RuleTemplateId = 'RuleTemplateId' in params ? params.RuleTemplateId : null;
        this.Name = 'Name' in params ? params.Name : null;
        this.Description = 'Description' in params ? params.Description : null;
        this.Type = 'Type' in params ? params.Type : null;
        this.SourceObjectType = 'SourceObjectType' in params ? params.SourceObjectType : null;
        this.SourceObjectDataType = 'SourceObjectDataType' in params ? params.SourceObjectDataType : null;
        this.SourceContent = 'SourceContent' in params ? params.SourceContent : null;
        this.SourceEngineTypes = 'SourceEngineTypes' in params ? params.SourceEngineTypes : null;
        this.QualityDim = 'QualityDim' in params ? params.QualityDim : null;
        this.CompareType = 'CompareType' in params ? params.CompareType : null;
        this.CitationCount = 'CitationCount' in params ? params.CitationCount : null;
        this.UserId = 'UserId' in params ? params.UserId : null;
        this.UserName = 'UserName' in params ? params.UserName : null;
        this.UpdateTime = 'UpdateTime' in params ? params.UpdateTime : null;
        this.WhereFlag = 'WhereFlag' in params ? params.WhereFlag : null;
        this.MultiSourceFlag = 'MultiSourceFlag' in params ? params.MultiSourceFlag : null;
        this.SqlExpression = 'SqlExpression' in params ? params.SqlExpression : null;
        this.SubQualityDim = 'SubQualityDim' in params ? params.SubQualityDim : null;

        if (params.ResolvedSqlExpression) {
            let obj = new SqlExpression();
            obj.deserialize(params.ResolvedSqlExpression)
            this.ResolvedSqlExpression = obj;
        }
        this.DatasourceTypes = 'DatasourceTypes' in params ? params.DatasourceTypes : null;
        this.UserIdStr = 'UserIdStr' in params ? params.UserIdStr : null;

    }
}

/**
 * DescribeRuleGroupsByPage request structure.
 * @class
 */
class DescribeRuleGroupsByPageRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Pagination Index
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Page size
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Filter criteria, each request's Filters limit is 10, Filter.Values limit is 5
         * @type {Array.<Filter> || null}
         */
        this.Filters = null;

        /**
         * Sorting Method
         * @type {Array.<OrderField> || null}
         */
        this.OrderFields = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;

        if (params.Filters) {
            this.Filters = new Array();
            for (let z in params.Filters) {
                let obj = new Filter();
                obj.deserialize(params.Filters[z]);
                this.Filters.push(obj);
            }
        }

        if (params.OrderFields) {
            this.OrderFields = new Array();
            for (let z in params.OrderFields) {
                let obj = new OrderField();
                obj.deserialize(params.OrderFields[z]);
                this.OrderFields.push(obj);
            }
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * BatchDeleteIntegrationTasks response structure.
 * @class
 */
class BatchDeleteIntegrationTasksResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.SuccessCount = null;

        /**
         * Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.FailedCount = null;

        /**
         * Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.SuccessCount = 'SuccessCount' in params ? params.SuccessCount : null;
        this.FailedCount = 'FailedCount' in params ? params.FailedCount : null;
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Search condition
 * @class
 */
class SearchConditionInstanceNew extends  AbstractModel {
    constructor(){
        super();

        /**
         * Execution space, optional 
 "DRY_RUN"
         * @type {string || null}
         */
        this.ExecutionSpace = null;

        /**
         * Business Products, options: <DATA_DEV / DATA_QUALITY / DATA_INTEGRATION, default DATA_DEV. Non-empty. Default own project
         * @type {string || null}
         */
        this.ProductName = null;

        /**
         * Resource Group Information, optional
         * @type {string || null}
         */
        this.ResourceGroup = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ExecutionSpace = 'ExecutionSpace' in params ? params.ExecutionSpace : null;
        this.ProductName = 'ProductName' in params ? params.ProductName : null;
        this.ResourceGroup = 'ResourceGroup' in params ? params.ResourceGroup : null;

    }
}

/**
 * DescribeThirdTaskRunLog request structure.
 * @class
 */
class DescribeThirdTaskRunLogRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Instance data time
         * @type {string || null}
         */
        this.CurRunDate = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.CurRunDate = 'CurRunDate' in params ? params.CurRunDate : null;

    }
}

/**
 * BatchRerunIntegrationTaskInstances request structure.
 * @class
 */
class BatchRerunIntegrationTaskInstancesRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Instance Information
         * @type {Array.<SchedulerTaskInstanceInfo> || null}
         */
        this.Instances = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Instances) {
            this.Instances = new Array();
            for (let z in params.Instances) {
                let obj = new SchedulerTaskInstanceInfo();
                obj.deserialize(params.Instances[z]);
                this.Instances.push(obj);
            }
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * DescribeWorkflowTaskCount response structure.
 * @class
 */
class DescribeWorkflowTaskCountResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Statistical Results
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {WorkflowTaskCountOpsDto || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new WorkflowTaskCountOpsDto();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Task Tag, can be used as a condition for retrieving tasks
 * @class
 */
class TaskTag extends  AbstractModel {
    constructor(){
        super();

        /**
         * Tag Name
         * @type {string || null}
         */
        this.TagName = null;

        /**
         * Tag Value List
         * @type {Array.<string> || null}
         */
        this.TagValues = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TagName = 'TagName' in params ? params.TagName : null;
        this.TagValues = 'TagValues' in params ? params.TagValues : null;

    }
}

/**
 * TaskTypeCnt
 * @class
 */
class TaskTypeCnt extends  AbstractModel {
    constructor(){
        super();

        /**
         * Statistical value
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Number = null;

        /**
         * Task TypeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskType = null;

        /**
         * Type name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TypeName = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Number = 'Number' in params ? params.Number : null;
        this.TaskType = 'TaskType' in params ? params.TaskType : null;
        this.TypeName = 'TypeName' in params ? params.TypeName : null;

    }
}

/**
 * SubmitCustomFunction response structure.
 * @class
 */
class SubmitCustomFunctionResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Function Unique Identifier
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FunctionId = null;

        /**
         * Error Prompt
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ErrorMessage = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.FunctionId = 'FunctionId' in params ? params.FunctionId : null;
        this.ErrorMessage = 'ErrorMessage' in params ? params.ErrorMessage : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeTopTableStat request structure.
 * @class
 */
class DescribeTopTableStatRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Start time, timestamp to the second
         * @type {string || null}
         */
        this.BeginDate = null;

        /**
         * End time, timestamp to the second
         * @type {string || null}
         */
        this.EndDate = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.BeginDate = 'BeginDate' in params ? params.BeginDate : null;
        this.EndDate = 'EndDate' in params ? params.EndDate : null;

    }
}

/**
 * Query Instance Criteria
 * @class
 */
class SearchCondition extends  AbstractModel {
    constructor(){
        super();

        /**
         * Query Framework, Required
         * @type {SearchConditionInstanceNew || null}
         */
        this.Instance = null;

        /**
         * Query Keyword (Task ID exact match, Task Name fuzzy match), Optional
         * @type {string || null}
         */
        this.Keyword = null;

        /**
         * Sorting Order (asc, desc)
         * @type {string || null}
         */
        this.Sort = null;

        /**
         * Sort Column (costTime Runtime duration, startTime Start Time, state Instance status, curRunDate Data Timestamp)
         * @type {string || null}
         */
        this.SortCol = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Instance) {
            let obj = new SearchConditionInstanceNew();
            obj.deserialize(params.Instance)
            this.Instance = obj;
        }
        this.Keyword = 'Keyword' in params ? params.Keyword : null;
        this.Sort = 'Sort' in params ? params.Sort : null;
        this.SortCol = 'SortCol' in params ? params.SortCol : null;

    }
}

/**
 * Data Quality Rules
 * @class
 */
class Rule extends  AbstractModel {
    constructor(){
        super();

        /**
         * Rule ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.RuleId = null;

        /**
         * Rule Group ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.RuleGroupId = null;

        /**
         * Data Table ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableId = null;

        /**
         * Rule nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Rule Type 1. System Template, 2. Custom Definition Template, 3. Custom Definition SQL
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Type = null;

        /**
         * Rule Template ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.RuleTemplateId = null;

        /**
         * Rule Template Overview
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.RuleTemplateContent = null;

        /**
         * Quality Dimension of Rule 1: Accuracy, 2: Uniqueness, 3: Completeness, 4: Consistency, 5: Timeliness, 6: Validity
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.QualityDim = null;

        /**
         * Applicable Source Data Object Type (1: Constant, 2: Offline Table Level, 3: Offline Field Level)
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.SourceObjectType = null;

        /**
         * Applicable Source Data Object Type (1: Numeric, 2: String)
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.SourceObjectDataType = null;

        /**
         * Source Field Detailed Type, INT, STRING
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.SourceObjectDataTypeName = null;

        /**
         * Source Field Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.SourceObjectValue = null;

        /**
         * Detection Range 1. Whole Table, 2. Conditional Scan
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.ConditionType = null;

        /**
         * Conditional Scan WHERE Condition Expression
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ConditionExpression = null;

        /**
         * Custom Template SQL Expression from Definition
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CustomSql = null;

        /**
         * Alert Trigger Condition
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {CompareRule || null}
         */
        this.CompareRule = null;

        /**
         * Alert Trigger Level 1. Low, 2. Medium, 3. High
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.AlarmLevel = null;

        /**
         * Rule DescriptionNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Description = null;

        /**
         * Rule Configurator
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Operator = null;

        /**
         * Target Database Id
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TargetDatabaseId = null;

        /**
         * Target Database Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TargetDatabaseName = null;

        /**
         * Target Table Id
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TargetTableId = null;

        /**
         * Target Table Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TargetTableName = null;

        /**
         * Target Field Filter Condition Expression
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TargetConditionExpr = null;

        /**
         * Source and target field association conditions in ON expression
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.RelConditionExpr = null;

        /**
         * From Definition template SQL expression parameters
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {RuleFieldConfig || null}
         */
        this.FieldConfig = null;

        /**
         * Whether to join multiple tables
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.MultiSourceFlag = null;

        /**
         * Whether WHERE parameters exist
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.WhereFlag = null;

        /**
         * Template original SQL
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TemplateSql = null;

        /**
         * Template sub-dimensions: 0.Parent dimension type, 1.Consistency: Enum range consistency, 2.Consistency: Numeric range consistency, 3.Consistency: Field data correlation
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.SubQualityDim = null;

        /**
         * Rule applicable target data object types (1: Constant, 2: Offline table level, 3: Offline field level)
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TargetObjectType = null;

        /**
         * Rule applicable target data object types (1: Numeric, 2: String)
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TargetObjectDataType = null;

        /**
         * Target field detailed types, INT, STRING
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TargetObjectDataTypeName = null;

        /**
         * Target field name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TargetObjectValue = null;

        /**
         * Source engine type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<number> || null}
         */
        this.SourceEngineTypes = null;

        /**
         * Table name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableName = null;

        /**
         * Table manager name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableOwnerName = null;

        /**
         * Execution strategy information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {RuleGroupExecStrategy || null}
         */
        this.ExecStrategy = null;

        /**
         * Subscription information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {RuleGroupSubscribe || null}
         */
        this.Subscription = null;

        /**
         * Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreateTime = null;

        /**
         * Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.DatasourceId = null;

        /**
         * Database ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatabaseId = null;

        /**
         * Monitoring enabled. 0 false, 1 true
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.MonitorStatus = null;

        /**
         * Trigger conditionNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TriggerCondition = null;

        /**
         * 0, or not returned, or null: Undefined, 1: Production, 2: Development
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.DsEnvType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.RuleId = 'RuleId' in params ? params.RuleId : null;
        this.RuleGroupId = 'RuleGroupId' in params ? params.RuleGroupId : null;
        this.TableId = 'TableId' in params ? params.TableId : null;
        this.Name = 'Name' in params ? params.Name : null;
        this.Type = 'Type' in params ? params.Type : null;
        this.RuleTemplateId = 'RuleTemplateId' in params ? params.RuleTemplateId : null;
        this.RuleTemplateContent = 'RuleTemplateContent' in params ? params.RuleTemplateContent : null;
        this.QualityDim = 'QualityDim' in params ? params.QualityDim : null;
        this.SourceObjectType = 'SourceObjectType' in params ? params.SourceObjectType : null;
        this.SourceObjectDataType = 'SourceObjectDataType' in params ? params.SourceObjectDataType : null;
        this.SourceObjectDataTypeName = 'SourceObjectDataTypeName' in params ? params.SourceObjectDataTypeName : null;
        this.SourceObjectValue = 'SourceObjectValue' in params ? params.SourceObjectValue : null;
        this.ConditionType = 'ConditionType' in params ? params.ConditionType : null;
        this.ConditionExpression = 'ConditionExpression' in params ? params.ConditionExpression : null;
        this.CustomSql = 'CustomSql' in params ? params.CustomSql : null;

        if (params.CompareRule) {
            let obj = new CompareRule();
            obj.deserialize(params.CompareRule)
            this.CompareRule = obj;
        }
        this.AlarmLevel = 'AlarmLevel' in params ? params.AlarmLevel : null;
        this.Description = 'Description' in params ? params.Description : null;
        this.Operator = 'Operator' in params ? params.Operator : null;
        this.TargetDatabaseId = 'TargetDatabaseId' in params ? params.TargetDatabaseId : null;
        this.TargetDatabaseName = 'TargetDatabaseName' in params ? params.TargetDatabaseName : null;
        this.TargetTableId = 'TargetTableId' in params ? params.TargetTableId : null;
        this.TargetTableName = 'TargetTableName' in params ? params.TargetTableName : null;
        this.TargetConditionExpr = 'TargetConditionExpr' in params ? params.TargetConditionExpr : null;
        this.RelConditionExpr = 'RelConditionExpr' in params ? params.RelConditionExpr : null;

        if (params.FieldConfig) {
            let obj = new RuleFieldConfig();
            obj.deserialize(params.FieldConfig)
            this.FieldConfig = obj;
        }
        this.MultiSourceFlag = 'MultiSourceFlag' in params ? params.MultiSourceFlag : null;
        this.WhereFlag = 'WhereFlag' in params ? params.WhereFlag : null;
        this.TemplateSql = 'TemplateSql' in params ? params.TemplateSql : null;
        this.SubQualityDim = 'SubQualityDim' in params ? params.SubQualityDim : null;
        this.TargetObjectType = 'TargetObjectType' in params ? params.TargetObjectType : null;
        this.TargetObjectDataType = 'TargetObjectDataType' in params ? params.TargetObjectDataType : null;
        this.TargetObjectDataTypeName = 'TargetObjectDataTypeName' in params ? params.TargetObjectDataTypeName : null;
        this.TargetObjectValue = 'TargetObjectValue' in params ? params.TargetObjectValue : null;
        this.SourceEngineTypes = 'SourceEngineTypes' in params ? params.SourceEngineTypes : null;
        this.TableName = 'TableName' in params ? params.TableName : null;
        this.TableOwnerName = 'TableOwnerName' in params ? params.TableOwnerName : null;

        if (params.ExecStrategy) {
            let obj = new RuleGroupExecStrategy();
            obj.deserialize(params.ExecStrategy)
            this.ExecStrategy = obj;
        }

        if (params.Subscription) {
            let obj = new RuleGroupSubscribe();
            obj.deserialize(params.Subscription)
            this.Subscription = obj;
        }
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;
        this.DatasourceId = 'DatasourceId' in params ? params.DatasourceId : null;
        this.DatabaseId = 'DatabaseId' in params ? params.DatabaseId : null;
        this.MonitorStatus = 'MonitorStatus' in params ? params.MonitorStatus : null;
        this.TriggerCondition = 'TriggerCondition' in params ? params.TriggerCondition : null;
        this.DsEnvType = 'DsEnvType' in params ? params.DsEnvType : null;

    }
}

/**
 * DescribeTableLineage response structure.
 * @class
 */
class DescribeTableLineageResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Table Lineage Information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {TableLineageInfo || null}
         */
        this.TableLineage = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.TableLineage) {
            let obj = new TableLineageInfo();
            obj.deserialize(params.TableLineage)
            this.TableLineage = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * ModifyRuleGroupSubscription request structure.
 * @class
 */
class ModifyRuleGroupSubscriptionRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Rule Group ID
         * @type {number || null}
         */
        this.RuleGroupId = null;

        /**
         * Subscriber Information
         * @type {Array.<SubscribeReceiver> || null}
         */
        this.Receivers = null;

        /**
         * Data Subscription Type
         * @type {Array.<number> || null}
         */
        this.SubscribeType = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Database ID
         * @type {string || null}
         */
        this.DatabaseId = null;

        /**
         * Data Source ID
         * @type {string || null}
         */
        this.DatasourceId = null;

        /**
         * Data Table ID
         * @type {string || null}
         */
        this.TableId = null;

        /**
         * Group Robot Webhook Information
         * @type {Array.<SubscribeWebHook> || null}
         */
        this.WebHooks = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.RuleGroupId = 'RuleGroupId' in params ? params.RuleGroupId : null;

        if (params.Receivers) {
            this.Receivers = new Array();
            for (let z in params.Receivers) {
                let obj = new SubscribeReceiver();
                obj.deserialize(params.Receivers[z]);
                this.Receivers.push(obj);
            }
        }
        this.SubscribeType = 'SubscribeType' in params ? params.SubscribeType : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.DatabaseId = 'DatabaseId' in params ? params.DatabaseId : null;
        this.DatasourceId = 'DatasourceId' in params ? params.DatasourceId : null;
        this.TableId = 'TableId' in params ? params.TableId : null;

        if (params.WebHooks) {
            this.WebHooks = new Array();
            for (let z in params.WebHooks) {
                let obj = new SubscribeWebHook();
                obj.deserialize(params.WebHooks[z]);
                this.WebHooks.push(obj);
            }
        }

    }
}

/**
 * DescribeDataSourceList response structure.
 * @class
 */
class DescribeDataSourceListResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * data source list
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {DataSourceInfoPage || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new DataSourceInfoPage();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Agent Collector Status Statistics
 * @class
 */
class AgentStatus extends  AbstractModel {
    constructor(){
        super();

        /**
         * Running Quantity
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Running = null;

        /**
         * Number of Anomalies
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Abnormal = null;

        /**
         * Operating Quantity
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.InOperation = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Running = 'Running' in params ? params.Running : null;
        this.Abnormal = 'Abnormal' in params ? params.Abnormal : null;
        this.InOperation = 'InOperation' in params ? params.InOperation : null;

    }
}

/**
 * DescribeInstanceLogDetail request structure.
 * @class
 */
class DescribeInstanceLogDetailRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Data Timestamp
         * @type {string || null}
         */
        this.CurRunDate = null;

        /**
         * Server Ip
         * @type {string || null}
         */
        this.BrokerIp = null;

        /**
         * File Name
         * @type {string || null}
         */
        this.OriginFileName = null;

        /**
         * Starting Row
         * @type {number || null}
         */
        this.StartCount = null;

        /**
         * Number of Rows Per Query
         * @type {number || null}
         */
        this.LineCount = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.CurRunDate = 'CurRunDate' in params ? params.CurRunDate : null;
        this.BrokerIp = 'BrokerIp' in params ? params.BrokerIp : null;
        this.OriginFileName = 'OriginFileName' in params ? params.OriginFileName : null;
        this.StartCount = 'StartCount' in params ? params.StartCount : null;
        this.LineCount = 'LineCount' in params ? params.LineCount : null;

    }
}

/**
 * BatchSuspendIntegrationTasks request structure.
 * @class
 */
class BatchSuspendIntegrationTasksRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {Array.<string> || null}
         */
        this.TaskIds = null;

        /**
         * Task Type, 201 for real-time tasks, 202 for offline tasks
         * @type {number || null}
         */
        this.TaskType = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Event Type (START, STOP, SUSPEND, SUSPEND_WITHOUT_SP, RESUME, COMMIT, TIMESTAMP)	
         * @type {string || null}
         */
        this.Event = null;

        /**
         * This batch operation involves tasks for auditing
         * @type {Array.<string> || null}
         */
        this.TaskNames = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskIds = 'TaskIds' in params ? params.TaskIds : null;
        this.TaskType = 'TaskType' in params ? params.TaskType : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.Event = 'Event' in params ? params.Event : null;
        this.TaskNames = 'TaskNames' in params ? params.TaskNames : null;

    }
}

/**
 * DeleteDsFolder response structure.
 * @class
 */
class DeleteDsFolderResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * true means deletion successful, false means deletion failed
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeDrInstancePage response structure.
 * @class
 */
class DescribeDrInstancePageResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Result Set
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {DrInstanceOpsDtoPage || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new DrInstanceOpsDtoPage();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * MoveTasksToFolder request structure.
 * @class
 */
class MoveTasksToFolderRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Workflow ID
         * @type {string || null}
         */
        this.WorkflowId = null;

        /**
         * Task Folder ID
         * @type {string || null}
         */
        this.TaskFolderId = null;

        /**
         * Task ID
         * @type {Array.<string> || null}
         */
        this.TaskIds = null;

        /**
         * Virtual Task ID
         * @type {Array.<string> || null}
         */
        this.VirtualTaskIds = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;
        this.TaskFolderId = 'TaskFolderId' in params ? params.TaskFolderId : null;
        this.TaskIds = 'TaskIds' in params ? params.TaskIds : null;
        this.VirtualTaskIds = 'VirtualTaskIds' in params ? params.VirtualTaskIds : null;

    }
}

/**
 * MoveTasksToFolder response structure.
 * @class
 */
class MoveTasksToFolderResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * true represents success
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * UpdateWorkflowOwner request structure.
 * @class
 */
class UpdateWorkflowOwnerRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Workflow IDs
         * @type {Array.<string> || null}
         */
        this.WorkflowIds = null;

        /**
         * Person in charge, separated by ';'
         * @type {string || null}
         */
        this.Owner = null;

        /**
         * Person in Charge UserId, separated by ';'
         * @type {string || null}
         */
        this.OwnerId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.WorkflowIds = 'WorkflowIds' in params ? params.WorkflowIds : null;
        this.Owner = 'Owner' in params ? params.Owner : null;
        this.OwnerId = 'OwnerId' in params ? params.OwnerId : null;

    }
}

/**
 * DescribeSchedulerTaskTypeCnt response structure.
 * @class
 */
class DescribeSchedulerTaskTypeCntResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * data
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<TaskTypeCnt> || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            this.Data = new Array();
            for (let z in params.Data) {
                let obj = new TaskTypeCnt();
                obj.deserialize(params.Data[z]);
                this.Data.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DeleteCustomFunction response structure.
 * @class
 */
class DeleteCustomFunctionResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Function ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FunctionId = null;

        /**
         * NoNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ErrorMessage = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.FunctionId = 'FunctionId' in params ? params.FunctionId : null;
        this.ErrorMessage = 'ErrorMessage' in params ? params.ErrorMessage : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Dimension Scoring Information
 * @class
 */
class DimensionScoreInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Dimension NameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Name = null;

        /**
         * WeightNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Weight = null;

        /**
         * Setter ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.UserId = null;

        /**
         * Setter Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.UserName = null;

        /**
         * Update Time Timestamp
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.UpdateTime = null;

        /**
         * Number of Evaluation Forms Involved
         * @type {number || null}
         */
        this.JoinTableNumber = null;

        /**
         * Scoring
         * @type {number || null}
         */
        this.Score = null;

        /**
         * Set by User ID Str
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.UserIdStr = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Name = 'Name' in params ? params.Name : null;
        this.Weight = 'Weight' in params ? params.Weight : null;
        this.UserId = 'UserId' in params ? params.UserId : null;
        this.UserName = 'UserName' in params ? params.UserName : null;
        this.UpdateTime = 'UpdateTime' in params ? params.UpdateTime : null;
        this.JoinTableNumber = 'JoinTableNumber' in params ? params.JoinTableNumber : null;
        this.Score = 'Score' in params ? params.Score : null;
        this.UserIdStr = 'UserIdStr' in params ? params.UserIdStr : null;

    }
}

/**
 * DescribeTaskScript response structure.
 * @class
 */
class DescribeTaskScriptResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task Script Content
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {TaskScriptContent || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new TaskScriptContent();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Instance list pagination entity.
 * @class
 */
class InstancePageVO extends  AbstractModel {
    constructor(){
        super();

        /**
         * Total number of entries.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * Total number of pages.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.TotalPage = null;

        /**
         * Page number

Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Entries per page.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Total number of pages.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.PageCount = null;

        /**
         * Data List

Note: This field may return null, indicating that no valid values can be obtained.
         * @type {Array.<InstanceVO> || null}
         */
        this.Items = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.TotalPage = 'TotalPage' in params ? params.TotalPage : null;
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;
        this.PageCount = 'PageCount' in params ? params.PageCount : null;

        if (params.Items) {
            this.Items = new Array();
            for (let z in params.Items) {
                let obj = new InstanceVO();
                obj.deserialize(params.Items[z]);
                this.Items.push(obj);
            }
        }

    }
}

/**
 * Instance List Structure
 * @class
 */
class CollectionInstanceOpsDto extends  AbstractModel {
    constructor(){
        super();

        /**
         * Total numberNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * Total Number of Pages
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalPage = null;

        /**
         * Current Page Number
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.PageCount = null;

        /**
         * Page Number
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Quantity per page
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Instance InformationNote: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<InstanceOpsDto> || null}
         */
        this.Items = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.TotalPage = 'TotalPage' in params ? params.TotalPage : null;
        this.PageCount = 'PageCount' in params ? params.PageCount : null;
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;

        if (params.Items) {
            this.Items = new Array();
            for (let z in params.Items) {
                let obj = new InstanceOpsDto();
                obj.deserialize(params.Items[z]);
                this.Items.push(obj);
            }
        }

    }
}

/**
 * Trial Run Record
 * @class
 */
class DrInstanceOpsDtoPage extends  AbstractModel {
    constructor(){
        super();

        /**
         * Total Record Count
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * Record List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<DrInstanceOpsDto> || null}
         */
        this.Items = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;

        if (params.Items) {
            this.Items = new Array();
            for (let z in params.Items) {
                let obj = new DrInstanceOpsDto();
                obj.deserialize(params.Items[z]);
                this.Items.push(obj);
            }
        }

    }
}

/**
 * Table Lineage Details
 * @class
 */
class TableLineageInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Metadata Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.MetastoreType = null;

        /**
         * Space ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Data source ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatasourceId = null;

        /**
         * Table ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableId = null;

        /**
         * Table Lineage Parameters
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<LineageParamRecord> || null}
         */
        this.Params = null;

        /**
         * Parent Node List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ParentSet = null;

        /**
         * Child Node List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ChildSet = null;

        /**
         * Additional parameters
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<RecordField> || null}
         */
        this.ExtParams = null;

        /**
         * Lineage ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Id = null;

        /**
         * Metadata Type Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.MetastoreTypeName = null;

        /**
         * Table name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableName = null;

        /**
         * Full Table Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.QualifiedName = null;

        /**
         * Number of Downstream Nodes in Lineage
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.DownStreamCount = null;

        /**
         * Number of Upstream Nodes in Lineage
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.UpStreamCount = null;

        /**
         * Bloodline Description
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Description = null;

        /**
         * Path from the central node to this node
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.PrefixPath = null;

        /**
         * Bloodline Creation Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreateTime = null;

        /**
         * Bloodline Update Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ModifyTime = null;

        /**
         * List of task IDs for modifying bloodline
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<string> || null}
         */
        this.Tasks = null;

        /**
         * Module/Application Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ChannelType = null;

        /**
         * Display Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DisplayType = null;

        /**
         * Table Types
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EngineType = null;

        /**
         * Table Types
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableType = null;

        /**
         * datasourceName
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatasourceName = null;

        /**
         * DatabaseName
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatabaseName = null;

        /**
         * DatabaseId
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatabaseId = null;

        /**
         * Data source.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.DataFromType = null;

        /**
         * Collection id.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.CollectJobId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.MetastoreType = 'MetastoreType' in params ? params.MetastoreType : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.DatasourceId = 'DatasourceId' in params ? params.DatasourceId : null;
        this.TableId = 'TableId' in params ? params.TableId : null;

        if (params.Params) {
            this.Params = new Array();
            for (let z in params.Params) {
                let obj = new LineageParamRecord();
                obj.deserialize(params.Params[z]);
                this.Params.push(obj);
            }
        }
        this.ParentSet = 'ParentSet' in params ? params.ParentSet : null;
        this.ChildSet = 'ChildSet' in params ? params.ChildSet : null;

        if (params.ExtParams) {
            this.ExtParams = new Array();
            for (let z in params.ExtParams) {
                let obj = new RecordField();
                obj.deserialize(params.ExtParams[z]);
                this.ExtParams.push(obj);
            }
        }
        this.Id = 'Id' in params ? params.Id : null;
        this.MetastoreTypeName = 'MetastoreTypeName' in params ? params.MetastoreTypeName : null;
        this.TableName = 'TableName' in params ? params.TableName : null;
        this.QualifiedName = 'QualifiedName' in params ? params.QualifiedName : null;
        this.DownStreamCount = 'DownStreamCount' in params ? params.DownStreamCount : null;
        this.UpStreamCount = 'UpStreamCount' in params ? params.UpStreamCount : null;
        this.Description = 'Description' in params ? params.Description : null;
        this.PrefixPath = 'PrefixPath' in params ? params.PrefixPath : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;
        this.ModifyTime = 'ModifyTime' in params ? params.ModifyTime : null;
        this.Tasks = 'Tasks' in params ? params.Tasks : null;
        this.ChannelType = 'ChannelType' in params ? params.ChannelType : null;
        this.DisplayType = 'DisplayType' in params ? params.DisplayType : null;
        this.EngineType = 'EngineType' in params ? params.EngineType : null;
        this.TableType = 'TableType' in params ? params.TableType : null;
        this.DatasourceName = 'DatasourceName' in params ? params.DatasourceName : null;
        this.DatabaseName = 'DatabaseName' in params ? params.DatabaseName : null;
        this.DatabaseId = 'DatabaseId' in params ? params.DatabaseId : null;
        this.DataFromType = 'DataFromType' in params ? params.DataFromType : null;
        this.CollectJobId = 'CollectJobId' in params ? params.CollectJobId : null;

    }
}

/**
 * DescribeSchedulerInstanceStatus response structure.
 * @class
 */
class DescribeSchedulerInstanceStatusResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Response Data
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<ScreenInstanceInfo> || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            this.Data = new Array();
            for (let z in params.Data) {
                let obj = new ScreenInstanceInfo();
                obj.deserialize(params.Data[z]);
                this.Data.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * CountOpsInstanceState request structure.
 * @class
 */
class CountOpsInstanceStateRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * EventCaseOpsDto
 * @class
 */
class EventCaseOpsDto extends  AbstractModel {
    constructor(){
        super();

        /**
         * Case ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CaseId = null;

        /**
         * Case Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Name = null;

        /**
         * time format
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Dimension = null;

        /**
         * Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreationTimestamp = null;

        /**
         * Consumer ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ConsumerId = null;

        /**
         * DescriptionNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Description = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.CaseId = 'CaseId' in params ? params.CaseId : null;
        this.Name = 'Name' in params ? params.Name : null;
        this.Dimension = 'Dimension' in params ? params.Dimension : null;
        this.CreationTimestamp = 'CreationTimestamp' in params ? params.CreationTimestamp : null;
        this.ConsumerId = 'ConsumerId' in params ? params.ConsumerId : null;
        this.Description = 'Description' in params ? params.Description : null;

    }
}

/**
 * CreateTaskVersionDs response structure.
 * @class
 */
class CreateTaskVersionDsResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * VersionNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Query the current node information of the real-time task instance
 * @class
 */
class InstanceNodeInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Read from node SOURCE Write to node SINK
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.NodeType = null;

        /**
         * Node IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.NodeId = null;

        /**
         * Node nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.NodeName = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.NodeType = 'NodeType' in params ? params.NodeType : null;
        this.NodeId = 'NodeId' in params ? params.NodeId : null;
        this.NodeName = 'NodeName' in params ? params.NodeName : null;

    }
}

/**
 * BatchUpdateIntegrationTasks request structure.
 * @class
 */
class BatchUpdateIntegrationTasksRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {Array.<string> || null}
         */
        this.TaskIds = null;

        /**
         * Person in Charge (separate multiple persons in charge with a lowercase semicolon; offline tasks use the account name, real-time tasks use the account ID)
         * @type {string || null}
         */
        this.Incharge = null;

        /**
         * Task Type
         * @type {number || null}
         */
        this.TaskType = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Responsible Person ID (separate multiple persons in charge with a lowercase semicolon)
         * @type {string || null}
         */
        this.InchargeIds = null;

        /**
         * This batch operation involves tasks for auditing
         * @type {Array.<string> || null}
         */
        this.TaskNames = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskIds = 'TaskIds' in params ? params.TaskIds : null;
        this.Incharge = 'Incharge' in params ? params.Incharge : null;
        this.TaskType = 'TaskType' in params ? params.TaskType : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.InchargeIds = 'InchargeIds' in params ? params.InchargeIds : null;
        this.TaskNames = 'TaskNames' in params ? params.TaskNames : null;

    }
}

/**
 * BatchModifyOpsOwners request structure.
 * @class
 */
class BatchModifyOpsOwnersRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * TaskId Array that Needs Updated Responsible Person
         * @type {Array.<string> || null}
         */
        this.TaskIdList = null;

        /**
         * Responsible User Id Information that Needs Updating, Connect Multiple Persons in Charge with ;
         * @type {string || null}
         */
        this.Owners = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskIdList = 'TaskIdList' in params ? params.TaskIdList : null;
        this.Owners = 'Owners' in params ? params.Owners : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * ModifyTaskName response structure.
 * @class
 */
class ModifyTaskNameResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Result
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * BatchDeleteOpsTasks request structure.
 * @class
 */
class BatchDeleteOpsTasksRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Batch Deleted Task TaskId
         * @type {Array.<string> || null}
         */
        this.TaskIdList = null;

        /**
         * true: After deletion, downstream tasks can run normally
false: After deletion, downstream tasks cannot run
         * @type {boolean || null}
         */
        this.DeleteMode = null;

        /**
         * true: Notify Downstream Task Responsible Persons
false: Do Not Notify Downstream Task Responsible Persons
         * @type {boolean || null}
         */
        this.EnableNotify = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskIdList = 'TaskIdList' in params ? params.TaskIdList : null;
        this.DeleteMode = 'DeleteMode' in params ? params.DeleteMode : null;
        this.EnableNotify = 'EnableNotify' in params ? params.EnableNotify : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * ResumeIntegrationTask response structure.
 * @class
 */
class ResumeIntegrationTaskResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Operation Success or Failure Indicator
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Workflow
 * @class
 */
class WorkflowExtOpsDto extends  AbstractModel {
    constructor(){
        super();

        /**
         * Number of Tasks Count
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TaskCount = null;

        /**
         * File NameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FolderName = null;

        /**
         * Workflow IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.WorkFlowId = null;

        /**
         * Person in ChargeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Owner = null;

        /**
         * Person in charge userId\nNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.OwnerId = null;

        /**
         * Project IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Project IdentifierNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectIdent = null;

        /**
         * Project nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectName = null;

        /**
         * Workflow DescriptionNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.WorkFlowDesc = null;

        /**
         * Workflow nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.WorkFlowName = null;

        /**
         * Workflow file id\nNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FolderId = null;

        /**
         * Workflow statusNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Status = null;

        /**
         * Workflow creation time\nNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreateTime = null;

        /**
         * Last update time\nNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ModifyTime = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskCount = 'TaskCount' in params ? params.TaskCount : null;
        this.FolderName = 'FolderName' in params ? params.FolderName : null;
        this.WorkFlowId = 'WorkFlowId' in params ? params.WorkFlowId : null;
        this.Owner = 'Owner' in params ? params.Owner : null;
        this.OwnerId = 'OwnerId' in params ? params.OwnerId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.ProjectIdent = 'ProjectIdent' in params ? params.ProjectIdent : null;
        this.ProjectName = 'ProjectName' in params ? params.ProjectName : null;
        this.WorkFlowDesc = 'WorkFlowDesc' in params ? params.WorkFlowDesc : null;
        this.WorkFlowName = 'WorkFlowName' in params ? params.WorkFlowName : null;
        this.FolderId = 'FolderId' in params ? params.FolderId : null;
        this.Status = 'Status' in params ? params.Status : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;
        this.ModifyTime = 'ModifyTime' in params ? params.ModifyTime : null;

    }
}

/**
 * Lineage Parameter Record
 * @class
 */
class LineageParamRecord extends  AbstractModel {
    constructor(){
        super();

        /**
         * Field name
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Field valueNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Value = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Name = 'Name' in params ? params.Name : null;
        this.Value = 'Value' in params ? params.Value : null;

    }
}

/**
 * Batch Operation Result
 * @class
 */
class BatchResult extends  AbstractModel {
    constructor(){
        super();

        /**
         * Number of Tasks Running
         * @type {number || null}
         */
        this.Running = null;

        /**
         * Number of Tasks Executed Successfully
         * @type {number || null}
         */
        this.Success = null;

        /**
         * Number of Tasks Executed Failed
         * @type {number || null}
         */
        this.Failed = null;

        /**
         * Total Tasks
         * @type {number || null}
         */
        this.Total = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Running = 'Running' in params ? params.Running : null;
        this.Success = 'Success' in params ? params.Success : null;
        this.Failed = 'Failed' in params ? params.Failed : null;
        this.Total = 'Total' in params ? params.Total : null;

    }
}

/**
 * Instance log content.
 * @class
 */
class InstanceLogVO extends  AbstractModel {
    constructor(){
        super();

        /**
         * Unique id of an instance.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.InstanceKey = null;

        /**
         * Project ID.

Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * **Instance status**.

-Indicates waiting for event.
-[12] indicates waiting for upstream.
-[6, 7, 9, 10, 18] indicates awaiting execution.
-1, 19, 22 indicate running.
-21: skip running.
-[3] indicates retry on failure.
-[8, 4, 5, 13] indicates a failure.
-[2] indicates a success.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.InstanceState = null;

        /**
         * Instance running trigger type.

-RERUN indicates rerunning.
-ADDITION indicates supplementary recording.
-PERIODIC indicates a period.
-APERIODIC indicates non-periodic.
-RERUN_SKIP_RUN means empty run for re-run.
-ADDITION_SKIP_RUN indicates a supplementary run - empty run.
-PERIODIC_SKIP_RUN indicates an empty run in a periodic cycle.
-APERIODIC_SKIP_RUN indicates a non-periodic empty run.
-MANUAL_TRIGGER indicates manual triggering.
-RERUN_MANUAL_TRIGGER indicates manual triggering - rerun.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.RunType = null;

        /**
         * Start time of running.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * Indicates the operation completion time.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.EndTime = null;

        /**
         * Run code content.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.CodeInfo = null;

        /**
         * File size for running code.
Unit: KB.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.CodeFileSize = null;

        /**
         * Log node information.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.BrokerIp = null;

        /**
         * Log content.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.LogInfo = null;

        /**
         * Log file size.
KB.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.LogFileSize = null;

        /**
         * Row count of returned logs this time.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.LineCount = null;

        /**
         * Execute platform log pagination query parameters, transparently input for each request. the value is an empty string when querying the first page.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.ExtInfo = null;

        /**
         * Paging query for logs. indicates whether it is the last page.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {boolean || null}
         */
        this.IsEnd = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.InstanceKey = 'InstanceKey' in params ? params.InstanceKey : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.InstanceState = 'InstanceState' in params ? params.InstanceState : null;
        this.RunType = 'RunType' in params ? params.RunType : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;
        this.CodeInfo = 'CodeInfo' in params ? params.CodeInfo : null;
        this.CodeFileSize = 'CodeFileSize' in params ? params.CodeFileSize : null;
        this.BrokerIp = 'BrokerIp' in params ? params.BrokerIp : null;
        this.LogInfo = 'LogInfo' in params ? params.LogInfo : null;
        this.LogFileSize = 'LogFileSize' in params ? params.LogFileSize : null;
        this.LineCount = 'LineCount' in params ? params.LineCount : null;
        this.ExtInfo = 'ExtInfo' in params ? params.ExtInfo : null;
        this.IsEnd = 'IsEnd' in params ? params.IsEnd : null;

    }
}

/**
 * Batch Run Integration Task Configuration
 * @class
 */
class StartTaskInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Batch task type, for example, START, TIMESTAMP, RESTORE, RESUME, etc.\nNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Event = null;

        /**
         * Task Id list\nNote: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<string> || null}
         */
        this.TaskIds = null;

        /**
         * Batch task configuration, currently only used for real-time integration based on time point startup. For time point startup, a RecordField configuration with name=timestamp, value=specific timestamp needs to be set\nNote: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<RecordField> || null}
         */
        this.Config = null;

        /**
         * Operation TypeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Description = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Event = 'Event' in params ? params.Event : null;
        this.TaskIds = 'TaskIds' in params ? params.TaskIds : null;

        if (params.Config) {
            this.Config = new Array();
            for (let z in params.Config) {
                let obj = new RecordField();
                obj.deserialize(params.Config[z]);
                this.Config.push(obj);
            }
        }
        this.Description = 'Description' in params ? params.Description : null;

    }
}

/**
 * DescribeIntegrationStatisticsInstanceTrend response structure.
 * @class
 */
class DescribeIntegrationStatisticsInstanceTrendResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Statistical ResultsNote: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<IntegrationStatisticsTrendResult> || null}
         */
        this.TrendsData = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.TrendsData) {
            this.TrendsData = new Array();
            for (let z in params.TrendsData) {
                let obj = new IntegrationStatisticsTrendResult();
                obj.deserialize(params.TrendsData[z]);
                this.TrendsData.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeInstanceLogList request structure.
 * @class
 */
class DescribeInstanceLogListRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Data Timestamp
         * @type {string || null}
         */
        this.CurRunDate = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.CurRunDate = 'CurRunDate' in params ? params.CurRunDate : null;

    }
}

/**
 * Integrated Task Node
 * @class
 */
class IntegrationNodeInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Integration Node ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Id = null;

        /**
         * Task ID of the Integrated Node
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Integration Node Name
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Integration Node Type, INPUT: Input Node, OUTPUT: Output Node
         * @type {string || null}
         */
        this.NodeType = null;

        /**
         * Node Data Source Type: MYSQL|POSTGRE|ORACLE|SQLSERVER|FTP|HIVE|HDFS|ICEBERG|KAFKA|HBASE|SPARK|VIRTUAL|TBASE|DB2|DM|GAUSSDB|GBASE|IMPALA|ES|S3_DATAINSIGHT|GREENPLUM|PHOENIX|SAP_HANA|SFTP|OCEANBASE|CLICKHOUSE|KUDU|VERTICA|REDIS|COS|DLC|DLCV1|DORIS|CKAFKA|DTS_KAFKA|S3|CDW|LOCAL|TDSQLC|TDSQL|TDSQL_MYSQL|MONGODB|INFORMIX|SYBASE|REST_API|SuperSQL|PRESTO|DR_SUM|TiDB|StarRocks|Trino|Kyuubi|GDB|TCHOUSE_X|TCHOUSE_P|TDSQL_POSTGRE
         * @type {string || null}
         */
        this.DataSourceType = null;

        /**
         * Node Description
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Description = null;

        /**
         * Data source IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatasourceId = null;

        /**
         * Node Configuration Information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<RecordField> || null}
         */
        this.Config = null;

        /**
         * Node Extension Configuration Information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<RecordField> || null}
         */
        this.ExtConfig = null;

        /**
         * Node Schema
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<IntegrationNodeSchema> || null}
         */
        this.Schema = null;

        /**
         * Node Mapping
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {IntegrationNodeMapping || null}
         */
        this.NodeMapping = null;

        /**
         * Belonging User AppId, Display Fields Non-passed
         * @type {string || null}
         */
        this.AppId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Creator UIN, Display Fields Non-passed
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreatorUin = null;

        /**
         * Operator UIN, Display Fields Non-passed
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.OperatorUin = null;

        /**
         * owner uin Display Fields Non-passed
         * @type {string || null}
         */
        this.OwnerUin = null;

        /**
         * Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreateTime = null;

        /**
         * Update timeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.UpdateTime = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Id = 'Id' in params ? params.Id : null;
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.Name = 'Name' in params ? params.Name : null;
        this.NodeType = 'NodeType' in params ? params.NodeType : null;
        this.DataSourceType = 'DataSourceType' in params ? params.DataSourceType : null;
        this.Description = 'Description' in params ? params.Description : null;
        this.DatasourceId = 'DatasourceId' in params ? params.DatasourceId : null;

        if (params.Config) {
            this.Config = new Array();
            for (let z in params.Config) {
                let obj = new RecordField();
                obj.deserialize(params.Config[z]);
                this.Config.push(obj);
            }
        }

        if (params.ExtConfig) {
            this.ExtConfig = new Array();
            for (let z in params.ExtConfig) {
                let obj = new RecordField();
                obj.deserialize(params.ExtConfig[z]);
                this.ExtConfig.push(obj);
            }
        }

        if (params.Schema) {
            this.Schema = new Array();
            for (let z in params.Schema) {
                let obj = new IntegrationNodeSchema();
                obj.deserialize(params.Schema[z]);
                this.Schema.push(obj);
            }
        }

        if (params.NodeMapping) {
            let obj = new IntegrationNodeMapping();
            obj.deserialize(params.NodeMapping)
            this.NodeMapping = obj;
        }
        this.AppId = 'AppId' in params ? params.AppId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.CreatorUin = 'CreatorUin' in params ? params.CreatorUin : null;
        this.OperatorUin = 'OperatorUin' in params ? params.OperatorUin : null;
        this.OwnerUin = 'OwnerUin' in params ? params.OwnerUin : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;
        this.UpdateTime = 'UpdateTime' in params ? params.UpdateTime : null;

    }
}

/**
 * DescribeRuleGroup response structure.
 * @class
 */
class DescribeRuleGroupResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Data quality rule group details
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {RuleGroup || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new RuleGroup();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DeleteDataSources response structure.
 * @class
 */
class DeleteDataSourcesResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Delete successful?
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Batch Operation Task List
 * @class
 */
class DescribeBatchOperateTaskDTO extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Task NameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskName = null;

        /**
         * Workflow Id
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.WorkflowId = null;

        /**
         * Workflow name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.WorkflowName = null;

        /**
         * StatusNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Status = null;

        /**
         * Task IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TaskTypeId = null;

        /**
         * Task TypeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskTypeDesc = null;

        /**
         * Folder name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FolderName = null;

        /**
         * Folder IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FolderId = null;

        /**
         * Owner
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InCharge = null;

        /**
         * Submitted?
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Submit = null;

        /**
         * Engine:
presto\SparkJob\SparkSql
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DataEngine = null;

        /**
         * Update timeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.UpdateTime = null;

        /**
         * Creation time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreateTime = null;

        /**
         * Cycle type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CycleUnit = null;

        /**
         * Scheduling plan
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ScheduleDesc = null;

        /**
         * Data source ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatasourceId = null;

        /**
         * Data source typeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatasourceType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.TaskName = 'TaskName' in params ? params.TaskName : null;
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;
        this.WorkflowName = 'WorkflowName' in params ? params.WorkflowName : null;
        this.Status = 'Status' in params ? params.Status : null;
        this.TaskTypeId = 'TaskTypeId' in params ? params.TaskTypeId : null;
        this.TaskTypeDesc = 'TaskTypeDesc' in params ? params.TaskTypeDesc : null;
        this.FolderName = 'FolderName' in params ? params.FolderName : null;
        this.FolderId = 'FolderId' in params ? params.FolderId : null;
        this.InCharge = 'InCharge' in params ? params.InCharge : null;
        this.Submit = 'Submit' in params ? params.Submit : null;
        this.DataEngine = 'DataEngine' in params ? params.DataEngine : null;
        this.UpdateTime = 'UpdateTime' in params ? params.UpdateTime : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;
        this.CycleUnit = 'CycleUnit' in params ? params.CycleUnit : null;
        this.ScheduleDesc = 'ScheduleDesc' in params ? params.ScheduleDesc : null;
        this.DatasourceId = 'DatasourceId' in params ? params.DatasourceId : null;
        this.DatasourceType = 'DatasourceType' in params ? params.DatasourceType : null;

    }
}

/**
 * DescribeReportTaskList response structure.
 * @class
 */
class DescribeReportTaskListResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task list information.
         * @type {ReportTaskListInfo || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new ReportTaskListInfo();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeOpsMakePlans response structure.
 * @class
 */
class DescribeOpsMakePlansResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Supplemental Plan Pagination Query Results
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {MakePlanOpsDtoCollection || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new MakePlanOpsDtoCollection();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Event Consumption Task Record List
 * @class
 */
class EventCaseConsumeLogOptDtoCollection extends  AbstractModel {
    constructor(){
        super();

        /**
         * Total number of resultsNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * Total Number of Pages
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalPage = null;

        /**
         * Number of Results on Current Page
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.PageCount = null;

        /**
         * Page NumberNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Number of items per pageNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Pagination Data
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<EventCaseConsumeLogOptDto> || null}
         */
        this.Items = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.TotalPage = 'TotalPage' in params ? params.TotalPage : null;
        this.PageCount = 'PageCount' in params ? params.PageCount : null;
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;

        if (params.Items) {
            this.Items = new Array();
            for (let z in params.Items) {
                let obj = new EventCaseConsumeLogOptDto();
                obj.deserialize(params.Items[z]);
                this.Items.push(obj);
            }
        }

    }
}

/**
 * DeleteFile request structure.
 * @class
 */
class DeleteFileRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Resource ID
         * @type {string || null}
         */
        this.ResourceId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.ResourceId = 'ResourceId' in params ? params.ResourceId : null;

    }
}

/**
 * DeleteDataSources request structure.
 * @class
 */
class DeleteDataSourcesRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * ID List
         * @type {Array.<number> || null}
         */
        this.Ids = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Ids = 'Ids' in params ? params.Ids : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * ModifyTaskAlarmRegular request structure.
 * @class
 */
class ModifyTaskAlarmRegularRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Rule ID
         * @type {string || null}
         */
        this.Id = null;

        /**
         * Rule Information
         * @type {TaskAlarmInfo || null}
         */
        this.TaskAlarmInfo = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Id = 'Id' in params ? params.Id : null;

        if (params.TaskAlarmInfo) {
            let obj = new TaskAlarmInfo();
            obj.deserialize(params.TaskAlarmInfo)
            this.TaskAlarmInfo = obj;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * SubmitSqlTask response structure.
 * @class
 */
class SubmitSqlTaskResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task Submission Record
         * @type {AdhocRecord || null}
         */
        this.Record = null;

        /**
         * Subtask Record List
         * @type {Array.<AdhocDetail> || null}
         */
        this.Details = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Record) {
            let obj = new AdhocRecord();
            obj.deserialize(params.Record)
            this.Record = obj;
        }

        if (params.Details) {
            this.Details = new Array();
            for (let z in params.Details) {
                let obj = new AdhocDetail();
                obj.deserialize(params.Details[z]);
                this.Details.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeColumnsMeta request structure.
 * @class
 */
class DescribeColumnsMetaRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Table ID
         * @type {string || null}
         */
        this.TableId = null;

        /**
         * Page Number
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Page Size
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Filter
         * @type {Array.<Filter> || null}
         */
        this.FilterSet = null;

        /**
         * Sort Fields
         * @type {Array.<OrderField> || null}
         */
        this.OrderFieldSet = null;

        /**
         * Whether to Query Partition Field, Default false
         * @type {boolean || null}
         */
        this.IsPartitionQuery = null;

        /**
         * Compliance Group ID
         * @type {number || null}
         */
        this.ComplianceId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TableId = 'TableId' in params ? params.TableId : null;
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;

        if (params.FilterSet) {
            this.FilterSet = new Array();
            for (let z in params.FilterSet) {
                let obj = new Filter();
                obj.deserialize(params.FilterSet[z]);
                this.FilterSet.push(obj);
            }
        }

        if (params.OrderFieldSet) {
            this.OrderFieldSet = new Array();
            for (let z in params.OrderFieldSet) {
                let obj = new OrderField();
                obj.deserialize(params.OrderFieldSet[z]);
                this.OrderFieldSet.push(obj);
            }
        }
        this.IsPartitionQuery = 'IsPartitionQuery' in params ? params.IsPartitionQuery : null;
        this.ComplianceId = 'ComplianceId' in params ? params.ComplianceId : null;

    }
}

/**
 * DescribeOrganizationalFunctions request structure.
 * @class
 */
class DescribeOrganizationalFunctionsRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Scenario Type: Development, In Use
         * @type {string || null}
         */
        this.Type = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Function Name
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Display Name
         * @type {string || null}
         */
        this.DisplayName = null;

        /**
         * Standard Mode Development Environment: DEV
Standard Mode Production Environment: PROD
Simple Mode: ALL

         * @type {string || null}
         */
        this.EnvType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Type = 'Type' in params ? params.Type : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.Name = 'Name' in params ? params.Name : null;
        this.DisplayName = 'DisplayName' in params ? params.DisplayName : null;
        this.EnvType = 'EnvType' in params ? params.EnvType : null;

    }
}

/**
 * DescribeRuleTemplate response structure.
 * @class
 */
class DescribeRuleTemplateResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Template Details
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {RuleTemplate || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new RuleTemplate();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeDependTaskLists request structure.
 * @class
 */
class DescribeDependTaskListsRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID List
         * @type {Array.<string> || null}
         */
        this.TaskIds = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskIds = 'TaskIds' in params ? params.TaskIds : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * Data Source Metadata
 * @class
 */
class DatabaseMeta extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Technology Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.MetastoreType = null;

        /**
         * Data Source Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatasourceName = null;

        /**
         * Data Source IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.DatasourceId = null;

        /**
         * Project English Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectName = null;

        /**
         * Data Source Category: Binding Engine, Binding Database, Available Values: DB, ENGINE
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Category = null;

        /**
         * Data source description informationNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Description = null;

        /**
         * Instance ID of the data source engine, e.g., CDB Instance IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Instance = null;

        /**
         * Data Source Engine Region
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Region = null;

        /**
         * Visibility of the data source, where 1 is visible and 0 is not visible. Default is 1Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Status = null;

        /**
         * Database Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatabaseName = null;

        /**
         * Project Chinese Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectDisplayName = null;

        /**
         * Person in Charge Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.OwnerAccountName = null;

        /**
         * Data Source Display Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DisplayName = null;

        /**
         * Database ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatabaseId = null;

        /**
         * Data Source Type: hive/mysql/hbase, etc.
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Catalog = null;

        /**
         * Storage Size in bytes
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.StorageSize = null;

        /**
         * Formatted Storage Size, with unit, e.g., 12B
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.StorageSizeWithUnit = null;

        /**
         * Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreateTime = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.MetastoreType = 'MetastoreType' in params ? params.MetastoreType : null;
        this.DatasourceName = 'DatasourceName' in params ? params.DatasourceName : null;
        this.DatasourceId = 'DatasourceId' in params ? params.DatasourceId : null;
        this.ProjectName = 'ProjectName' in params ? params.ProjectName : null;
        this.Category = 'Category' in params ? params.Category : null;
        this.Description = 'Description' in params ? params.Description : null;
        this.Instance = 'Instance' in params ? params.Instance : null;
        this.Region = 'Region' in params ? params.Region : null;
        this.Status = 'Status' in params ? params.Status : null;
        this.DatabaseName = 'DatabaseName' in params ? params.DatabaseName : null;
        this.ProjectDisplayName = 'ProjectDisplayName' in params ? params.ProjectDisplayName : null;
        this.OwnerAccountName = 'OwnerAccountName' in params ? params.OwnerAccountName : null;
        this.DisplayName = 'DisplayName' in params ? params.DisplayName : null;
        this.DatabaseId = 'DatabaseId' in params ? params.DatabaseId : null;
        this.Catalog = 'Catalog' in params ? params.Catalog : null;
        this.StorageSize = 'StorageSize' in params ? params.StorageSize : null;
        this.StorageSizeWithUnit = 'StorageSizeWithUnit' in params ? params.StorageSizeWithUnit : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;

    }
}

/**
 * DescribeAllByFolderNew request structure.
 * @class
 */
class DescribeAllByFolderNewRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Folder Attributes
         * @type {FolderOpsDto || null}
         */
        this.Folder = null;

        /**
         * Workflow List
         * @type {Array.<WorkflowCanvasOpsDto> || null}
         */
        this.Workflows = null;

        /**
         * Target File ID
         * @type {string || null}
         */
        this.TargetFolderId = null;

        /**
         * Keyword
         * @type {string || null}
         */
        this.KeyWords = null;

        /**
         * Parent File ID
         * @type {string || null}
         */
        this.ParentsFolderId = null;

        /**
         * Pull Folder List
         * @type {string || null}
         */
        this.IsAddWorkflow = null;

        /**
         * Task Status
         * @type {Array.<string> || null}
         */
        this.TaskStates = null;

        /**
         * Search type
         * @type {string || null}
         */
        this.FindType = null;

        /**
         * Access type
         * @type {string || null}
         */
        this.OptType = null;

        /**
         * Operator Name
         * @type {string || null}
         */
        this.OperatorName = null;

        /**
         * Operator ID
         * @type {string || null}
         */
        this.OperatorId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Project Identifier
         * @type {string || null}
         */
        this.ProjectIdent = null;

        /**
         * Project name
         * @type {string || null}
         */
        this.ProjectName = null;

        /**
         * Index Page Number
         * @type {number || null}
         */
        this.PageIndex = null;

        /**
         * Page size
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Total Data
         * @type {number || null}
         */
        this.Count = null;

        /**
         * Basic Request Information
         * @type {ProjectBaseInfoOpsRequest || null}
         */
        this.RequestBaseInfo = null;

        /**
         * Whether to Calculate Total
         * @type {boolean || null}
         */
        this.IsCount = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Folder) {
            let obj = new FolderOpsDto();
            obj.deserialize(params.Folder)
            this.Folder = obj;
        }

        if (params.Workflows) {
            this.Workflows = new Array();
            for (let z in params.Workflows) {
                let obj = new WorkflowCanvasOpsDto();
                obj.deserialize(params.Workflows[z]);
                this.Workflows.push(obj);
            }
        }
        this.TargetFolderId = 'TargetFolderId' in params ? params.TargetFolderId : null;
        this.KeyWords = 'KeyWords' in params ? params.KeyWords : null;
        this.ParentsFolderId = 'ParentsFolderId' in params ? params.ParentsFolderId : null;
        this.IsAddWorkflow = 'IsAddWorkflow' in params ? params.IsAddWorkflow : null;
        this.TaskStates = 'TaskStates' in params ? params.TaskStates : null;
        this.FindType = 'FindType' in params ? params.FindType : null;
        this.OptType = 'OptType' in params ? params.OptType : null;
        this.OperatorName = 'OperatorName' in params ? params.OperatorName : null;
        this.OperatorId = 'OperatorId' in params ? params.OperatorId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.ProjectIdent = 'ProjectIdent' in params ? params.ProjectIdent : null;
        this.ProjectName = 'ProjectName' in params ? params.ProjectName : null;
        this.PageIndex = 'PageIndex' in params ? params.PageIndex : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;
        this.Count = 'Count' in params ? params.Count : null;

        if (params.RequestBaseInfo) {
            let obj = new ProjectBaseInfoOpsRequest();
            obj.deserialize(params.RequestBaseInfo)
            this.RequestBaseInfo = obj;
        }
        this.IsCount = 'IsCount' in params ? params.IsCount : null;

    }
}

/**
 * DescribeTaskRunHistory response structure.
 * @class
 */
class DescribeTaskRunHistoryResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Paginated Query Task Run History Results
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {InstanceOpsInfoPage || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new InstanceOpsInfoPage();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * BatchStopWorkflowsByIds request structure.
 * @class
 */
class BatchStopWorkflowsByIdsRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Workflow ID List
         * @type {Array.<string> || null}
         */
        this.WorkflowIds = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Whether to terminate the generated instance
         * @type {boolean || null}
         */
        this.KillInstance = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.WorkflowIds = 'WorkflowIds' in params ? params.WorkflowIds : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.KillInstance = 'KillInstance' in params ? params.KillInstance : null;

    }
}

/**
 * DescribeBatchOperateTask response structure.
 * @class
 */
class DescribeBatchOperateTaskResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * NoNote: This field may return null, indicating that no valid value can be obtained.
         * @type {DescribeBatchOperateTaskPage || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new DescribeBatchOperateTaskPage();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * CommitIntegrationTask request structure.
 * @class
 */
class CommitIntegrationTaskRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * 0. Only submit, 1. Start immediately, 2. Stop online jobs, discard job state data, restart, 3. Pause online jobs, keep job state data, continue running, 4. Keep job state data, continue running
         * @type {number || null}
         */
        this.CommitType = null;

        /**
         * Real-time task 201 Offline task 202 Default is real-time task
         * @type {number || null}
         */
        this.TaskType = null;

        /**
         * Additional parameters
         * @type {Array.<RecordField> || null}
         */
        this.ExtConfig = null;

        /**
         * Submit version description
         * @type {string || null}
         */
        this.VersionDesc = null;

        /**
         * Submit version number
         * @type {number || null}
         */
        this.InstanceVersion = null;

        /**
         * Describe the type of front-end operation
         * @type {string || null}
         */
        this.EventDesc = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.CommitType = 'CommitType' in params ? params.CommitType : null;
        this.TaskType = 'TaskType' in params ? params.TaskType : null;

        if (params.ExtConfig) {
            this.ExtConfig = new Array();
            for (let z in params.ExtConfig) {
                let obj = new RecordField();
                obj.deserialize(params.ExtConfig[z]);
                this.ExtConfig.push(obj);
            }
        }
        this.VersionDesc = 'VersionDesc' in params ? params.VersionDesc : null;
        this.InstanceVersion = 'InstanceVersion' in params ? params.InstanceVersion : null;
        this.EventDesc = 'EventDesc' in params ? params.EventDesc : null;

    }
}

/**
 * DescribeTableInfoList request structure.
 * @class
 */
class DescribeTableInfoListRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Table name
         * @type {Array.<Filter> || null}
         */
        this.Filters = null;

        /**
         * If it is hive write rpc, if it is other types do not transmit
         * @type {string || null}
         */
        this.ConnectionType = null;

        /**
         * Database source type
         * @type {string || null}
         */
        this.Catalog = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Filters) {
            this.Filters = new Array();
            for (let z in params.Filters) {
                let obj = new Filter();
                obj.deserialize(params.Filters[z]);
                this.Filters.push(obj);
            }
        }
        this.ConnectionType = 'ConnectionType' in params ? params.ConnectionType : null;
        this.Catalog = 'Catalog' in params ? params.Catalog : null;

    }
}

/**
 * DescribeQualityScore request structure.
 * @class
 */
class DescribeQualityScoreRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Statistics Date
         * @type {number || null}
         */
        this.StatisticsDate = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Data source ID
         * @type {string || null}
         */
        this.DatasourceId = null;

        /**
         * 1: Calculate by full dimension weight, 2: Calculate by configured dimension weight, 3: Do not calculate by dimension weight, default is 1
         * @type {string || null}
         */
        this.ScoreType = null;

        /**
         * Ignore Query String
         * @type {Array.<Filter> || null}
         */
        this.Filters = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.StatisticsDate = 'StatisticsDate' in params ? params.StatisticsDate : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.DatasourceId = 'DatasourceId' in params ? params.DatasourceId : null;
        this.ScoreType = 'ScoreType' in params ? params.ScoreType : null;

        if (params.Filters) {
            this.Filters = new Array();
            for (let z in params.Filters) {
                let obj = new Filter();
                obj.deserialize(params.Filters[z]);
                this.Filters.push(obj);
            }
        }

    }
}

/**
 * RunForceSucScheduleInstances response structure.
 * @class
 */
class RunForceSucScheduleInstancesResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Result
         * @type {BatchOperateResultOpsDto || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new BatchOperateResultOpsDto();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * CommitIntegrationTask response structure.
 * @class
 */
class CommitIntegrationTaskResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Operation Success or Failure Indicator
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Approval List Information
 * @class
 */
class Apply extends  AbstractModel {
    constructor(){
        super();

        /**
         * Applicant ID
         * @type {string || null}
         */
        this.ApplicantId = null;

        /**
         * Applicant Name
         * @type {string || null}
         */
        this.ApplicantName = null;

        /**
         * Approval Remarks
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Remark = null;

        /**
         * Approval Category Key
         * @type {string || null}
         */
        this.ApproveClassification = null;

        /**
         * Approval Form ID
         * @type {string || null}
         */
        this.ApproveId = null;

        /**
         * Approval Type Key
         * @type {string || null}
         */
        this.ApproveType = null;

        /**
         * Application Reason
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Reason = null;

        /**
         * Creation Time
         * @type {string || null}
         */
        this.CreateTime = null;

        /**
         * Approval Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ApproveTime = null;

        /**
         * Approval Category Name
         * @type {string || null}
         */
        this.ApproveClassificationName = null;

        /**
         * Status
         * @type {string || null}
         */
        this.Status = null;

        /**
         * Approval Type Name
         * @type {string || null}
         */
        this.ApproveTypeName = null;

        /**
         * Approval Exception or Failure Information
         * @type {string || null}
         */
        this.ErrorMessage = null;

        /**
         * Apply for Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ApplyName = null;

        /**
         * Approver ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ApproverId = null;

        /**
         * Approver Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ApproverName = null;

        /**
         * Project for Approval
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ApproveProjectName = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ApplicantId = 'ApplicantId' in params ? params.ApplicantId : null;
        this.ApplicantName = 'ApplicantName' in params ? params.ApplicantName : null;
        this.Remark = 'Remark' in params ? params.Remark : null;
        this.ApproveClassification = 'ApproveClassification' in params ? params.ApproveClassification : null;
        this.ApproveId = 'ApproveId' in params ? params.ApproveId : null;
        this.ApproveType = 'ApproveType' in params ? params.ApproveType : null;
        this.Reason = 'Reason' in params ? params.Reason : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;
        this.ApproveTime = 'ApproveTime' in params ? params.ApproveTime : null;
        this.ApproveClassificationName = 'ApproveClassificationName' in params ? params.ApproveClassificationName : null;
        this.Status = 'Status' in params ? params.Status : null;
        this.ApproveTypeName = 'ApproveTypeName' in params ? params.ApproveTypeName : null;
        this.ErrorMessage = 'ErrorMessage' in params ? params.ErrorMessage : null;
        this.ApplyName = 'ApplyName' in params ? params.ApplyName : null;
        this.ApproverId = 'ApproverId' in params ? params.ApproverId : null;
        this.ApproverName = 'ApproverName' in params ? params.ApproverName : null;
        this.ApproveProjectName = 'ApproveProjectName' in params ? params.ApproveProjectName : null;

    }
}

/**
 * Integration Tasks
 * @class
 */
class IntegrationTaskInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task Name
         * @type {string || null}
         */
        this.TaskName = null;

        /**
         * Task Description
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Description = null;

        /**
         * Synchronization Type 1. Solution (Whole Database Migration), 2. Single Table Synchronization
         * @type {number || null}
         */
        this.SyncType = null;

        /**
         * 201. Real-time, 202. Offline
         * @type {number || null}
         */
        this.TaskType = null;

        /**
         * Workflow ID of Task
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.WorkflowId = null;

        /**
         * Task IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Task Scheduling ID (oceanus or us etc. Job ID), not a mandatory field
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ScheduleTaskId = null;

        /**
         * InLong Task ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskGroupId = null;

        /**
         * Project IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Creator UIN
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreatorUin = null;

        /**
         * Operator UIN
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.OperatorUin = null;

        /**
         * owner uin
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.OwnerUin = null;

        /**
         * Application ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.AppId = null;

        /**
         * 1: not started | 2: In operation | 3: Running | 4: Suspension | 5: Task Stopping | 6: Stop | 7: Execution Failure | 20: Abnormal | 21: Unknown |
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Status = null;

        /**
         * Node list
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<IntegrationNodeInfo> || null}
         */
        this.Nodes = null;

        /**
         * Execution Resource ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ExecutorId = null;

        /**
         * Task configuration information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<RecordField> || null}
         */
        this.Config = null;

        /**
         * Task extension configuration information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<RecordField> || null}
         */
        this.ExtConfig = null;

        /**
         * Task execution context information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<RecordField> || null}
         */
        this.ExecuteContext = null;

        /**
         * Node Mapping
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<IntegrationNodeMapping> || null}
         */
        this.Mappings = null;

        /**
         * Task configuration mode, 0: Canvas 1: Form 3: Script
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskMode = null;

        /**
         * Person in ChargeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Incharge = null;

        /**
         * Offline new parameters
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {OfflineTaskAddParam || null}
         */
        this.OfflineTaskAddEntity = null;

        /**
         * group name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ExecutorGroupName = null;

        /**
         * inlong manager url
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InLongManagerUrl = null;

        /**
         * stream id
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InLongStreamId = null;

        /**
         * version
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InLongManagerVersion = null;

        /**
         * inlong dataproxy url
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<string> || null}
         */
        this.DataProxyUrl = null;

        /**
         * Whether the task version has been submitted for operation and maintenance
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.Submit = null;

        /**
         * Data Source Type: MYSQL|POSTGRE|ORACLE|SQLSERVER|FTP|HIVE|HDFS|ICEBERG|KAFKA|HBASE|SPARK|VIRTUAL|TBASE|DB2|DM|GAUSSDB|GBASE|IMPALA|ES|S3_DATAINSIGHT|GREENPLUM|PHOENIX|SAP_HANA|SFTP|OCEANBASE|CLICKHOUSE|KUDU|VERTICA|REDIS|COS|DLC|DLCV1|DORIS|CKAFKA|DTS_KAFKA|S3|CDW|LOCAL|TDSQLC|TDSQL|TDSQL_MYSQL|MONGODB|INFORMIX|SYBASE|REST_API|SuperSQL|PRESTO|DR_SUM|TiDB|StarRocks|Trino|Kyuubi|GDB|TCHOUSE_X|TCHOUSE_P|TDSQL_POSTGRE
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InputDatasourceType = null;

        /**
         * Data Source Type: MYSQL|POSTGRE|ORACLE|SQLSERVER|FTP|HIVE|HDFS|ICEBERG|KAFKA|HBASE|SPARK|VIRTUAL|TBASE|DB2|DM|GAUSSDB|GBASE|IMPALA|ES|S3_DATAINSIGHT|GREENPLUM|PHOENIX|SAP_HANA|SFTP|OCEANBASE|CLICKHOUSE|KUDU|VERTICA|REDIS|COS|DLC|DLCV1|DORIS|CKAFKA|DTS_KAFKA|S3|CDW|LOCAL|TDSQLC|TDSQL|TDSQL_MYSQL|MONGODB|INFORMIX|SYBASE|REST_API|SuperSQL|PRESTO|DR_SUM|TiDB|StarRocks|Trino|Kyuubi|GDB|TCHOUSE_X|TCHOUSE_P|TDSQL_POSTGRE
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.OutputDatasourceType = null;

        /**
         * Number of reads
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.NumRecordsIn = null;

        /**
         * Number of writes
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.NumRecordsOut = null;

        /**
         * Read latency
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.ReaderDelay = null;

        /**
         * Restart Times
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.NumRestarts = null;

        /**
         * Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreateTime = null;

        /**
         * Task Update Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.UpdateTime = null;

        /**
         * Last task run time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.LastRunTime = null;

        /**
         * Task stop time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.StopTime = null;

        /**
         * Job Submitted?
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.HasVersion = null;

        /**
         * Is the task locked?
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.Locked = null;

        /**
         * Task Locked By
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Locker = null;

        /**
         * Resource Consumption
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.RunningCu = null;

        /**
         * Associated Alert Rules for the Task
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<string> || null}
         */
        this.TaskAlarmRegularList = null;

        /**
         * Real-time task resource layering status: 0:Ongoing,1:Success,2:Failed
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.SwitchResource = null;

        /**
         * Real-time task reading phase: 0:Full Full,1:Partial Full,2:Full Incremental
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.ReadPhase = null;

        /**
         * Real-time Task Version Number
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.InstanceVersion = null;

        /**
         * Offline task imported into orchestration space Task ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ArrangeSpaceTaskId = null;

        /**
         * Offline Task Status Differentiation 1.Not Submitted 2.Submitted 3.Exported
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.OfflineTaskStatus = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskName = 'TaskName' in params ? params.TaskName : null;
        this.Description = 'Description' in params ? params.Description : null;
        this.SyncType = 'SyncType' in params ? params.SyncType : null;
        this.TaskType = 'TaskType' in params ? params.TaskType : null;
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.ScheduleTaskId = 'ScheduleTaskId' in params ? params.ScheduleTaskId : null;
        this.TaskGroupId = 'TaskGroupId' in params ? params.TaskGroupId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.CreatorUin = 'CreatorUin' in params ? params.CreatorUin : null;
        this.OperatorUin = 'OperatorUin' in params ? params.OperatorUin : null;
        this.OwnerUin = 'OwnerUin' in params ? params.OwnerUin : null;
        this.AppId = 'AppId' in params ? params.AppId : null;
        this.Status = 'Status' in params ? params.Status : null;

        if (params.Nodes) {
            this.Nodes = new Array();
            for (let z in params.Nodes) {
                let obj = new IntegrationNodeInfo();
                obj.deserialize(params.Nodes[z]);
                this.Nodes.push(obj);
            }
        }
        this.ExecutorId = 'ExecutorId' in params ? params.ExecutorId : null;

        if (params.Config) {
            this.Config = new Array();
            for (let z in params.Config) {
                let obj = new RecordField();
                obj.deserialize(params.Config[z]);
                this.Config.push(obj);
            }
        }

        if (params.ExtConfig) {
            this.ExtConfig = new Array();
            for (let z in params.ExtConfig) {
                let obj = new RecordField();
                obj.deserialize(params.ExtConfig[z]);
                this.ExtConfig.push(obj);
            }
        }

        if (params.ExecuteContext) {
            this.ExecuteContext = new Array();
            for (let z in params.ExecuteContext) {
                let obj = new RecordField();
                obj.deserialize(params.ExecuteContext[z]);
                this.ExecuteContext.push(obj);
            }
        }

        if (params.Mappings) {
            this.Mappings = new Array();
            for (let z in params.Mappings) {
                let obj = new IntegrationNodeMapping();
                obj.deserialize(params.Mappings[z]);
                this.Mappings.push(obj);
            }
        }
        this.TaskMode = 'TaskMode' in params ? params.TaskMode : null;
        this.Incharge = 'Incharge' in params ? params.Incharge : null;

        if (params.OfflineTaskAddEntity) {
            let obj = new OfflineTaskAddParam();
            obj.deserialize(params.OfflineTaskAddEntity)
            this.OfflineTaskAddEntity = obj;
        }
        this.ExecutorGroupName = 'ExecutorGroupName' in params ? params.ExecutorGroupName : null;
        this.InLongManagerUrl = 'InLongManagerUrl' in params ? params.InLongManagerUrl : null;
        this.InLongStreamId = 'InLongStreamId' in params ? params.InLongStreamId : null;
        this.InLongManagerVersion = 'InLongManagerVersion' in params ? params.InLongManagerVersion : null;
        this.DataProxyUrl = 'DataProxyUrl' in params ? params.DataProxyUrl : null;
        this.Submit = 'Submit' in params ? params.Submit : null;
        this.InputDatasourceType = 'InputDatasourceType' in params ? params.InputDatasourceType : null;
        this.OutputDatasourceType = 'OutputDatasourceType' in params ? params.OutputDatasourceType : null;
        this.NumRecordsIn = 'NumRecordsIn' in params ? params.NumRecordsIn : null;
        this.NumRecordsOut = 'NumRecordsOut' in params ? params.NumRecordsOut : null;
        this.ReaderDelay = 'ReaderDelay' in params ? params.ReaderDelay : null;
        this.NumRestarts = 'NumRestarts' in params ? params.NumRestarts : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;
        this.UpdateTime = 'UpdateTime' in params ? params.UpdateTime : null;
        this.LastRunTime = 'LastRunTime' in params ? params.LastRunTime : null;
        this.StopTime = 'StopTime' in params ? params.StopTime : null;
        this.HasVersion = 'HasVersion' in params ? params.HasVersion : null;
        this.Locked = 'Locked' in params ? params.Locked : null;
        this.Locker = 'Locker' in params ? params.Locker : null;
        this.RunningCu = 'RunningCu' in params ? params.RunningCu : null;
        this.TaskAlarmRegularList = 'TaskAlarmRegularList' in params ? params.TaskAlarmRegularList : null;
        this.SwitchResource = 'SwitchResource' in params ? params.SwitchResource : null;
        this.ReadPhase = 'ReadPhase' in params ? params.ReadPhase : null;
        this.InstanceVersion = 'InstanceVersion' in params ? params.InstanceVersion : null;
        this.ArrangeSpaceTaskId = 'ArrangeSpaceTaskId' in params ? params.ArrangeSpaceTaskId : null;
        this.OfflineTaskStatus = 'OfflineTaskStatus' in params ? params.OfflineTaskStatus : null;

    }
}

/**
 * DeleteResourceFiles request structure.
 * @class
 */
class DeleteResourceFilesRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Usage Status
         * @type {boolean || null}
         */
        this.UseStatus = null;

        /**
         * Resource ID List
         * @type {Array.<string> || null}
         */
        this.ResourceIds = null;

        /**
         * Resource Path List
         * @type {Array.<string> || null}
         */
        this.FilePaths = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.UseStatus = 'UseStatus' in params ? params.UseStatus : null;
        this.ResourceIds = 'ResourceIds' in params ? params.ResourceIds : null;
        this.FilePaths = 'FilePaths' in params ? params.FilePaths : null;

    }
}

/**
 * DeleteResourceFile response structure.
 * @class
 */
class DeleteResourceFileResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Resource Deletion Result
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * SubmitTask response structure.
 * @class
 */
class SubmitTaskResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Success or Failure
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * ModifyApproveStatus response structure.
 * @class
 */
class ModifyApproveStatusResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Modify Approval Form Status
         * @type {Array.<ApproveModify> || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            this.Data = new Array();
            for (let z in params.Data) {
                let obj = new ApproveModify();
                obj.deserialize(params.Data[z]);
                this.Data.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeAlarmEvents response structure.
 * @class
 */
class DescribeAlarmEventsResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Alert event listNote: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<AlarmEventInfo> || null}
         */
        this.AlarmEventInfoList = null;

        /**
         * Number of records
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.AlarmEventInfoList) {
            this.AlarmEventInfoList = new Array();
            for (let z in params.AlarmEventInfoList) {
                let obj = new AlarmEventInfo();
                obj.deserialize(params.AlarmEventInfoList[z]);
                this.AlarmEventInfoList.push(obj);
            }
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeInstanceLogList response structure.
 * @class
 */
class DescribeInstanceLogListResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Log list
         * @type {string || null}
         */
        this.Data = null;

        /**
         * Log listNote: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<InstanceLogList> || null}
         */
        this.InstanceLogList = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;

        if (params.InstanceLogList) {
            this.InstanceLogList = new Array();
            for (let z in params.InstanceLogList) {
                let obj = new InstanceLogList();
                obj.deserialize(params.InstanceLogList[z]);
                this.InstanceLogList.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Data Quality Rule Group
 * @class
 */
class RuleGroup extends  AbstractModel {
    constructor(){
        super();

        /**
         * Rule Group ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.RuleGroupId = null;

        /**
         * Data Source IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatasourceId = null;

        /**
         * Data Source Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatasourceName = null;

        /**
         * Data source typeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.DatasourceType = null;

        /**
         * Monitoring Type: 1. Not Configured, 2. Associate Production Scheduling, 3. Offline Period Detection
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.MonitorType = null;

        /**
         * Update timeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.UpdateTime = null;

        /**
         * Associated Data Table Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableName = null;

        /**
         * Associated Data Table Id
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableId = null;

        /**
         * Associated Data Table Owner
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableOwnerName = null;

        /**
         * Execution policyNote: This field may return null, indicating that no valid value can be obtained.
         * @type {RuleGroupExecStrategy || null}
         */
        this.ExecStrategy = null;

        /**
         * Execution policyNote: This field may return null, indicating that no valid value can be obtained.
         * @type {RuleGroupSubscribe || null}
         */
        this.Subscription = null;

        /**
         * Database ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatabaseId = null;

        /**
         * Database nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatabaseName = null;

        /**
         * Permission Granted
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.Permission = null;

        /**
         * Number of Rules Configured
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.RuleCount = null;

        /**
         * Monitoring Status
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.MonitorStatus = null;

        /**
         * Table Leader UserId
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TableOwnerUserId = null;

        /**
         * Instance IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InstanceId = null;

        /**
         * Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreateTime = null;

        /**
         * Execution Strategy Configured?
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.StrategyConfig = null;

        /**
         * Execution Strategy Configured?
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.SubscribeConfig = null;

        /**
         * Data Source Environment: 0 or not returned. Undefined, 1. Production, 2. Development
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.DsEnvType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.RuleGroupId = 'RuleGroupId' in params ? params.RuleGroupId : null;
        this.DatasourceId = 'DatasourceId' in params ? params.DatasourceId : null;
        this.DatasourceName = 'DatasourceName' in params ? params.DatasourceName : null;
        this.DatasourceType = 'DatasourceType' in params ? params.DatasourceType : null;
        this.MonitorType = 'MonitorType' in params ? params.MonitorType : null;
        this.UpdateTime = 'UpdateTime' in params ? params.UpdateTime : null;
        this.TableName = 'TableName' in params ? params.TableName : null;
        this.TableId = 'TableId' in params ? params.TableId : null;
        this.TableOwnerName = 'TableOwnerName' in params ? params.TableOwnerName : null;

        if (params.ExecStrategy) {
            let obj = new RuleGroupExecStrategy();
            obj.deserialize(params.ExecStrategy)
            this.ExecStrategy = obj;
        }

        if (params.Subscription) {
            let obj = new RuleGroupSubscribe();
            obj.deserialize(params.Subscription)
            this.Subscription = obj;
        }
        this.DatabaseId = 'DatabaseId' in params ? params.DatabaseId : null;
        this.DatabaseName = 'DatabaseName' in params ? params.DatabaseName : null;
        this.Permission = 'Permission' in params ? params.Permission : null;
        this.RuleCount = 'RuleCount' in params ? params.RuleCount : null;
        this.MonitorStatus = 'MonitorStatus' in params ? params.MonitorStatus : null;
        this.TableOwnerUserId = 'TableOwnerUserId' in params ? params.TableOwnerUserId : null;
        this.InstanceId = 'InstanceId' in params ? params.InstanceId : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;
        this.StrategyConfig = 'StrategyConfig' in params ? params.StrategyConfig : null;
        this.SubscribeConfig = 'SubscribeConfig' in params ? params.SubscribeConfig : null;
        this.DsEnvType = 'DsEnvType' in params ? params.DsEnvType : null;

    }
}

/**
 * DescribeTableQualityDetails request structure.
 * @class
 */
class DescribeTableQualityDetailsRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Statistics Date
         * @type {number || null}
         */
        this.StatisticsDate = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Pagination Index
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Page size
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Filter Parameters TableName, DatabaseId, DatabaseName, OwnerUserName
         * @type {Array.<Filter> || null}
         */
        this.Filters = null;

        /**
         * Sorting Parameters Sort order DESC or ASC, Table score sorting TableScore
         * @type {Array.<OrderField> || null}
         */
        this.OrderFields = null;

        /**
         * Data source ID
         * @type {string || null}
         */
        this.DatasourceId = null;

        /**
         * 1: Calculate by full dimension weight, 2: Calculate by configured dimension weight, 3: Do not calculate by dimension weight, default is 1
         * @type {string || null}
         */
        this.ScoreType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.StatisticsDate = 'StatisticsDate' in params ? params.StatisticsDate : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;

        if (params.Filters) {
            this.Filters = new Array();
            for (let z in params.Filters) {
                let obj = new Filter();
                obj.deserialize(params.Filters[z]);
                this.Filters.push(obj);
            }
        }

        if (params.OrderFields) {
            this.OrderFields = new Array();
            for (let z in params.OrderFields) {
                let obj = new OrderField();
                obj.deserialize(params.OrderFields[z]);
                this.OrderFields.push(obj);
            }
        }
        this.DatasourceId = 'DatasourceId' in params ? params.DatasourceId : null;
        this.ScoreType = 'ScoreType' in params ? params.ScoreType : null;

    }
}

/**
 * DescribeScheduleInstances response structure.
 * @class
 */
class DescribeScheduleInstancesResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Instance Result Set
         * @type {CollectionInstanceOpsDto || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new CollectionInstanceOpsDto();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DeleteProjectParamDs response structure.
 * @class
 */
class DeleteProjectParamDsResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Result true Deleted Successfully
false Deletion Failed
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeOpsWorkflows request structure.
 * @class
 */
class DescribeOpsWorkflowsRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Task Product Type Name List, separated by ','
         * @type {string || null}
         */
        this.ProductNameList = null;

        /**
         * File ID list, separated by ','
         * @type {string || null}
         */
        this.FolderIdList = null;

        /**
         * Workflow ID, separated by ','
         * @type {string || null}
         */
        this.WorkFlowIdList = null;

        /**
         * Workflow Name List, separated by ','
         * @type {string || null}
         */
        this.WorkFlowNameList = null;

        /**
         * Task Name List, separated by ','
         * @type {string || null}
         */
        this.TaskNameList = null;

        /**
         * Task ID list, separated by ','
         * @type {string || null}
         */
        this.TaskIdList = null;

        /**
         * Status List, separated by ','
         * @type {string || null}
         */
        this.StatusList = null;

        /**
         * Person in Charge List, separated by ','
         * @type {string || null}
         */
        this.InChargeList = null;

        /**
         * Page number
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Page size
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Sorting Item
         * @type {string || null}
         */
        this.SortItem = null;

        /**
         * Sort Method, DESC or ASC
         * @type {string || null}
         */
        this.SortType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.ProductNameList = 'ProductNameList' in params ? params.ProductNameList : null;
        this.FolderIdList = 'FolderIdList' in params ? params.FolderIdList : null;
        this.WorkFlowIdList = 'WorkFlowIdList' in params ? params.WorkFlowIdList : null;
        this.WorkFlowNameList = 'WorkFlowNameList' in params ? params.WorkFlowNameList : null;
        this.TaskNameList = 'TaskNameList' in params ? params.TaskNameList : null;
        this.TaskIdList = 'TaskIdList' in params ? params.TaskIdList : null;
        this.StatusList = 'StatusList' in params ? params.StatusList : null;
        this.InChargeList = 'InChargeList' in params ? params.InChargeList : null;
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;
        this.SortItem = 'SortItem' in params ? params.SortItem : null;
        this.SortType = 'SortType' in params ? params.SortType : null;

    }
}

/**
 * CreateOfflineTask response structure.
 * @class
 */
class CreateOfflineTaskResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Result
         * @type {string || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeColumnLineage request structure.
 * @class
 */
class DescribeColumnLineageRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Enumeration value of query direction.

- INPUT
- OUTPUT
- BOTH
         * @type {string || null}
         */
        this.Direction = null;

        /**
         * Field Information
         * @type {ColumnLineageInfo || null}
         */
        this.Data = null;

        /**
         * Single Query Indegree
         * @type {number || null}
         */
        this.InputDepth = null;

        /**
         * Single Query Outdegree
         * @type {number || null}
         */
        this.OutputDepth = null;

        /**
         * Additional Parameters (Pass Caller Information)
         * @type {Array.<RecordField> || null}
         */
        this.ExtParams = null;

        /**
         * Filter Temporary Tables with the default value true
         * @type {boolean || null}
         */
        this.IgnoreTemp = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Direction = 'Direction' in params ? params.Direction : null;

        if (params.Data) {
            let obj = new ColumnLineageInfo();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.InputDepth = 'InputDepth' in params ? params.InputDepth : null;
        this.OutputDepth = 'OutputDepth' in params ? params.OutputDepth : null;

        if (params.ExtParams) {
            this.ExtParams = new Array();
            for (let z in params.ExtParams) {
                let obj = new RecordField();
                obj.deserialize(params.ExtParams[z]);
                this.ExtParams.push(obj);
            }
        }
        this.IgnoreTemp = 'IgnoreTemp' in params ? params.IgnoreTemp : null;

    }
}

/**
 * CreateTaskAlarmRegular request structure.
 * @class
 */
class CreateTaskAlarmRegularRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Alert Configuration Information
         * @type {TaskAlarmInfo || null}
         */
        this.TaskAlarmInfo = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.TaskAlarmInfo) {
            let obj = new TaskAlarmInfo();
            obj.deserialize(params.TaskAlarmInfo)
            this.TaskAlarmInfo = obj;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * ModifyRule request structure.
 * @class
 */
class ModifyRuleRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Rule ID
         * @type {number || null}
         */
        this.RuleId = null;

        /**
         * Rule Group ID
         * @type {number || null}
         */
        this.RuleGroupId = null;

        /**
         * Rule name
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Data Table ID
         * @type {string || null}
         */
        this.TableId = null;

        /**
         * Rule Template ID
         * @type {number || null}
         */
        this.RuleTemplateId = null;

        /**
         * Rule type 1.System Template, 2.Custom Definition Template, 3.Custom Definition SQL
         * @type {number || null}
         */
        this.Type = null;

        /**
         * Quality Dimension of Rule (1: Accuracy, 2: Uniqueness, 3: Integrity, 4: Consistency, 5: Timeliness, 6: Validity)
         * @type {number || null}
         */
        this.QualityDim = null;

        /**
         * Source Field Detailed Type, int, string
         * @type {string || null}
         */
        this.SourceObjectDataTypeName = null;

        /**
         * Source Field Name
         * @type {string || null}
         */
        this.SourceObjectValue = null;

        /**
         * Detection Range 1.Whole Table 2.Conditional Scan
         * @type {number || null}
         */
        this.ConditionType = null;

        /**
         * Conditional Scan WHERE Condition Expression
         * @type {string || null}
         */
        this.ConditionExpression = null;

        /**
         * Custom Definition SQL
         * @type {string || null}
         */
        this.CustomSql = null;

        /**
         * Alert Trigger Condition
         * @type {CompareRule || null}
         */
        this.CompareRule = null;

        /**
         * Alert Trigger Level 1.Low, 2.Medium, 3.High
         * @type {number || null}
         */
        this.AlarmLevel = null;

        /**
         * Rule Description
         * @type {string || null}
         */
        this.Description = null;

        /**
         * Target Database Id
         * @type {string || null}
         */
        this.TargetDatabaseId = null;

        /**
         * Target Table Id
         * @type {string || null}
         */
        this.TargetTableId = null;

        /**
         * Target Filter Condition Expression
         * @type {string || null}
         */
        this.TargetConditionExpr = null;

        /**
         * Source Field and Target Field Association Condition ON Expression
         * @type {string || null}
         */
        this.RelConditionExpr = null;

        /**
         * Custom Definition Template SQL Expression Field Replacement Parameter
         * @type {RuleFieldConfig || null}
         */
        this.FieldConfig = null;

        /**
         * Target Field Name CITY
         * @type {string || null}
         */
        this.TargetObjectValue = null;

        /**
         * Execution engine adapted to the rule
         * @type {Array.<number> || null}
         */
        this.SourceEngineTypes = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.RuleId = 'RuleId' in params ? params.RuleId : null;
        this.RuleGroupId = 'RuleGroupId' in params ? params.RuleGroupId : null;
        this.Name = 'Name' in params ? params.Name : null;
        this.TableId = 'TableId' in params ? params.TableId : null;
        this.RuleTemplateId = 'RuleTemplateId' in params ? params.RuleTemplateId : null;
        this.Type = 'Type' in params ? params.Type : null;
        this.QualityDim = 'QualityDim' in params ? params.QualityDim : null;
        this.SourceObjectDataTypeName = 'SourceObjectDataTypeName' in params ? params.SourceObjectDataTypeName : null;
        this.SourceObjectValue = 'SourceObjectValue' in params ? params.SourceObjectValue : null;
        this.ConditionType = 'ConditionType' in params ? params.ConditionType : null;
        this.ConditionExpression = 'ConditionExpression' in params ? params.ConditionExpression : null;
        this.CustomSql = 'CustomSql' in params ? params.CustomSql : null;

        if (params.CompareRule) {
            let obj = new CompareRule();
            obj.deserialize(params.CompareRule)
            this.CompareRule = obj;
        }
        this.AlarmLevel = 'AlarmLevel' in params ? params.AlarmLevel : null;
        this.Description = 'Description' in params ? params.Description : null;
        this.TargetDatabaseId = 'TargetDatabaseId' in params ? params.TargetDatabaseId : null;
        this.TargetTableId = 'TargetTableId' in params ? params.TargetTableId : null;
        this.TargetConditionExpr = 'TargetConditionExpr' in params ? params.TargetConditionExpr : null;
        this.RelConditionExpr = 'RelConditionExpr' in params ? params.RelConditionExpr : null;

        if (params.FieldConfig) {
            let obj = new RuleFieldConfig();
            obj.deserialize(params.FieldConfig)
            this.FieldConfig = obj;
        }
        this.TargetObjectValue = 'TargetObjectValue' in params ? params.TargetObjectValue : null;
        this.SourceEngineTypes = 'SourceEngineTypes' in params ? params.SourceEngineTypes : null;

    }
}

/**
 * Operation result
 * @class
 */
class BatchReturn extends  AbstractModel {
    constructor(){
        super();

        /**
         * Execution Result
         * @type {boolean || null}
         */
        this.Result = null;

        /**
         * Execution remarks
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ErrorDesc = null;

        /**
         * Execution ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ErrorId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Result = 'Result' in params ? params.Result : null;
        this.ErrorDesc = 'ErrorDesc' in params ? params.ErrorDesc : null;
        this.ErrorId = 'ErrorId' in params ? params.ErrorId : null;

    }
}

/**
 * FindAllFolder response structure.
 * @class
 */
class FindAllFolderResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Folder ListNote: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<FolderDsDto> || null}
         */
        this.FolderList = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.FolderList) {
            this.FolderList = new Array();
            for (let z in params.FolderList) {
                let obj = new FolderDsDto();
                obj.deserialize(params.FolderList[z]);
                this.FolderList.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Resource Management Directory Tree Node
 * @class
 */
class ResourcePathTree extends  AbstractModel {
    constructor(){
        super();

        /**
         * Resource name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Is leaf node
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.IsLeaf = null;

        /**
         * Resource ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ResourceId = null;

        /**
         * Local path
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.LocalPath = null;

        /**
         * Remote path
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.RemotePath = null;

        /**
         * File TypeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FileExtensionType = null;

        /**
         * File sizeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Size = null;

        /**
         * File MD5 value
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Md5Value = null;

        /**
         * File Owner's Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.OwnerName = null;

        /**
         * Updater
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.UpdateUser = null;

        /**
         * File Updater UIN
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.UpdateUserId = null;

        /**
         * Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.CreateTime = null;

        /**
         * Update timeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.UpdateTime = null;

        /**
         * COS Bucket Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CosBucket = null;

        /**
         * COS Region
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CosRegion = null;

        /**
         * Additional InformationNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ExtraInfo = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Name = 'Name' in params ? params.Name : null;
        this.IsLeaf = 'IsLeaf' in params ? params.IsLeaf : null;
        this.ResourceId = 'ResourceId' in params ? params.ResourceId : null;
        this.LocalPath = 'LocalPath' in params ? params.LocalPath : null;
        this.RemotePath = 'RemotePath' in params ? params.RemotePath : null;
        this.FileExtensionType = 'FileExtensionType' in params ? params.FileExtensionType : null;
        this.Size = 'Size' in params ? params.Size : null;
        this.Md5Value = 'Md5Value' in params ? params.Md5Value : null;
        this.OwnerName = 'OwnerName' in params ? params.OwnerName : null;
        this.UpdateUser = 'UpdateUser' in params ? params.UpdateUser : null;
        this.UpdateUserId = 'UpdateUserId' in params ? params.UpdateUserId : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;
        this.UpdateTime = 'UpdateTime' in params ? params.UpdateTime : null;
        this.CosBucket = 'CosBucket' in params ? params.CosBucket : null;
        this.CosRegion = 'CosRegion' in params ? params.CosRegion : null;
        this.ExtraInfo = 'ExtraInfo' in params ? params.ExtraInfo : null;

    }
}

/**
 * DescribeRuleExecLog response structure.
 * @class
 */
class DescribeRuleExecLogResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Rule Execution LogNote: This field may return null, indicating that no valid value can be obtained.
         * @type {RuleExecLog || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new RuleExecLog();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Parameters
 * @class
 */
class ParamInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Parameter Name
         * @type {string || null}
         */
        this.ParamKey = null;

        /**
         * Parameter Value
         * @type {string || null}
         */
        this.ParamValue = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ParamKey = 'ParamKey' in params ? params.ParamKey : null;
        this.ParamValue = 'ParamValue' in params ? params.ParamValue : null;

    }
}

/**
 * DescribeDsFolderTree request structure.
 * @class
 */
class DescribeDsFolderTreeRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Whether to Pull at First Level true Yes 
false No
         * @type {boolean || null}
         */
        this.FirstLevelPull = null;

        /**
         * Folder ID
         * @type {string || null}
         */
        this.FolderId = null;

        /**
         * Workflow ID
         * @type {string || null}
         */
        this.WorkflowId = null;

        /**
         * Keyword Search
         * @type {string || null}
         */
        this.Keyword = null;

        /**
         * Whether to Include Workflow true Yes 
false No
         * @type {boolean || null}
         */
        this.IncludeWorkflow = null;

        /**
         * Whether to Include Tasks true Yes 
false No
         * @type {boolean || null}
         */
        this.IncludeTask = null;

        /**
         * Does it include virtual tasks? This parameter is effective only when IncludeTask is true, default is true
         * @type {boolean || null}
         */
        this.IncludeVirtualTask = null;

        /**
         * Task directory ID
         * @type {string || null}
         */
        this.TaskFolderId = null;

        /**
         * classification. Categorized Display  catalog. Directory Display
         * @type {string || null}
         */
        this.DisplayType = null;

        /**
         * Does it include task directories? true means yes
false No
         * @type {boolean || null}
         */
        this.IncludeTaskFolder = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.FirstLevelPull = 'FirstLevelPull' in params ? params.FirstLevelPull : null;
        this.FolderId = 'FolderId' in params ? params.FolderId : null;
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;
        this.Keyword = 'Keyword' in params ? params.Keyword : null;
        this.IncludeWorkflow = 'IncludeWorkflow' in params ? params.IncludeWorkflow : null;
        this.IncludeTask = 'IncludeTask' in params ? params.IncludeTask : null;
        this.IncludeVirtualTask = 'IncludeVirtualTask' in params ? params.IncludeVirtualTask : null;
        this.TaskFolderId = 'TaskFolderId' in params ? params.TaskFolderId : null;
        this.DisplayType = 'DisplayType' in params ? params.DisplayType : null;
        this.IncludeTaskFolder = 'IncludeTaskFolder' in params ? params.IncludeTaskFolder : null;

    }
}

/**
 * Table Ancillary Information
 * @class
 */
class TableMetaProperty extends  AbstractModel {
    constructor(){
        super();

        /**
         * Attribute Key
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Key = null;

        /**
         * Attribute Value
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Value = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Key = 'Key' in params ? params.Key : null;
        this.Value = 'Value' in params ? params.Value : null;

    }
}

/**
 * BatchDeleteIntegrationTasks request structure.
 * @class
 */
class BatchDeleteIntegrationTasksRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {Array.<string> || null}
         */
        this.TaskIds = null;

        /**
         * Task Type, 201 for real-time tasks, 202 for offline tasks
         * @type {number || null}
         */
        this.TaskType = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Whether to delete development state tasks. By default, development state is not deleted, 0 means do not delete, 1 means delete
         * @type {number || null}
         */
        this.DeleteKFFlag = null;

        /**
         * Operation Name
         * @type {string || null}
         */
        this.Name = null;

        /**
         * This batch operation involves tasks for auditing
         * @type {Array.<string> || null}
         */
        this.TaskNames = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskIds = 'TaskIds' in params ? params.TaskIds : null;
        this.TaskType = 'TaskType' in params ? params.TaskType : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.DeleteKFFlag = 'DeleteKFFlag' in params ? params.DeleteKFFlag : null;
        this.Name = 'Name' in params ? params.Name : null;
        this.TaskNames = 'TaskNames' in params ? params.TaskNames : null;

    }
}

/**
 * KillOpsMakePlanInstances response structure.
 * @class
 */
class KillOpsMakePlanInstancesResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Batch Operation Result
         * @type {BatchOperateResultOpsDto || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new BatchOperateResultOpsDto();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * TaskLog request structure.
 * @class
 */
class TaskLogRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Start timestamp, unit: milliseconds
         * @type {number || null}
         */
        this.StartTime = null;

        /**
         * End timestamp, unit: milliseconds
         * @type {number || null}
         */
        this.EndTime = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Number of log pulls, default 100
         * @type {number || null}
         */
        this.Limit = null;

        /**
         * Log sorting, desc for descending, asc for ascending
         * @type {string || null}
         */
        this.OrderType = null;

        /**
         * Real-time task 201 Offline task 202 Default is real-time task
         * @type {number || null}
         */
        this.TaskType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.Limit = 'Limit' in params ? params.Limit : null;
        this.OrderType = 'OrderType' in params ? params.OrderType : null;
        this.TaskType = 'TaskType' in params ? params.TaskType : null;

    }
}

/**
 * Dependency edge information of the task
 * @class
 */
class OpsTaskLinkInfoDto extends  AbstractModel {
    constructor(){
        super();

        /**
         * Downstream task ID
         * @type {string || null}
         */
        this.TaskTo = null;

        /**
         * Upstream task ID
         * @type {string || null}
         */
        this.TaskFrom = null;

        /**
         * Dependency Edge Type 1,"real_real" indicates task->task; 2, "virtual_real" crossed workflow task->task
         * @type {string || null}
         */
        this.LinkType = null;

        /**
         * Dependency Edge ID
         * @type {string || null}
         */
        this.LinkId = null;

        /**
         * To distinguish newly added cyclic dependency. Default is normal, for cyclic dependency it is circulate
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.LinkStyle = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskTo = 'TaskTo' in params ? params.TaskTo : null;
        this.TaskFrom = 'TaskFrom' in params ? params.TaskFrom : null;
        this.LinkType = 'LinkType' in params ? params.LinkType : null;
        this.LinkId = 'LinkId' in params ? params.LinkId : null;
        this.LinkStyle = 'LinkStyle' in params ? params.LinkStyle : null;

    }
}

/**
 * DescribeIntegrationStatisticsTaskStatus request structure.
 * @class
 */
class DescribeIntegrationStatisticsTaskStatusRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task Type (Real-time: 201, Offline: 202)
         * @type {number || null}
         */
        this.TaskType = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Query Date
         * @type {string || null}
         */
        this.QueryDate = null;

        /**
         * Resource Group ID
         * @type {string || null}
         */
        this.ExecutorGroupId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskType = 'TaskType' in params ? params.TaskType : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.QueryDate = 'QueryDate' in params ? params.QueryDate : null;
        this.ExecutorGroupId = 'ExecutorGroupId' in params ? params.ExecutorGroupId : null;

    }
}

/**
 * GetFileInfo response structure.
 * @class
 */
class GetFileInfoResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Current Script Information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {UserFileInfo || null}
         */
        this.UserFileInfo = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.UserFileInfo) {
            let obj = new UserFileInfo();
            obj.deserialize(params.UserFileInfo)
            this.UserFileInfo = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Basic User Information
 * @class
 */
class BaseUser extends  AbstractModel {
    constructor(){
        super();

        /**
         * Cloud User UIN, Globally Unique
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.UserId = null;

        /**
         * User Global Unique Identifier
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.UserName = null;

        /**
         * User Display Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DisplayName = null;

        /**
         * Telephone Number
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.PhoneNum = null;

        /**
         * Email
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Email = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.UserId = 'UserId' in params ? params.UserId : null;
        this.UserName = 'UserName' in params ? params.UserName : null;
        this.DisplayName = 'DisplayName' in params ? params.DisplayName : null;
        this.PhoneNum = 'PhoneNum' in params ? params.PhoneNum : null;
        this.Email = 'Email' in params ? params.Email : null;

    }
}

/**
 * Instance Retrieval Criteria
 * @class
 */
class InstanceCondition extends  AbstractModel {
    constructor(){
        super();

        /**
         * Execution Type
         * @type {string || null}
         */
        this.ExecutionSpace = null;

        /**
         * Task Product Type
         * @type {string || null}
         */
        this.ProductName = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ExecutionSpace = 'ExecutionSpace' in params ? params.ExecutionSpace : null;
        this.ProductName = 'ProductName' in params ? params.ProductName : null;

    }
}

/**
 * Task submission detail response parameters structure.
 * @class
 */
class ReportTaskDetail extends  AbstractModel {
    constructor(){
        super();

        /**
         * Engine task id.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.EngineTaskId = null;

        /**
         * Engine execution status, enumerate.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.EngineExeStatus = null;

        /**
         * Engine execution start time.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.EngineExeStartTime = null;

        /**
         * Engine execution end time.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.EngineExeEndTime = null;

        /**
         * Task type id.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.TaskTypeId = null;

        /**
         * Business information.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.BusinessInfo = null;

        /**
         * Engine task information.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {EngineTaskInfo || null}
         */
        this.EngineTaskInfo = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.EngineTaskId = 'EngineTaskId' in params ? params.EngineTaskId : null;
        this.EngineExeStatus = 'EngineExeStatus' in params ? params.EngineExeStatus : null;
        this.EngineExeStartTime = 'EngineExeStartTime' in params ? params.EngineExeStartTime : null;
        this.EngineExeEndTime = 'EngineExeEndTime' in params ? params.EngineExeEndTime : null;
        this.TaskTypeId = 'TaskTypeId' in params ? params.TaskTypeId : null;
        this.BusinessInfo = 'BusinessInfo' in params ? params.BusinessInfo : null;

        if (params.EngineTaskInfo) {
            let obj = new EngineTaskInfo();
            obj.deserialize(params.EngineTaskInfo)
            this.EngineTaskInfo = obj;
        }

    }
}

/**
 * FreezeOpsTasks response structure.
 * @class
 */
class FreezeOpsTasksResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Operation result
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Integrated Node Mapping
 * @class
 */
class IntegrationNodeMapping extends  AbstractModel {
    constructor(){
        super();

        /**
         * Source Node ID
         * @type {string || null}
         */
        this.SourceId = null;

        /**
         * Target Node ID
         * @type {string || null}
         */
        this.SinkId = null;

        /**
         * Source Node Schema
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<IntegrationNodeSchema> || null}
         */
        this.SourceSchema = null;

        /**
         * Node Schema Mapping
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<IntegrationNodeSchemaMapping> || null}
         */
        this.SchemaMappings = null;

        /**
         * Node Mapping Extended Information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<RecordField> || null}
         */
        this.ExtConfig = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.SourceId = 'SourceId' in params ? params.SourceId : null;
        this.SinkId = 'SinkId' in params ? params.SinkId : null;

        if (params.SourceSchema) {
            this.SourceSchema = new Array();
            for (let z in params.SourceSchema) {
                let obj = new IntegrationNodeSchema();
                obj.deserialize(params.SourceSchema[z]);
                this.SourceSchema.push(obj);
            }
        }

        if (params.SchemaMappings) {
            this.SchemaMappings = new Array();
            for (let z in params.SchemaMappings) {
                let obj = new IntegrationNodeSchemaMapping();
                obj.deserialize(params.SchemaMappings[z]);
                this.SchemaMappings.push(obj);
            }
        }

        if (params.ExtConfig) {
            this.ExtConfig = new Array();
            for (let z in params.ExtConfig) {
                let obj = new RecordField();
                obj.deserialize(params.ExtConfig[z]);
                this.ExtConfig.push(obj);
            }
        }

    }
}

/**
 * Column Lineage Aggregation Information
 * @class
 */
class ColumnAggregationLineage extends  AbstractModel {
    constructor(){
        super();

        /**
         * Table nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableName = null;

        /**
         * Parent Node ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ParentId = null;

        /**
         * Metadata Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.MetastoreType = null;

        /**
         * String Type Parent Node Collection
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ParentSet = null;

        /**
         * String Type Child Node Collection
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ChildSet = null;

        /**
         * Column Information Collection
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<SimpleColumnInfo> || null}
         */
        this.ColumnInfoSet = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TableName = 'TableName' in params ? params.TableName : null;
        this.ParentId = 'ParentId' in params ? params.ParentId : null;
        this.MetastoreType = 'MetastoreType' in params ? params.MetastoreType : null;
        this.ParentSet = 'ParentSet' in params ? params.ParentSet : null;
        this.ChildSet = 'ChildSet' in params ? params.ChildSet : null;

        if (params.ColumnInfoSet) {
            this.ColumnInfoSet = new Array();
            for (let z in params.ColumnInfoSet) {
                let obj = new SimpleColumnInfo();
                obj.deserialize(params.ColumnInfoSet[z]);
                this.ColumnInfoSet.push(obj);
            }
        }

    }
}

/**
 * ModifyRuleGroupSubscription response structure.
 * @class
 */
class ModifyRuleGroupSubscriptionResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Rule Group IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * CreateWorkflowDs response structure.
 * @class
 */
class CreateWorkflowDsResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Workflow ID
         * @type {string || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * CreateHiveTableByDDL response structure.
 * @class
 */
class CreateHiveTableByDDLResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Table Name
         * @type {string || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeTaskByCycle response structure.
 * @class
 */
class DescribeTaskByCycleResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Periodic Task Statistics
         * @type {Array.<TaskByCycle> || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            this.Data = new Array();
            for (let z in params.Data) {
                let obj = new TaskByCycle();
                obj.deserialize(params.Data[z]);
                this.Data.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeExecStrategy response structure.
 * @class
 */
class DescribeExecStrategyResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Rule Group Execution Strategy
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {RuleGroupExecStrategy || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new RuleGroupExecStrategy();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeSuccessorOpsTaskInfos response structure.
 * @class
 */
class DescribeSuccessorOpsTaskInfosResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Downstream Task List
         * @type {Array.<TaskOpsDto> || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            this.Data = new Array();
            for (let z in params.Data) {
                let obj = new TaskOpsDto();
                obj.deserialize(params.Data[z]);
                this.Data.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DeleteResource response structure.
 * @class
 */
class DeleteResourceResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Success Status
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * ModifyRule response structure.
 * @class
 */
class ModifyRuleResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Whether Update Successful
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeInstanceLogFile response structure.
 * @class
 */
class DescribeInstanceLogFileResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Download File Details
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {InstanceDownloadLogInfo || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new InstanceDownloadLogInfo();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Key-Value Pair
 * @class
 */
class PairDto extends  AbstractModel {
    constructor(){
        super();

        /**
         * Key Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Key = null;

        /**
         * ValueNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Value = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Key = 'Key' in params ? params.Key : null;
        this.Value = 'Value' in params ? params.Value : null;

    }
}

/**
 * ModifyTaskLinks request structure.
 * @class
 */
class ModifyTaskLinksRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Parent Task ID
         * @type {string || null}
         */
        this.TaskFrom = null;

        /**
         * Subtask ID
         * @type {string || null}
         */
        this.TaskTo = null;

        /**
         * Subtask Workflow
         * @type {string || null}
         */
        this.WorkflowId = null;

        /**
         * Parent Task Workflow
         * @type {string || null}
         */
        this.RealFromWorkflowId = null;

        /**
         * Dependency Relationship Between Parent and Child Tasks
         * @type {string || null}
         */
        this.LinkDependencyType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.TaskFrom = 'TaskFrom' in params ? params.TaskFrom : null;
        this.TaskTo = 'TaskTo' in params ? params.TaskTo : null;
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;
        this.RealFromWorkflowId = 'RealFromWorkflowId' in params ? params.RealFromWorkflowId : null;
        this.LinkDependencyType = 'LinkDependencyType' in params ? params.LinkDependencyType : null;

    }
}

/**
 * DeleteTaskDs response structure.
 * @class
 */
class DeleteTaskDsResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Delete successful?
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeAllByFolderNew response structure.
 * @class
 */
class DescribeAllByFolderNewResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Result Set
         * @type {CollectionFolderOpsDto || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new CollectionFolderOpsDto();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeDsParentFolderTree request structure.
 * @class
 */
class DescribeDsParentFolderTreeRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Folder ID
         * @type {string || null}
         */
        this.FolderId = null;

        /**
         * Workflow ID
         * @type {string || null}
         */
        this.WorkflowId = null;

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Task Display Format, Example Values
-    classification: Categorized Display
-    catalog: Directory Display
         * @type {string || null}
         */
        this.DisplayType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.FolderId = 'FolderId' in params ? params.FolderId : null;
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.DisplayType = 'DisplayType' in params ? params.DisplayType : null;

    }
}

/**
 * KillScheduleInstances response structure.
 * @class
 */
class KillScheduleInstancesResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Result
         * @type {BatchOperateResultOpsDto || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new BatchOperateResultOpsDto();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * UnlockIntegrationTask request structure.
 * @class
 */
class UnlockIntegrationTaskRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * DescribeWorkflowTaskCount request structure.
 * @class
 */
class DescribeWorkflowTaskCountRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Workflow List
         * @type {string || null}
         */
        this.WorkflowId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * DescribeInstanceList request structure.
 * @class
 */
class DescribeInstanceListRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project/workspace ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Page Number
         * @type {number || null}
         */
        this.PageIndex = null;

        /**
         * Number of items displayed per page
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Cycle List (e.g., daily, one-time), optional
         * @type {Array.<string> || null}
         */
        this.CycleList = null;

        /**
         * Person in Charge
         * @type {Array.<string> || null}
         */
        this.OwnerList = null;

        /**
         * Keep consistent with previous
         * @type {string || null}
         */
        this.InstanceType = null;

        /**
         * Sorting Order (asc, desc)
         * @type {string || null}
         */
        this.Sort = null;

        /**
         * Sort Column (costTime Runtime duration, startTime Start Time, state Instance status, curRunDate Data Timestamp)
         * @type {string || null}
         */
        this.SortCol = null;

        /**
         * Type List (e.g., Python Task Type: 30
PySpark Task Type: 31
hivesql task type:34
shell task type:35
sparksql task type:36 jdbcsql task type:21 dlc task type:32), optional
         * @type {Array.<number> || null}
         */
        this.TaskTypeList = null;

        /**
         * Status list (e.g., success 2, executing 1), optional
         * @type {Array.<number> || null}
         */
        this.StateList = null;

        /**
         * Task Name
         * @type {string || null}
         */
        this.Keyword = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.PageIndex = 'PageIndex' in params ? params.PageIndex : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;
        this.CycleList = 'CycleList' in params ? params.CycleList : null;
        this.OwnerList = 'OwnerList' in params ? params.OwnerList : null;
        this.InstanceType = 'InstanceType' in params ? params.InstanceType : null;
        this.Sort = 'Sort' in params ? params.Sort : null;
        this.SortCol = 'SortCol' in params ? params.SortCol : null;
        this.TaskTypeList = 'TaskTypeList' in params ? params.TaskTypeList : null;
        this.StateList = 'StateList' in params ? params.StateList : null;
        this.Keyword = 'Keyword' in params ? params.Keyword : null;

    }
}

/**
 * ModifyWorkflowSchedule response structure.
 * @class
 */
class ModifyWorkflowScheduleResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Execution Result
         * @type {BatchResult || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new BatchResult();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DeleteCustomFunction request structure.
 * @class
 */
class DeleteCustomFunctionRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Cluster Instance ID
         * @type {string || null}
         */
        this.ClusterIdentifier = null;

        /**
         * Function ID
         * @type {string || null}
         */
        this.FunctionId = null;

        /**
         * Project ID, required
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Function Name
         * @type {string || null}
         */
        this.FunctionName = null;

        /**
         * Function Type, HIVE, SPARK, DLC, CDW_POSTGRESQL
         * @type {string || null}
         */
        this.FunctionType = null;

        /**
         * Database name
         * @type {string || null}
         */
        this.DatabaseName = null;

        /**
         * Pattern name
         * @type {string || null}
         */
        this.SchemaName = null;

        /**
         * Function Command Format
         * @type {string || null}
         */
        this.CommandFormat = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ClusterIdentifier = 'ClusterIdentifier' in params ? params.ClusterIdentifier : null;
        this.FunctionId = 'FunctionId' in params ? params.FunctionId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.FunctionName = 'FunctionName' in params ? params.FunctionName : null;
        this.FunctionType = 'FunctionType' in params ? params.FunctionType : null;
        this.DatabaseName = 'DatabaseName' in params ? params.DatabaseName : null;
        this.SchemaName = 'SchemaName' in params ? params.SchemaName : null;
        this.CommandFormat = 'CommandFormat' in params ? params.CommandFormat : null;

    }
}

/**
 * Trial Run Record
 * @class
 */
class DrInstanceOpsDto extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task Source
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskSource = null;

        /**
         * Orchestration Space jobId
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.JobId = null;

        /**
         * Task Submission Record Id
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.RecordId = null;

        /**
         * Subtask record id
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.SonRecordId = null;

        /**
         * Task instance Id
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InstanceId = null;

        /**
         * For orchestration space, the task id; for development space, the script id
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Script COS address
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.RemotePath = null;

        /**
         * Trial run content
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ScriptContent = null;

        /**
         * Task submission time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreateTime = null;

        /**
         * Task start time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * Running duration (seconds)
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Duration = null;

        /**
         * Trial run status
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Status = null;

        /**
         * For orchestration space, the task name; for development space, the script name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskName = null;

        /**
         * Trial run submitter
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.SubmitUserName = null;

        /**
         * Trial run submitter userId
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.SubmitUserId = null;

        /**
         * Task TypeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskType = null;

        /**
         * Contains result set
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.HasResultSet = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskSource = 'TaskSource' in params ? params.TaskSource : null;
        this.JobId = 'JobId' in params ? params.JobId : null;
        this.RecordId = 'RecordId' in params ? params.RecordId : null;
        this.SonRecordId = 'SonRecordId' in params ? params.SonRecordId : null;
        this.InstanceId = 'InstanceId' in params ? params.InstanceId : null;
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.RemotePath = 'RemotePath' in params ? params.RemotePath : null;
        this.ScriptContent = 'ScriptContent' in params ? params.ScriptContent : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.Duration = 'Duration' in params ? params.Duration : null;
        this.Status = 'Status' in params ? params.Status : null;
        this.TaskName = 'TaskName' in params ? params.TaskName : null;
        this.SubmitUserName = 'SubmitUserName' in params ? params.SubmitUserName : null;
        this.SubmitUserId = 'SubmitUserId' in params ? params.SubmitUserId : null;
        this.TaskType = 'TaskType' in params ? params.TaskType : null;
        this.HasResultSet = 'HasResultSet' in params ? params.HasResultSet : null;

    }
}

/**
 * Instance Log Summary Information
 * @class
 */
class InstanceLogInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Data TimestampNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CurRunDate = null;

        /**
         * Number of trial runs
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Tries = null;

        /**
         * Log Update Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.LastUpdate = null;

        /**
         * Log Node
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.BrokerIp = null;

        /**
         * File sizeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FileSize = null;

        /**
         * File Name including Full Path
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.OriginFileName = null;

        /**
         * Log Creation Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreateTime = null;

        /**
         * Instance Log Type, run: running; kill: termination
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InstanceLogType = null;

        /**
         * Task NameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskName = null;

        /**
         * Runtime Duration
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CostTime = null;

        /**
         * Instance Status COMPLETED completed FAILED failed retry EXPIRED failed RUNNING running
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InstanceStatus = null;

        /**
         * Instance Code File, absence indicates the corresponding code file does not exist, possibly due to the executor not being upgraded/certain types of tasks having no code.
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CodeFileName = null;

        /**
         * Extended Attributes
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<AttributeItemDTO> || null}
         */
        this.ExtensionInfo = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.CurRunDate = 'CurRunDate' in params ? params.CurRunDate : null;
        this.Tries = 'Tries' in params ? params.Tries : null;
        this.LastUpdate = 'LastUpdate' in params ? params.LastUpdate : null;
        this.BrokerIp = 'BrokerIp' in params ? params.BrokerIp : null;
        this.FileSize = 'FileSize' in params ? params.FileSize : null;
        this.OriginFileName = 'OriginFileName' in params ? params.OriginFileName : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;
        this.InstanceLogType = 'InstanceLogType' in params ? params.InstanceLogType : null;
        this.TaskName = 'TaskName' in params ? params.TaskName : null;
        this.CostTime = 'CostTime' in params ? params.CostTime : null;
        this.InstanceStatus = 'InstanceStatus' in params ? params.InstanceStatus : null;
        this.CodeFileName = 'CodeFileName' in params ? params.CodeFileName : null;

        if (params.ExtensionInfo) {
            this.ExtensionInfo = new Array();
            for (let z in params.ExtensionInfo) {
                let obj = new AttributeItemDTO();
                obj.deserialize(params.ExtensionInfo[z]);
                this.ExtensionInfo.push(obj);
            }
        }

    }
}

/**
 * GetFileInfo request structure.
 * @class
 */
class GetFileInfoRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * File pathProject Area 1470575647377821696 project, in directory f1: /datastudio/project/1470575647377821696/f1/sql1234.sql Personal Area: /datastudio/personal/sqlTTT.sql
         * @type {string || null}
         */
        this.FilePath = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.FilePath = 'FilePath' in params ? params.FilePath : null;

    }
}

/**
 * Table Lineage Details
 * @class
 */
class TableLineageBaseInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Metadata Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.MetastoreType = null;

        /**
         * Path from Central Node to this Node
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.PrefixPath = null;

        /**
         * Space ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Data source IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatasourceId = null;

        /**
         * Table ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableId = null;

        /**
         * Table Lineage Parameters
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<LineageParamRecord> || null}
         */
        this.Params = null;

        /**
         * Parent Node List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ParentSet = null;

        /**
         * Child Node List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ChildSet = null;

        /**
         * Additional parameters
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<RecordField> || null}
         */
        this.ExtParams = null;

        /**
         * Lineage ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Id = null;

        /**
         * Metadata Type Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.MetastoreTypeName = null;

        /**
         * Table Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableName = null;

        /**
         * Full Table Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.QualifiedName = null;

        /**
         * Number of Downstream Nodes in Lineage
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.DownStreamCount = null;

        /**
         * Number of Upstream Nodes in Lineage
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.UpStreamCount = null;

        /**
         * Bloodline Description
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Description = null;

        /**
         * Bloodline Creation Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreateTime = null;

        /**
         * Bloodline Update Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ModifyTime = null;

        /**
         * Modify the task ID list of lineage
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<string> || null}
         */
        this.Tasks = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.MetastoreType = 'MetastoreType' in params ? params.MetastoreType : null;
        this.PrefixPath = 'PrefixPath' in params ? params.PrefixPath : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.DatasourceId = 'DatasourceId' in params ? params.DatasourceId : null;
        this.TableId = 'TableId' in params ? params.TableId : null;

        if (params.Params) {
            this.Params = new Array();
            for (let z in params.Params) {
                let obj = new LineageParamRecord();
                obj.deserialize(params.Params[z]);
                this.Params.push(obj);
            }
        }
        this.ParentSet = 'ParentSet' in params ? params.ParentSet : null;
        this.ChildSet = 'ChildSet' in params ? params.ChildSet : null;

        if (params.ExtParams) {
            this.ExtParams = new Array();
            for (let z in params.ExtParams) {
                let obj = new RecordField();
                obj.deserialize(params.ExtParams[z]);
                this.ExtParams.push(obj);
            }
        }
        this.Id = 'Id' in params ? params.Id : null;
        this.MetastoreTypeName = 'MetastoreTypeName' in params ? params.MetastoreTypeName : null;
        this.TableName = 'TableName' in params ? params.TableName : null;
        this.QualifiedName = 'QualifiedName' in params ? params.QualifiedName : null;
        this.DownStreamCount = 'DownStreamCount' in params ? params.DownStreamCount : null;
        this.UpStreamCount = 'UpStreamCount' in params ? params.UpStreamCount : null;
        this.Description = 'Description' in params ? params.Description : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;
        this.ModifyTime = 'ModifyTime' in params ? params.ModifyTime : null;
        this.Tasks = 'Tasks' in params ? params.Tasks : null;

    }
}

/**
 * Offline operation and maintenance instance list
 * @class
 */
class InstanceList extends  AbstractModel {
    constructor(){
        super();

        /**
         * Time Consumed
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CostTime = null;

        /**
         * Data TimestampNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CurRunDate = null;

        /**
         * Cycle type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CycleType = null;

        /**
         * Whether to Supplement
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.DoFlag = null;

        /**
         * Person in ChargeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InCharge = null;

        /**
         * LogNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.LastLog = null;

        /**
         * Scheduling plan
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.SchedulerDesc = null;

        /**
         * Start startup time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * Instance status EVENT_LISTENING|DEPENDENCE|BEFORE_ASPECT|ALLOCATED|LAUNCHED|KILL|SNAP_STATE_SAVING|ISSUED|RUNNING|AFTER_ASPECT|PENDING|KILLING|FINAL_STATE_SAVING|FAILED|KILL_FAILED| COMPLETED|EXPIRED|KILL_EXPIRED|DELETED
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.State = null;

        /**
         * Task IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Task NameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskName = null;

        /**
         * Number of trial runs
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TryLimit = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.CostTime = 'CostTime' in params ? params.CostTime : null;
        this.CurRunDate = 'CurRunDate' in params ? params.CurRunDate : null;
        this.CycleType = 'CycleType' in params ? params.CycleType : null;
        this.DoFlag = 'DoFlag' in params ? params.DoFlag : null;
        this.InCharge = 'InCharge' in params ? params.InCharge : null;
        this.LastLog = 'LastLog' in params ? params.LastLog : null;
        this.SchedulerDesc = 'SchedulerDesc' in params ? params.SchedulerDesc : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.State = 'State' in params ? params.State : null;
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.TaskName = 'TaskName' in params ? params.TaskName : null;
        this.TryLimit = 'TryLimit' in params ? params.TryLimit : null;

    }
}

/**
 * Parsing table object for SQL expression when defining Data Quality Custom Rules
 * @class
 */
class SqlExpressionTable extends  AbstractModel {
    constructor(){
        super();

        /**
         * SQL expression table name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableExpression = null;

        /**
         * SQL expression column name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<string> || null}
         */
        this.ColumnExpression = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TableExpression = 'TableExpression' in params ? params.TableExpression : null;
        this.ColumnExpression = 'ColumnExpression' in params ? params.ColumnExpression : null;

    }
}

/**
 * Universal Sort Field
 * @class
 */
class OrderFieldOptional extends  AbstractModel {
    constructor(){
        super();

        /**
         * Sorting Field Name
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Sorting Direction: ASC|DESC
         * @type {string || null}
         */
        this.Direction = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Name = 'Name' in params ? params.Name : null;
        this.Direction = 'Direction' in params ? params.Direction : null;

    }
}

/**
 * DryRunDIOfflineTask request structure.
 * @class
 */
class DryRunDIOfflineTaskRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Resource Group ID
         * @type {string || null}
         */
        this.ResourceGroup = null;

        /**
         * Default 27
         * @type {number || null}
         */
        this.TaskTypeId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.ResourceGroup = 'ResourceGroup' in params ? params.ResourceGroup : null;
        this.TaskTypeId = 'TaskTypeId' in params ? params.TaskTypeId : null;

    }
}

/**
 * CreateOfflineTask request structure.
 * @class
 */
class CreateOfflineTaskRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Interval, optional, default is 1. Not null. Default is 1
         * @type {number || null}
         */
        this.CycleStep = null;

        /**
         * Delayed Execution Time, in minutes
         * @type {number || null}
         */
        this.DelayTime = null;

        /**
         * Task End Data Time. Not Empty. Default to Current Time
         * @type {string || null}
         */
        this.EndTime = null;

        /**
         * Remarks
         * @type {string || null}
         */
        this.Notes = null;

        /**
         * Current date
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * Task Name
         * @type {string || null}
         */
        this.TaskName = null;

        /**
         * Keep it consistent with the previous call to the scheduling interface 27
         * @type {number || null}
         */
        this.TypeId = null;

        /**
         * Time Specification, for monthly tasks specify days like 1,3, then enter 1,3. Not Empty. Default "" Monthly Task: For specific days like "1,3", specifying the end of the month cannot be combined with specific dates, can only be "L"
         * @type {string || null}
         */
        this.TaskAction = null;

        /**
         * Distinguish between canvas and form
         * @type {string || null}
         */
        this.TaskMode = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.CycleStep = 'CycleStep' in params ? params.CycleStep : null;
        this.DelayTime = 'DelayTime' in params ? params.DelayTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;
        this.Notes = 'Notes' in params ? params.Notes : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.TaskName = 'TaskName' in params ? params.TaskName : null;
        this.TypeId = 'TypeId' in params ? params.TypeId : null;
        this.TaskAction = 'TaskAction' in params ? params.TaskAction : null;
        this.TaskMode = 'TaskMode' in params ? params.TaskMode : null;

    }
}

/**
 * DescribeIntegrationStatisticsRecordsTrend response structure.
 * @class
 */
class DescribeIntegrationStatisticsRecordsTrendResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Statistical ResultsNote: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<IntegrationStatisticsTrendResult> || null}
         */
        this.TrendsData = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.TrendsData) {
            this.TrendsData = new Array();
            for (let z in params.TrendsData) {
                let obj = new IntegrationStatisticsTrendResult();
                obj.deserialize(params.TrendsData[z]);
                this.TrendsData.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Event details
 * @class
 */
class EventOpsDto extends  AbstractModel {
    constructor(){
        super();

        /**
         * Event nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Event typeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EventType = null;

        /**
         * Event Segmentation TypeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EventSubType = null;

        /**
         * Event Broadcast TypeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EventBroadcastType = null;

        /**
         * Data Time Format
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DimensionFormat = null;

        /**
         * UptimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TimeToLive = null;

        /**
         * Lifetime Unit
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TimeUnit = null;

        /**
         * Creation Timestamp
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreationTimestamp = null;

        /**
         * Owner
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Owner = null;

        /**
         * AttributeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Properties = null;

        /**
         * DescriptionNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Description = null;

        /**
         * Listener
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<EventListenerOpsDto> || null}
         */
        this.Listeners = null;

        /**
         * Incident Case
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<EventCaseOpsDto> || null}
         */
        this.EventCases = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Name = 'Name' in params ? params.Name : null;
        this.EventType = 'EventType' in params ? params.EventType : null;
        this.EventSubType = 'EventSubType' in params ? params.EventSubType : null;
        this.EventBroadcastType = 'EventBroadcastType' in params ? params.EventBroadcastType : null;
        this.DimensionFormat = 'DimensionFormat' in params ? params.DimensionFormat : null;
        this.TimeToLive = 'TimeToLive' in params ? params.TimeToLive : null;
        this.TimeUnit = 'TimeUnit' in params ? params.TimeUnit : null;
        this.CreationTimestamp = 'CreationTimestamp' in params ? params.CreationTimestamp : null;
        this.Owner = 'Owner' in params ? params.Owner : null;
        this.Properties = 'Properties' in params ? params.Properties : null;
        this.Description = 'Description' in params ? params.Description : null;

        if (params.Listeners) {
            this.Listeners = new Array();
            for (let z in params.Listeners) {
                let obj = new EventListenerOpsDto();
                obj.deserialize(params.Listeners[z]);
                this.Listeners.push(obj);
            }
        }

        if (params.EventCases) {
            this.EventCases = new Array();
            for (let z in params.EventCases) {
                let obj = new EventCaseOpsDto();
                obj.deserialize(params.EventCases[z]);
                this.EventCases.push(obj);
            }
        }

    }
}

/**
 * Folder Pagination Information
 * @class
 */
class DescribeFolderWorkflowListData extends  AbstractModel {
    constructor(){
        super();

        /**
         * Workflow Information List
         * @type {Array.<Workflow> || null}
         */
        this.Items = null;

        /**
         * Total number of items
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * Page Number
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Page Size
         * @type {number || null}
         */
        this.PageSize = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Items) {
            this.Items = new Array();
            for (let z in params.Items) {
                let obj = new Workflow();
                obj.deserialize(params.Items[z]);
                this.Items.push(obj);
            }
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;

    }
}

/**
 * Operations and Maintenance Dashboard Task Display
 * @class
 */
class ScreenTaskInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Statistical Indicator 0: All Instances, 1: Current Day, 2: Yesterday
         * @type {number || null}
         */
        this.CountTag = null;

        /**
         * Total numberNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalNum = null;

        /**
         * RunningNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.RunningNum = null;

        /**
         * StoppingNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.StoppingNum = null;

        /**
         * StoppedNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.StoppedNum = null;

        /**
         * Pause
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.FrozenNum = null;

        /**
         * Annual task
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.YearNum = null;

        /**
         * Monthly task
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.MonthNum = null;

        /**
         * Weekly task
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.WeekNum = null;

        /**
         * Daily task
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.DayNum = null;

        /**
         * Hourly task
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.HourNum = null;

        /**
         * Minute Task
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.MinuteNum = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.CountTag = 'CountTag' in params ? params.CountTag : null;
        this.TotalNum = 'TotalNum' in params ? params.TotalNum : null;
        this.RunningNum = 'RunningNum' in params ? params.RunningNum : null;
        this.StoppingNum = 'StoppingNum' in params ? params.StoppingNum : null;
        this.StoppedNum = 'StoppedNum' in params ? params.StoppedNum : null;
        this.FrozenNum = 'FrozenNum' in params ? params.FrozenNum : null;
        this.YearNum = 'YearNum' in params ? params.YearNum : null;
        this.MonthNum = 'MonthNum' in params ? params.MonthNum : null;
        this.WeekNum = 'WeekNum' in params ? params.WeekNum : null;
        this.DayNum = 'DayNum' in params ? params.DayNum : null;
        this.HourNum = 'HourNum' in params ? params.HourNum : null;
        this.MinuteNum = 'MinuteNum' in params ? params.MinuteNum : null;

    }
}

/**
 * Rule Table Variable Replacement
 * @class
 */
class TableConfig extends  AbstractModel {
    constructor(){
        super();

        /**
         * Database ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatabaseId = null;

        /**
         * Database nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatabaseName = null;

        /**
         * Table ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableId = null;

        /**
         * Table Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableName = null;

        /**
         * Table Key
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableKey = null;

        /**
         * Field Variable
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<FieldConfig> || null}
         */
        this.FieldConfig = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.DatabaseId = 'DatabaseId' in params ? params.DatabaseId : null;
        this.DatabaseName = 'DatabaseName' in params ? params.DatabaseName : null;
        this.TableId = 'TableId' in params ? params.TableId : null;
        this.TableName = 'TableName' in params ? params.TableName : null;
        this.TableKey = 'TableKey' in params ? params.TableKey : null;

        if (params.FieldConfig) {
            this.FieldConfig = new Array();
            for (let z in params.FieldConfig) {
                let obj = new FieldConfig();
                obj.deserialize(params.FieldConfig[z]);
                this.FieldConfig.push(obj);
            }
        }

    }
}

/**
 * Universal Filter
 * @class
 */
class FilterOptional extends  AbstractModel {
    constructor(){
        super();

        /**
         * Filter Field Name
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Filter Value List
         * @type {Array.<string> || null}
         */
        this.Values = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Name = 'Name' in params ? params.Name : null;
        this.Values = 'Values' in params ? params.Values : null;

    }
}

/**
 * Task Instance Status Statistics
 * @class
 */
class TaskInstanceCountDto extends  AbstractModel {
    constructor(){
        super();

        /**
         * Number of Successful Instances
         * @type {number || null}
         */
        this.Success = null;

        /**
         * Number of Instances in Execution
         * @type {number || null}
         */
        this.Running = null;

        /**
         * Number of Instances Waiting
         * @type {number || null}
         */
        this.Waiting = null;

        /**
         * Number of Instances Waiting for Upstream
         * @type {number || null}
         */
        this.Depend = null;

        /**
         * Failed Instance Count
         * @type {number || null}
         */
        this.Failed = null;

        /**
         * Permanently Terminated Instance Count
         * @type {number || null}
         */
        this.Stopped = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Success = 'Success' in params ? params.Success : null;
        this.Running = 'Running' in params ? params.Running : null;
        this.Waiting = 'Waiting' in params ? params.Waiting : null;
        this.Depend = 'Depend' in params ? params.Depend : null;
        this.Failed = 'Failed' in params ? params.Failed : null;
        this.Stopped = 'Stopped' in params ? params.Stopped : null;

    }
}

/**
 * Table Scoring Statistics
 * @class
 */
class TableScoreStatisticsInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Levels 1,2,3,4,5
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Level = null;

        /**
         * PercentageNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Scale = null;

        /**
         * Table quantityNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TableNumber = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Level = 'Level' in params ? params.Level : null;
        this.Scale = 'Scale' in params ? params.Scale : null;
        this.TableNumber = 'TableNumber' in params ? params.TableNumber : null;

    }
}

/**
 * BatchForceSuccessIntegrationTaskInstances response structure.
 * @class
 */
class BatchForceSuccessIntegrationTaskInstancesResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Number of Successful Operations
         * @type {number || null}
         */
        this.SuccessCount = null;

        /**
         * Number of Failed Operations
         * @type {number || null}
         */
        this.FailedCount = null;

        /**
         * Total Number of Tasks
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.SuccessCount = 'SuccessCount' in params ? params.SuccessCount : null;
        this.FailedCount = 'FailedCount' in params ? params.FailedCount : null;
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Instance Lifecycle Details
 * @class
 */
class InstanceLifeCycleOpsDto extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Data Timestamp
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CurRunDate = null;

        /**
         * Instance Lifecycle Count
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.LifeRound = null;

        /**
         * Run Type Rerun/Supplement/Periodic/Non-periodic
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.RunType = null;

        /**
         * Number of Reruns
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Tries = null;

        /**
         * Instance LifecycleNote: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<InstanceLifeDetailDto> || null}
         */
        this.InstanceLifeDetailDtoList = null;

        /**
         * Runner Status
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.RunnerState = null;

        /**
         * Error codeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ErrorDesc = null;

        /**
         * Error Alert Level
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ErrorCodeLevel = null;

        /**
         * Instance Log Summary
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {InstanceLogInfo || null}
         */
        this.InstanceLogListOpsDto = null;

        /**
         * Instance StatusNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InstanceState = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.CurRunDate = 'CurRunDate' in params ? params.CurRunDate : null;
        this.LifeRound = 'LifeRound' in params ? params.LifeRound : null;
        this.RunType = 'RunType' in params ? params.RunType : null;
        this.Tries = 'Tries' in params ? params.Tries : null;

        if (params.InstanceLifeDetailDtoList) {
            this.InstanceLifeDetailDtoList = new Array();
            for (let z in params.InstanceLifeDetailDtoList) {
                let obj = new InstanceLifeDetailDto();
                obj.deserialize(params.InstanceLifeDetailDtoList[z]);
                this.InstanceLifeDetailDtoList.push(obj);
            }
        }
        this.RunnerState = 'RunnerState' in params ? params.RunnerState : null;
        this.ErrorDesc = 'ErrorDesc' in params ? params.ErrorDesc : null;
        this.ErrorCodeLevel = 'ErrorCodeLevel' in params ? params.ErrorCodeLevel : null;

        if (params.InstanceLogListOpsDto) {
            let obj = new InstanceLogInfo();
            obj.deserialize(params.InstanceLogListOpsDto)
            this.InstanceLogListOpsDto = obj;
        }
        this.InstanceState = 'InstanceState' in params ? params.InstanceState : null;

    }
}

/**
 * Alert Recipient Details
 * @class
 */
class AlarmReceiverInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Alert ID
         * @type {string || null}
         */
        this.AlarmId = null;

        /**
         * Alarm Recipient ID
         * @type {string || null}
         */
        this.AlarmReceiver = null;

        /**
         * Email,0: Not set,1: Success,2: Failure
         * @type {number || null}
         */
        this.Email = null;

        /**
         * SMS,0: Not set,1: Success,2: Failure
         * @type {number || null}
         */
        this.Sms = null;

        /**
         * WeChat,0: Not set,1: Success,2: Failure
         * @type {number || null}
         */
        this.Wechat = null;

        /**
         * Telephone,0: Not set,1: Success,2: Failure
         * @type {number || null}
         */
        this.Voice = null;

        /**
         * WeCom,0: Not set,1: Success,2: Failure
         * @type {number || null}
         */
        this.Wecom = null;

        /**
         * http,0: Not set,1: Success,2: Failure
         * @type {number || null}
         */
        this.Http = null;

        /**
         * Enterprise WeChat group,0: Not set,1: Success,2: Failure
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.WecomGroup = null;

        /**
         * FeiShu Group,0: Not set,1: Success,2: Failure
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.LarkGroup = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.AlarmId = 'AlarmId' in params ? params.AlarmId : null;
        this.AlarmReceiver = 'AlarmReceiver' in params ? params.AlarmReceiver : null;
        this.Email = 'Email' in params ? params.Email : null;
        this.Sms = 'Sms' in params ? params.Sms : null;
        this.Wechat = 'Wechat' in params ? params.Wechat : null;
        this.Voice = 'Voice' in params ? params.Voice : null;
        this.Wecom = 'Wecom' in params ? params.Wecom : null;
        this.Http = 'Http' in params ? params.Http : null;
        this.WecomGroup = 'WecomGroup' in params ? params.WecomGroup : null;
        this.LarkGroup = 'LarkGroup' in params ? params.LarkGroup : null;

    }
}

/**
 * Spark SQL Configuration Parameters
 * @class
 */
class GeneralTaskParam extends  AbstractModel {
    constructor(){
        super();

        /**
         * Common Task Parameter Type, for example: SPARK_SQL
         * @type {string || null}
         */
        this.Type = null;

        /**
         * Common Task Parameter Content, parameters that directly apply to the task. Separate different parameters with;
Split
         * @type {string || null}
         */
        this.Value = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Type = 'Type' in params ? params.Type : null;
        this.Value = 'Value' in params ? params.Value : null;

    }
}

/**
 * DescribeTableBasicInfo response structure.
 * @class
 */
class DescribeTableBasicInfoResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Table Metadata
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<TableBasicInfo> || null}
         */
        this.TableBasicInfoList = null;

        /**
         * Total number of items
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.TableBasicInfoList) {
            this.TableBasicInfoList = new Array();
            for (let z in params.TableBasicInfoList) {
                let obj = new TableBasicInfo();
                obj.deserialize(params.TableBasicInfoList[z]);
                this.TableBasicInfoList.push(obj);
            }
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DLC table creation attribute
 * @class
 */
class Property extends  AbstractModel {
    constructor(){
        super();

        /**
         * Key Value
         * @type {string || null}
         */
        this.Key = null;

        /**
         * Value
         * @type {string || null}
         */
        this.Value = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Key = 'Key' in params ? params.Key : null;
        this.Value = 'Value' in params ? params.Value : null;

    }
}

/**
 * ModifyRuleTemplate request structure.
 * @class
 */
class ModifyRuleTemplateRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Template ID
         * @type {number || null}
         */
        this.TemplateId = null;

        /**
         * Template Type 1. System Template 2. Custom Definition Template
         * @type {number || null}
         */
        this.Type = null;

        /**
         * Template Name
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Quality Inspection Dimension 1. Accuracy 2. Uniqueness 3. Integrity 4. Consistency 5. Timeliness 6. Validity
         * @type {number || null}
         */
        this.QualityDim = null;

        /**
         * Source Data Object Type 1. Constant 2. Offline Table Level 2. Offline Field Level
         * @type {number || null}
         */
        this.SourceObjectType = null;

        /**
         * Description
         * @type {string || null}
         */
        this.Description = null;

        /**
         * Corresponding Engine Type of the Source
         * @type {Array.<number> || null}
         */
        this.SourceEngineTypes = null;

        /**
         * Whether to Associate with Other Databases and Tables
         * @type {boolean || null}
         */
        this.MultiSourceFlag = null;

        /**
         * SQL Expression
         * @type {string || null}
         */
        this.SqlExpression = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Whether to add where parameter
         * @type {boolean || null}
         */
        this.WhereFlag = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TemplateId = 'TemplateId' in params ? params.TemplateId : null;
        this.Type = 'Type' in params ? params.Type : null;
        this.Name = 'Name' in params ? params.Name : null;
        this.QualityDim = 'QualityDim' in params ? params.QualityDim : null;
        this.SourceObjectType = 'SourceObjectType' in params ? params.SourceObjectType : null;
        this.Description = 'Description' in params ? params.Description : null;
        this.SourceEngineTypes = 'SourceEngineTypes' in params ? params.SourceEngineTypes : null;
        this.MultiSourceFlag = 'MultiSourceFlag' in params ? params.MultiSourceFlag : null;
        this.SqlExpression = 'SqlExpression' in params ? params.SqlExpression : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.WhereFlag = 'WhereFlag' in params ? params.WhereFlag : null;

    }
}

/**
 * DescribeRuleExecStat response structure.
 * @class
 */
class DescribeRuleExecStatResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Result
         * @type {RuleExecStat || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new RuleExecStat();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Cycle Unit Statistics
 * @class
 */
class TaskByCycle extends  AbstractModel {
    constructor(){
        super();

        /**
         * num
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Number = null;

        /**
         * Cycle Unit
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CycleUnit = null;

        /**
         * Project ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Number = 'Number' in params ? params.Number : null;
        this.CycleUnit = 'CycleUnit' in params ? params.CycleUnit : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * DagInstances response structure.
 * @class
 */
class DagInstancesResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Result
         * @type {CollectionInstanceOpsDto || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new CollectionInstanceOpsDto();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Dimension Scoring
 * @class
 */
class DimensionScore extends  AbstractModel {
    constructor(){
        super();

        /**
         * Dimension Scoring List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<DimensionScoreInfo> || null}
         */
        this.DimensionScoreList = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.DimensionScoreList) {
            this.DimensionScoreList = new Array();
            for (let z in params.DimensionScoreList) {
                let obj = new DimensionScoreInfo();
                obj.deserialize(params.DimensionScoreList[z]);
                this.DimensionScoreList.push(obj);
            }
        }

    }
}

/**
 * GetInstanceLog response structure.
 * @class
 */
class GetInstanceLogResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Scheduling instance details.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {InstanceLogVO || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new InstanceLogVO();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeTableLineageInfo request structure.
 * @class
 */
class DescribeTableLineageInfoRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Query Direction, INPUT, OUTPUT, BOTH enumerated values
         * @type {string || null}
         */
        this.Direction = null;

        /**
         * Table information
         * @type {TableLineageInfo || null}
         */
        this.Data = null;

        /**
         * Single Query Indegree, default 1
         * @type {number || null}
         */
        this.InputDepth = null;

        /**
         * Single Query Outdegree, default 1
         * @type {number || null}
         */
        this.OutputDepth = null;

        /**
         * Additional Parameters (Pass Caller Information)
         * @type {Array.<LineageParamRecord> || null}
         */
        this.ExtParams = null;

        /**
         * Filter Temporary Tables, default true
         * @type {boolean || null}
         */
        this.IgnoreTemp = null;

        /**
         * Recursively Query Number of Secondary Nodes, default is true
         * @type {boolean || null}
         */
        this.RecursiveSecond = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Direction = 'Direction' in params ? params.Direction : null;

        if (params.Data) {
            let obj = new TableLineageInfo();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.InputDepth = 'InputDepth' in params ? params.InputDepth : null;
        this.OutputDepth = 'OutputDepth' in params ? params.OutputDepth : null;

        if (params.ExtParams) {
            this.ExtParams = new Array();
            for (let z in params.ExtParams) {
                let obj = new LineageParamRecord();
                obj.deserialize(params.ExtParams[z]);
                this.ExtParams.push(obj);
            }
        }
        this.IgnoreTemp = 'IgnoreTemp' in params ? params.IgnoreTemp : null;
        this.RecursiveSecond = 'RecursiveSecond' in params ? params.RecursiveSecond : null;

    }
}

/**
 * CreateTaskFolder request structure.
 * @class
 */
class CreateTaskFolderRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Folder Name
         * @type {string || null}
         */
        this.FolderName = null;

        /**
         * Workflow ID
         * @type {string || null}
         */
        this.WorkflowId = null;

        /**
         * Parent Folder ID
         * @type {string || null}
         */
        this.ParentFolderId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.FolderName = 'FolderName' in params ? params.FolderName : null;
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;
        this.ParentFolderId = 'ParentFolderId' in params ? params.ParentFolderId : null;

    }
}

/**
 * Engine task information.
 * @class
 */
class EngineTaskInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Engine submission time.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.EngineSubmitTime = null;

        /**
         * Engine execution time.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.EngineExeTime = null;

        /**
         * Total execution time of the engine.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.EngineExeTimes = null;

        /**
         * cu consumption.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.CuConsume = null;

        /**
         * Resource consumption.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.ResourceUsage = null;

        /**
         * Engine name.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.EngineName = null;

        /**
         * Engine execution status.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.EngineExeStatus = null;

        /**
         * Task type.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.TaskKind = null;

        /**
         * Task type

Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.TaskType = null;

        /**
         * Task SQL statement.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.TaskContent = null;

        /**
         * Total bytes of data scanning.
Note: This field may return null, indicating that no valid values can be obtained.

Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.InputBytesSum = null;

        /**
         * Total shuffle read bytes.
Note: This field may return null, indicating that no valid values can be obtained.

Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.ShuffleReadBytesSum = null;

        /**
         * Total number of shuffle read lines.
Note: This field may return null, indicating that no valid values can be obtained.

Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.ShuffleReadRecordsSum = null;

        /**
         * Total number of outputs.
Note: This field may return null, indicating that no valid values can be obtained.

Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.OutputRecordsSum = null;

        /**
         * Total output in bytes.
Note: This field may return null, indicating that no valid values can be obtained.

Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.OutputBytesSum = null;

        /**
         * Number of output files.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.OutputFilesNum = null;

        /**
         * Number of small files output.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.OutputSmallFilesNum = null;

        /**
         * Execution wait time.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.WaitTime = null;

        /**
         * Query result time.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.QueryResultTime = null;

        /**
         * Input parameters.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.CmdArgs = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.EngineSubmitTime = 'EngineSubmitTime' in params ? params.EngineSubmitTime : null;
        this.EngineExeTime = 'EngineExeTime' in params ? params.EngineExeTime : null;
        this.EngineExeTimes = 'EngineExeTimes' in params ? params.EngineExeTimes : null;
        this.CuConsume = 'CuConsume' in params ? params.CuConsume : null;
        this.ResourceUsage = 'ResourceUsage' in params ? params.ResourceUsage : null;
        this.EngineName = 'EngineName' in params ? params.EngineName : null;
        this.EngineExeStatus = 'EngineExeStatus' in params ? params.EngineExeStatus : null;
        this.TaskKind = 'TaskKind' in params ? params.TaskKind : null;
        this.TaskType = 'TaskType' in params ? params.TaskType : null;
        this.TaskContent = 'TaskContent' in params ? params.TaskContent : null;
        this.InputBytesSum = 'InputBytesSum' in params ? params.InputBytesSum : null;
        this.ShuffleReadBytesSum = 'ShuffleReadBytesSum' in params ? params.ShuffleReadBytesSum : null;
        this.ShuffleReadRecordsSum = 'ShuffleReadRecordsSum' in params ? params.ShuffleReadRecordsSum : null;
        this.OutputRecordsSum = 'OutputRecordsSum' in params ? params.OutputRecordsSum : null;
        this.OutputBytesSum = 'OutputBytesSum' in params ? params.OutputBytesSum : null;
        this.OutputFilesNum = 'OutputFilesNum' in params ? params.OutputFilesNum : null;
        this.OutputSmallFilesNum = 'OutputSmallFilesNum' in params ? params.OutputSmallFilesNum : null;
        this.WaitTime = 'WaitTime' in params ? params.WaitTime : null;
        this.QueryResultTime = 'QueryResultTime' in params ? params.QueryResultTime : null;
        this.CmdArgs = 'CmdArgs' in params ? params.CmdArgs : null;

    }
}

/**
 * Integration Node Details
 * @class
 */
class IntegrationNodeDetail extends  AbstractModel {
    constructor(){
        super();

        /**
         * Integration Node Name
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Integration Node Type
         * @type {string || null}
         */
        this.NodeType = null;

        /**
         * Node Data Source Type
         * @type {string || null}
         */
        this.DataSourceType = null;

        /**
         * Node Description
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Description = null;

        /**
         * Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatasourceId = null;

        /**
         * Node Configuration Information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<RecordField> || null}
         */
        this.Config = null;

        /**
         * Node Extension Configuration Information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<RecordField> || null}
         */
        this.ExtConfig = null;

        /**
         * Node Schema
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<IntegrationNodeSchema> || null}
         */
        this.Schema = null;

        /**
         * Node Mapping
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {IntegrationNodeMapping || null}
         */
        this.NodeMapping = null;

        /**
         * owner uin
         * @type {string || null}
         */
        this.OwnerUin = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Name = 'Name' in params ? params.Name : null;
        this.NodeType = 'NodeType' in params ? params.NodeType : null;
        this.DataSourceType = 'DataSourceType' in params ? params.DataSourceType : null;
        this.Description = 'Description' in params ? params.Description : null;
        this.DatasourceId = 'DatasourceId' in params ? params.DatasourceId : null;

        if (params.Config) {
            this.Config = new Array();
            for (let z in params.Config) {
                let obj = new RecordField();
                obj.deserialize(params.Config[z]);
                this.Config.push(obj);
            }
        }

        if (params.ExtConfig) {
            this.ExtConfig = new Array();
            for (let z in params.ExtConfig) {
                let obj = new RecordField();
                obj.deserialize(params.ExtConfig[z]);
                this.ExtConfig.push(obj);
            }
        }

        if (params.Schema) {
            this.Schema = new Array();
            for (let z in params.Schema) {
                let obj = new IntegrationNodeSchema();
                obj.deserialize(params.Schema[z]);
                this.Schema.push(obj);
            }
        }

        if (params.NodeMapping) {
            let obj = new IntegrationNodeMapping();
            obj.deserialize(params.NodeMapping)
            this.NodeMapping = obj;
        }
        this.OwnerUin = 'OwnerUin' in params ? params.OwnerUin : null;

    }
}

/**
 * DescribeEvent response structure.
 * @class
 */
class DescribeEventResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * EventNote: This field may return null, indicating that no valid value can be obtained.
         * @type {EventOpsDto || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new EventOpsDto();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeOpsMakePlanInstances request structure.
 * @class
 */
class DescribeOpsMakePlanInstancesRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Supplemental Plan ID
         * @type {string || null}
         */
        this.PlanId = null;

        /**
         * Supplementary Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Page number, default value 1
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Page size, default value 10
         * @type {number || null}
         */
        this.PageSize = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.PlanId = 'PlanId' in params ? params.PlanId : null;
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;

    }
}

/**
 * GenHiveTableDDLSql request structure.
 * @class
 */
class GenHiveTableDDLSqlRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Target Database
         * @type {string || null}
         */
        this.SinkDatabase = null;

        /**
         * Node ID
         * @type {string || null}
         */
        this.Id = null;

        /**
         * Metadata Type (MYSQL,ORACLE)
         * @type {string || null}
         */
        this.MsType = null;

        /**
         * Data source ID
         * @type {string || null}
         */
        this.DatasourceId = null;

        /**
         * Source Library Name
         * @type {string || null}
         */
        this.SourceDatabase = null;

        /**
         * Source Table Name
         * @type {string || null}
         */
        this.TableName = null;

        /**
         * Target Table Metadata Type (HIVE,GBASE)
         * @type {string || null}
         */
        this.SinkType = null;

        /**
         * Source Schema Name
         * @type {string || null}
         */
        this.SchemaName = null;

        /**
         * Field Information of Upstream Node
         * @type {Array.<SourceFieldInfo> || null}
         */
        this.SourceFieldInfoList = null;

        /**
         * Partition Field
         * @type {Array.<Partition> || null}
         */
        this.Partitions = null;

        /**
         * Table Creation Attributes
         * @type {Array.<Property> || null}
         */
        this.Properties = null;

        /**
         * Table Creation Mode,0: Wizard Mode,1: ddl
         * @type {number || null}
         */
        this.TableMode = null;

        /**
         * DLC Table Version, v1/v2
         * @type {string || null}
         */
        this.TableVersion = null;

        /**
         * Whether to Upsert Writes
         * @type {boolean || null}
         */
        this.UpsertFlag = null;

        /**
         * Table Description Information
         * @type {string || null}
         */
        this.TableComment = null;

        /**
         * Threshold for Increased Number of Files, Exceeding Value Will Trigger Small File Merge
         * @type {number || null}
         */
        this.AddDataFiles = null;

        /**
         * Threshold for Increased Number of Equality Deletes, Exceeding Value Will Trigger Small File Merge
         * @type {number || null}
         */
        this.AddEqualityDeletes = null;

        /**
         * Threshold for Increased Number of Position Deletes, Exceeding Value Will Trigger Small File Merge
         * @type {number || null}
         */
        this.AddPositionDeletes = null;

        /**
         * Threshold for Increased Number of Delete Files
         * @type {number || null}
         */
        this.AddDeleteFiles = null;

        /**
         * Downstream Node Data Source ID
         * @type {string || null}
         */
        this.TargetDatasourceId = null;

        /**
         * DLC Upsert Primary Key
         * @type {Array.<string> || null}
         */
        this.UpsertKeys = null;

        /**
         * DLC Table Governance Information
         * @type {TableBaseInfo || null}
         */
        this.TableBaseInfo = null;

        /**
         * Target Schema Name
         * @type {string || null}
         */
        this.SinkSchemaName = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.SinkDatabase = 'SinkDatabase' in params ? params.SinkDatabase : null;
        this.Id = 'Id' in params ? params.Id : null;
        this.MsType = 'MsType' in params ? params.MsType : null;
        this.DatasourceId = 'DatasourceId' in params ? params.DatasourceId : null;
        this.SourceDatabase = 'SourceDatabase' in params ? params.SourceDatabase : null;
        this.TableName = 'TableName' in params ? params.TableName : null;
        this.SinkType = 'SinkType' in params ? params.SinkType : null;
        this.SchemaName = 'SchemaName' in params ? params.SchemaName : null;

        if (params.SourceFieldInfoList) {
            this.SourceFieldInfoList = new Array();
            for (let z in params.SourceFieldInfoList) {
                let obj = new SourceFieldInfo();
                obj.deserialize(params.SourceFieldInfoList[z]);
                this.SourceFieldInfoList.push(obj);
            }
        }

        if (params.Partitions) {
            this.Partitions = new Array();
            for (let z in params.Partitions) {
                let obj = new Partition();
                obj.deserialize(params.Partitions[z]);
                this.Partitions.push(obj);
            }
        }

        if (params.Properties) {
            this.Properties = new Array();
            for (let z in params.Properties) {
                let obj = new Property();
                obj.deserialize(params.Properties[z]);
                this.Properties.push(obj);
            }
        }
        this.TableMode = 'TableMode' in params ? params.TableMode : null;
        this.TableVersion = 'TableVersion' in params ? params.TableVersion : null;
        this.UpsertFlag = 'UpsertFlag' in params ? params.UpsertFlag : null;
        this.TableComment = 'TableComment' in params ? params.TableComment : null;
        this.AddDataFiles = 'AddDataFiles' in params ? params.AddDataFiles : null;
        this.AddEqualityDeletes = 'AddEqualityDeletes' in params ? params.AddEqualityDeletes : null;
        this.AddPositionDeletes = 'AddPositionDeletes' in params ? params.AddPositionDeletes : null;
        this.AddDeleteFiles = 'AddDeleteFiles' in params ? params.AddDeleteFiles : null;
        this.TargetDatasourceId = 'TargetDatasourceId' in params ? params.TargetDatasourceId : null;
        this.UpsertKeys = 'UpsertKeys' in params ? params.UpsertKeys : null;

        if (params.TableBaseInfo) {
            let obj = new TableBaseInfo();
            obj.deserialize(params.TableBaseInfo)
            this.TableBaseInfo = obj;
        }
        this.SinkSchemaName = 'SinkSchemaName' in params ? params.SinkSchemaName : null;

    }
}

/**
 * BatchCreateIntegrationTaskAlarms request structure.
 * @class
 */
class BatchCreateIntegrationTaskAlarmsRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID.
         * @type {Array.<string> || null}
         */
        this.TaskIds = null;

        /**
         * Alert Configuration Information
         * @type {TaskAlarmInfo || null}
         */
        this.TaskAlarmInfo = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskIds = 'TaskIds' in params ? params.TaskIds : null;

        if (params.TaskAlarmInfo) {
            let obj = new TaskAlarmInfo();
            obj.deserialize(params.TaskAlarmInfo)
            this.TaskAlarmInfo = obj;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * Quality Score
 * @class
 */
class QualityScore extends  AbstractModel {
    constructor(){
        super();

        /**
         * Composite Score
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.CompositeScore = null;

        /**
         * Score Distribution
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<TableScoreStatisticsInfo> || null}
         */
        this.ScoringDistribution = null;

        /**
         * Total Number of Tables
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalTableNumber = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.CompositeScore = 'CompositeScore' in params ? params.CompositeScore : null;

        if (params.ScoringDistribution) {
            this.ScoringDistribution = new Array();
            for (let z in params.ScoringDistribution) {
                let obj = new TableScoreStatisticsInfo();
                obj.deserialize(params.ScoringDistribution[z]);
                this.ScoringDistribution.push(obj);
            }
        }
        this.TotalTableNumber = 'TotalTableNumber' in params ? params.TotalTableNumber : null;

    }
}

/**
 * LockIntegrationTask response structure.
 * @class
 */
class LockIntegrationTaskResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Operation Success or Failure Indicator
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * KillScheduleInstances request structure.
 * @class
 */
class KillScheduleInstancesRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Instance List
         * @type {Array.<InstanceOpsDto> || null}
         */
        this.Instances = null;

        /**
         * Check Parent Task Type, true: Check parent task; false: Do not check parent task
         * @type {boolean || null}
         */
        this.CheckFather = null;

        /**
         * Rerun Type, 1: Self; 3: Child; 2: Self and Child
         * @type {string || null}
         */
        this.RerunType = null;

        /**
         * Instance Dependency Mode, 1: Self-dependent; 2: Task-dependent; 3: Self and Parent-Child dependent
         * @type {string || null}
         */
        this.DependentWay = null;

        /**
         * Rerun Ignore Event Listening or Not
         * @type {boolean || null}
         */
        this.SkipEventListening = null;

        /**
         * Downstream Instance Range 1: Within the workflow 2: Within the project 3: Across all workflows dependent on the project
         * @type {string || null}
         */
        this.SonInstanceType = null;

        /**
         * Query conditions
         * @type {InstanceApiOpsRequest || null}
         */
        this.SearchCondition = null;

        /**
         * Access type
         * @type {string || null}
         */
        this.OptType = null;

        /**
         * Operator Name
         * @type {string || null}
         */
        this.OperatorName = null;

        /**
         * Operator ID
         * @type {string || null}
         */
        this.OperatorId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Project Identifier
         * @type {string || null}
         */
        this.ProjectIdent = null;

        /**
         * Project name
         * @type {string || null}
         */
        this.ProjectName = null;

        /**
         * Index Page Number
         * @type {number || null}
         */
        this.PageIndex = null;

        /**
         * Page size
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Total Data
         * @type {number || null}
         */
        this.Count = null;

        /**
         * Basic Request Information
         * @type {ProjectBaseInfoOpsRequest || null}
         */
        this.RequestBaseInfo = null;

        /**
         * Whether to Calculate Total
         * @type {boolean || null}
         */
        this.IsCount = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Instances) {
            this.Instances = new Array();
            for (let z in params.Instances) {
                let obj = new InstanceOpsDto();
                obj.deserialize(params.Instances[z]);
                this.Instances.push(obj);
            }
        }
        this.CheckFather = 'CheckFather' in params ? params.CheckFather : null;
        this.RerunType = 'RerunType' in params ? params.RerunType : null;
        this.DependentWay = 'DependentWay' in params ? params.DependentWay : null;
        this.SkipEventListening = 'SkipEventListening' in params ? params.SkipEventListening : null;
        this.SonInstanceType = 'SonInstanceType' in params ? params.SonInstanceType : null;

        if (params.SearchCondition) {
            let obj = new InstanceApiOpsRequest();
            obj.deserialize(params.SearchCondition)
            this.SearchCondition = obj;
        }
        this.OptType = 'OptType' in params ? params.OptType : null;
        this.OperatorName = 'OperatorName' in params ? params.OperatorName : null;
        this.OperatorId = 'OperatorId' in params ? params.OperatorId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.ProjectIdent = 'ProjectIdent' in params ? params.ProjectIdent : null;
        this.ProjectName = 'ProjectName' in params ? params.ProjectName : null;
        this.PageIndex = 'PageIndex' in params ? params.PageIndex : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;
        this.Count = 'Count' in params ? params.Count : null;

        if (params.RequestBaseInfo) {
            let obj = new ProjectBaseInfoOpsRequest();
            obj.deserialize(params.RequestBaseInfo)
            this.RequestBaseInfo = obj;
        }
        this.IsCount = 'IsCount' in params ? params.IsCount : null;

    }
}

/**
 * Query Instance Criteria (new)
 * @class
 */
class SearchConditionNew extends  AbstractModel {
    constructor(){
        super();

        /**
         * Query Framework, required
         * @type {SearchConditionInstanceNew || null}
         */
        this.Instance = null;

        /**
         * Query keyword (Task ID exact match, Task Name fuzzy match), optional
         * @type {string || null}
         */
        this.Keyword = null;

        /**
         * Sorting Order (asc, desc)
         * @type {string || null}
         */
        this.Sort = null;

        /**
         * Sort Column (costTime Runtime duration, startTime Start Time, state Instance status, curRunDate Data Timestamp)
         * @type {string || null}
         */
        this.SortCol = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Instance) {
            let obj = new SearchConditionInstanceNew();
            obj.deserialize(params.Instance)
            this.Instance = obj;
        }
        this.Keyword = 'Keyword' in params ? params.Keyword : null;
        this.Sort = 'Sort' in params ? params.Sort : null;
        this.SortCol = 'SortCol' in params ? params.SortCol : null;

    }
}

/**
 * BatchStopOpsTasks request structure.
 * @class
 */
class BatchStopOpsTasksRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * TaskId for batch stop tasks
         * @type {Array.<string> || null}
         */
        this.TaskIdList = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Whether to terminate the generated instance
         * @type {boolean || null}
         */
        this.KillInstance = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskIdList = 'TaskIdList' in params ? params.TaskIdList : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.KillInstance = 'KillInstance' in params ? params.KillInstance : null;

    }
}

/**
 * DescribeFunctionTypes response structure.
 * @class
 */
class DescribeFunctionTypesResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * TypeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<FunctionTypeOrKind> || null}
         */
        this.Types = null;

        /**
         * Error messageNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ErrorMessage = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Types) {
            this.Types = new Array();
            for (let z in params.Types) {
                let obj = new FunctionTypeOrKind();
                obj.deserialize(params.Types[z]);
                this.Types.push(obj);
            }
        }
        this.ErrorMessage = 'ErrorMessage' in params ? params.ErrorMessage : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * ModifyRuleTemplate response structure.
 * @class
 */
class ModifyRuleTemplateResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Modification successful
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * BatchUpdateIntegrationTasks response structure.
 * @class
 */
class BatchUpdateIntegrationTasksResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Number of Successful Operations
         * @type {number || null}
         */
        this.SuccessCount = null;

        /**
         * Number of Failed Operations
         * @type {number || null}
         */
        this.FailedCount = null;

        /**
         * Total Number of Tasks
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.SuccessCount = 'SuccessCount' in params ? params.SuccessCount : null;
        this.FailedCount = 'FailedCount' in params ? params.FailedCount : null;
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * TaskLog response structure.
 * @class
 */
class TaskLogResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Detailed task logs
         * @type {Array.<LogContent> || null}
         */
        this.LogContentList = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.LogContentList) {
            this.LogContentList = new Array();
            for (let z in params.LogContentList) {
                let obj = new LogContent();
                obj.deserialize(params.LogContentList[z]);
                this.LogContentList.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DataInLong - Alarm do-not-disturb time
 * @class
 */
class QuietPeriod extends  AbstractModel {
    constructor(){
        super();

        /**
         * Represents the days of the week, 1 for Monday, 7 for Sunday, and so on
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<number> || null}
         */
        this.DaysOfWeek = null;

        /**
         * Start TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * End timeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EndTime = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.DaysOfWeek = 'DaysOfWeek' in params ? params.DaysOfWeek : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;

    }
}

/**
 * Subtask records
 * @class
 */
class AdhocDetail extends  AbstractModel {
    constructor(){
        super();

        /**
         * Subtask record Id
         * @type {number || null}
         */
        this.Id = null;

        /**
         * Script Content
         * @type {string || null}
         */
        this.ScriptContent = null;

        /**
         * Task start time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * Task termination time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EndTime = null;

        /**
         * Current Task Status
         * @type {string || null}
         */
        this.Status = null;

        /**
         * Submit Task ID
         * @type {number || null}
         */
        this.RecordId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Id = 'Id' in params ? params.Id : null;
        this.ScriptContent = 'ScriptContent' in params ? params.ScriptContent : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;
        this.Status = 'Status' in params ? params.Status : null;
        this.RecordId = 'RecordId' in params ? params.RecordId : null;

    }
}

/**
 * DescribeInstanceLastLog request structure.
 * @class
 */
class DescribeInstanceLastLogRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Data Timestamp
         * @type {string || null}
         */
        this.CurRunDate = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.CurRunDate = 'CurRunDate' in params ? params.CurRunDate : null;

    }
}

/**
 * DescribeEvent request structure.
 * @class
 */
class DescribeEventRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Event name
         * @type {string || null}
         */
        this.EventName = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.EventName = 'EventName' in params ? params.EventName : null;

    }
}

/**
 * Table Quality Scoring Pagination Results
 * @class
 */
class TableQualityDetailPage extends  AbstractModel {
    constructor(){
        super();

        /**
         * Total number of items
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * Table Quality List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<TableQualityDetail> || null}
         */
        this.Items = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;

        if (params.Items) {
            this.Items = new Array();
            for (let z in params.Items) {
                let obj = new TableQualityDetail();
                obj.deserialize(params.Items[z]);
                this.Items.push(obj);
            }
        }

    }
}

/**
 * Basic Information of Task Type
 * @class
 */
class TaskTypeOpsDto extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task Type Description
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TypeDesc = null;

        /**
         * Task Type ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TypeId = null;

        /**
         * Task Type Categorization
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TypeSort = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TypeDesc = 'TypeDesc' in params ? params.TypeDesc : null;
        this.TypeId = 'TypeId' in params ? params.TypeId : null;
        this.TypeSort = 'TypeSort' in params ? params.TypeSort : null;

    }
}

/**
 * BatchModifyOpsOwners response structure.
 * @class
 */
class BatchModifyOpsOwnersResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Return the number of successful batch operations, the number of failures, and the total number of operations
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {BatchOperationOpsDto || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new BatchOperationOpsDto();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * CreateTaskAlarmRegular response structure.
 * @class
 */
class CreateTaskAlarmRegularResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Alert ID
         * @type {number || null}
         */
        this.AlarmId = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.AlarmId = 'AlarmId' in params ? params.AlarmId : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DeleteRuleTemplate request structure.
 * @class
 */
class DeleteRuleTemplateRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Template ID List
         * @type {Array.<number> || null}
         */
        this.Ids = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.Ids = 'Ids' in params ? params.Ids : null;

    }
}

/**
 * DescribeOpsMakePlanTasks request structure.
 * @class
 */
class DescribeOpsMakePlanTasksRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Supplemental Plan ID
         * @type {string || null}
         */
        this.PlanId = null;

        /**
         * Page number, default value 1
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Page size, default value 10
         * @type {number || null}
         */
        this.PageSize = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.PlanId = 'PlanId' in params ? params.PlanId : null;
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;

    }
}

/**
 * Task Instance Basic Information
 * @class
 */
class TaskVersionInstance extends  AbstractModel {
    constructor(){
        super();

        /**
         * Instance Version Number
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.InstanceVersion = null;

        /**
         * Instance Description
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.VersionDesc = null;

        /**
         * 0, "Add",1, "Modify"
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.ChangeType = null;

        /**
         * Version Submitter UIN
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.SubmitterUin = null;

        /**
         * Submission Date
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InstanceDate = null;

        /**
         * 0, "Disabled",1, "Enabled (Production)"
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.InstanceStatus = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.InstanceVersion = 'InstanceVersion' in params ? params.InstanceVersion : null;
        this.VersionDesc = 'VersionDesc' in params ? params.VersionDesc : null;
        this.ChangeType = 'ChangeType' in params ? params.ChangeType : null;
        this.SubmitterUin = 'SubmitterUin' in params ? params.SubmitterUin : null;
        this.InstanceDate = 'InstanceDate' in params ? params.InstanceDate : null;
        this.InstanceStatus = 'InstanceStatus' in params ? params.InstanceStatus : null;

    }
}

/**
 * Metadata Table Details
 * @class
 */
class TableInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Table ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableId = null;

        /**
         * Table Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableName = null;

        /**
         * Table databaseName
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.OriginDatabaseName = null;

        /**
         * Table schemaName
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.OriginSchemaName = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TableId = 'TableId' in params ? params.TableId : null;
        this.TableName = 'TableName' in params ? params.TableName : null;
        this.OriginDatabaseName = 'OriginDatabaseName' in params ? params.OriginDatabaseName : null;
        this.OriginSchemaName = 'OriginSchemaName' in params ? params.OriginSchemaName : null;

    }
}

/**
 * DescribeProject request structure.
 * @class
 */
class DescribeProjectRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID. It is common to use the Project ID for queries, and either this or projectName must be present.
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Whether to Display Associated Cluster Information
         * @type {boolean || null}
         */
        this.DescribeClusters = null;

        /**
         * Whether to Display Information of Associated Execution Group, only partial information.
         * @type {boolean || null}
         */
        this.DescribeExecutors = null;

        /**
         * Default not to display project administrator information
         * @type {boolean || null}
         */
        this.DescribeAdminUsers = null;

        /**
         * Default not to count the number of project personnel
         * @type {boolean || null}
         */
        this.DescribeMemberCount = null;

        /**
         * Default not to query creator's information
         * @type {boolean || null}
         */
        this.DescribeCreator = null;

        /**
         * The project name is unique within a tenant, generally used for conversion to Project ID.
         * @type {string || null}
         */
        this.ProjectName = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.DescribeClusters = 'DescribeClusters' in params ? params.DescribeClusters : null;
        this.DescribeExecutors = 'DescribeExecutors' in params ? params.DescribeExecutors : null;
        this.DescribeAdminUsers = 'DescribeAdminUsers' in params ? params.DescribeAdminUsers : null;
        this.DescribeMemberCount = 'DescribeMemberCount' in params ? params.DescribeMemberCount : null;
        this.DescribeCreator = 'DescribeCreator' in params ? params.DescribeCreator : null;
        this.ProjectName = 'ProjectName' in params ? params.ProjectName : null;

    }
}

/**
 * GetTaskInstance response structure.
 * @class
 */
class GetTaskInstanceResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Details of scheduling an instance.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {InstanceDetailVO || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new InstanceDetailVO();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * CreateIntegrationTask response structure.
 * @class
 */
class CreateIntegrationTaskResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeIntegrationTasks response structure.
 * @class
 */
class DescribeIntegrationTasksResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ListNote: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<IntegrationTaskInfo> || null}
         */
        this.TaskInfoSet = null;

        /**
         * Total Number of Tasks
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.TaskInfoSet) {
            this.TaskInfoSet = new Array();
            for (let z in params.TaskInfoSet) {
                let obj = new IntegrationTaskInfo();
                obj.deserialize(params.TaskInfoSet[z]);
                this.TaskInfoSet.push(obj);
            }
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DeleteProjectUsers response structure.
 * @class
 */
class DeleteProjectUsersResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeAlarmReceiver request structure.
 * @class
 */
class DescribeAlarmReceiverRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Alert ID
         * @type {string || null}
         */
        this.AlarmId = null;

        /**
         * Current Page
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Number of records per page
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Type
         * @type {number || null}
         */
        this.TaskType = null;

        /**
         * Alarm Recipient ID (comma-separated)
         * @type {string || null}
         */
        this.AlarmRecipient = null;

        /**
         * Name of alarm recipient (comma-separated)
         * @type {string || null}
         */
        this.AlarmRecipientName = null;

        /**
         * Alarm Time
         * @type {string || null}
         */
        this.AlarmTime = null;

        /**
         * Message ID
         * @type {string || null}
         */
        this.MessageId = null;

        /**
         * Alert Record ID
         * @type {number || null}
         */
        this.RecordId = null;

        /**
         * Monitored Object Type (1: All Tasks, 2: Assigned Task, 3: Designated Responsible Person, 4: Specified Resource Group)
         * @type {number || null}
         */
        this.MonitorType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.AlarmId = 'AlarmId' in params ? params.AlarmId : null;
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.TaskType = 'TaskType' in params ? params.TaskType : null;
        this.AlarmRecipient = 'AlarmRecipient' in params ? params.AlarmRecipient : null;
        this.AlarmRecipientName = 'AlarmRecipientName' in params ? params.AlarmRecipientName : null;
        this.AlarmTime = 'AlarmTime' in params ? params.AlarmTime : null;
        this.MessageId = 'MessageId' in params ? params.MessageId : null;
        this.RecordId = 'RecordId' in params ? params.RecordId : null;
        this.MonitorType = 'MonitorType' in params ? params.MonitorType : null;

    }
}

/**
 * Scheduling running instance entity.
 * @class
 */
class InstanceVO extends  AbstractModel {
    constructor(){
        super();

        /**
         * Unique identifier of an instance.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.InstanceKey = null;

        /**
         * Project ID.

Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Folder ID.

Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.FolderId = null;

        /**
         * Folder name.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.FolderName = null;

        /**
         * Workflow ID.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.WorkflowId = null;

        /**
         * Workflow name.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.WorkflowName = null;

        /**
         * Responsible person list.

Note: This field may return null, indicating that no valid values can be obtained.
         * @type {Array.<string> || null}
         */
        this.InChargeList = null;

        /**
         * Task ID

Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Task Name

Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.TaskName = null;

        /**
         * Task type

Note: This field may return null, indicating that no valid values can be obtained.
         * @type {TaskTypeOpsDto || null}
         */
        this.TaskType = null;

        /**
         * Task cycle type.
Supports filtering multiple conditions with an or relationship between them.
* O: ONEOFF_CYCLE
* Y: YEAR_CYCLE
* M: MONTH_CYCLE
* W: WEEK_CYCLE
* D: DAY_CYCLE
* H: HOUR_CYCLE
* I: MINUTE_CYCLE
* C: CRONTAB_CYCLE
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.TaskCycleType = null;

        /**
         * Standard data time.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.CurRunDate = null;

        /**
         * Specifies the limit on the number of retries issued each time a running failure occurs.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.TryLimit = null;

        /**
         * Number of retries after failure.
Will be reset to 0 and then recounted when triggered for execution by once again manually rerunning or using a supplementary entry instance and other methods.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.Tries = null;

        /**
         * Cumulative running times.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.TotalRunNum = null;

        /**
         * Instance type.

-0 indicates the supplementary entry type.
-1 indicates a periodic instance.
-2 indicates a non-periodic instance.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.InstanceType = null;

        /**
         * Indicates the status of an instance.

-Indicates waiting for event.
-[12] indicates waiting for upstream.
-[6, 7, 9, 10, 18] indicates awaiting execution.
-[1, 19, 22]: running.
-[21] indicates skipping running.
-[3] indicates retry on failure.
-[8, 4, 5, 13] indicates a failure.
-[2] indicates a success.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.InstanceState = null;

        /**
         * Start time.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * Operation completion time.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.EndTime = null;

        /**
         * Time spent.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.CostTime = null;

        /**
         * Planned scheduling time.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.SchedulerTime = null;

        /**
         * Execution resource group ID.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.ExecutorGroupId = null;

        /**
         * Resource group name

Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.ExecutorGroupName = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.InstanceKey = 'InstanceKey' in params ? params.InstanceKey : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.FolderId = 'FolderId' in params ? params.FolderId : null;
        this.FolderName = 'FolderName' in params ? params.FolderName : null;
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;
        this.WorkflowName = 'WorkflowName' in params ? params.WorkflowName : null;
        this.InChargeList = 'InChargeList' in params ? params.InChargeList : null;
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.TaskName = 'TaskName' in params ? params.TaskName : null;

        if (params.TaskType) {
            let obj = new TaskTypeOpsDto();
            obj.deserialize(params.TaskType)
            this.TaskType = obj;
        }
        this.TaskCycleType = 'TaskCycleType' in params ? params.TaskCycleType : null;
        this.CurRunDate = 'CurRunDate' in params ? params.CurRunDate : null;
        this.TryLimit = 'TryLimit' in params ? params.TryLimit : null;
        this.Tries = 'Tries' in params ? params.Tries : null;
        this.TotalRunNum = 'TotalRunNum' in params ? params.TotalRunNum : null;
        this.InstanceType = 'InstanceType' in params ? params.InstanceType : null;
        this.InstanceState = 'InstanceState' in params ? params.InstanceState : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;
        this.CostTime = 'CostTime' in params ? params.CostTime : null;
        this.SchedulerTime = 'SchedulerTime' in params ? params.SchedulerTime : null;
        this.ExecutorGroupId = 'ExecutorGroupId' in params ? params.ExecutorGroupId : null;
        this.ExecutorGroupName = 'ExecutorGroupName' in params ? params.ExecutorGroupName : null;

    }
}

/**
 * Integrate Offline Task Instance Information
 * @class
 */
class SchedulerTaskInstanceInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Instance Running Time
         * @type {string || null}
         */
        this.CurRunDate = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.CurRunDate = 'CurRunDate' in params ? params.CurRunDate : null;

    }
}

/**
 * DescribeSchedulerTaskCntByStatus response structure.
 * @class
 */
class DescribeSchedulerTaskCntByStatusResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Statistical Results
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<ScreenTaskInfo> || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            this.Data = new Array();
            for (let z in params.Data) {
                let obj = new ScreenTaskInfo();
                obj.deserialize(params.Data[z]);
                this.Data.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Task Extension Information
 * @class
 */
class TaskExtInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Key
         * @type {string || null}
         */
        this.Key = null;

        /**
         * Value
         * @type {string || null}
         */
        this.Value = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Key = 'Key' in params ? params.Key : null;
        this.Value = 'Value' in params ? params.Value : null;

    }
}

/**
 * ModifyWorkflowInfo request structure.
 * @class
 */
class ModifyWorkflowInfoRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Workflow ID
         * @type {string || null}
         */
        this.WorkflowId = null;

        /**
         * Person in Charge
         * @type {string || null}
         */
        this.Owner = null;

        /**
         * Responsible Person ID
         * @type {string || null}
         */
        this.OwnerId = null;

        /**
         * Remarks
         * @type {string || null}
         */
        this.WorkflowDesc = null;

        /**
         * Workflow name
         * @type {string || null}
         */
        this.WorkflowName = null;

        /**
         * Parent Folder ID
         * @type {string || null}
         */
        this.FolderId = null;

        /**
         * Workflow User Group ID If multiple, separated by semicolons: a;b;c
         * @type {string || null}
         */
        this.UserGroupId = null;

        /**
         * Workflow User Group Name If multiple, separated by semicolons: a;b;c
         * @type {string || null}
         */
        this.UserGroupName = null;

        /**
         * Workflow Parameter List
         * @type {Array.<ParamInfo> || null}
         */
        this.WorkflowParams = null;

        /**
         * Used to configure optimized parameters (Thread, Memory, CPU Core Count, etc.), applicable only to Spark SQL Node. Separate multiple parameters with English semicolons.
         * @type {Array.<GeneralTaskParam> || null}
         */
        this.GeneralTaskParams = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;
        this.Owner = 'Owner' in params ? params.Owner : null;
        this.OwnerId = 'OwnerId' in params ? params.OwnerId : null;
        this.WorkflowDesc = 'WorkflowDesc' in params ? params.WorkflowDesc : null;
        this.WorkflowName = 'WorkflowName' in params ? params.WorkflowName : null;
        this.FolderId = 'FolderId' in params ? params.FolderId : null;
        this.UserGroupId = 'UserGroupId' in params ? params.UserGroupId : null;
        this.UserGroupName = 'UserGroupName' in params ? params.UserGroupName : null;

        if (params.WorkflowParams) {
            this.WorkflowParams = new Array();
            for (let z in params.WorkflowParams) {
                let obj = new ParamInfo();
                obj.deserialize(params.WorkflowParams[z]);
                this.WorkflowParams.push(obj);
            }
        }

        if (params.GeneralTaskParams) {
            this.GeneralTaskParams = new Array();
            for (let z in params.GeneralTaskParams) {
                let obj = new GeneralTaskParam();
                obj.deserialize(params.GeneralTaskParams[z]);
                this.GeneralTaskParams.push(obj);
            }
        }

    }
}

/**
 * Supplemental Plan
 * @class
 */
class MakePlanOpsDto extends  AbstractModel {
    constructor(){
        super();

        /**
         * Supplement Plan ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.PlanId = null;

        /**
         * Supplement Plan Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.MakeName = null;

        /**
         * Project ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Check Parent Task Status for Supplement
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.CheckParent = null;

        /**
         * Use Original Task Self-Dependency Configuration
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.SameSelfDependType = null;

        /**
         * Concurrency, effective when SameSelfDependType is false
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.ParallelNum = null;

        /**
         * Modify Supplement Instance Generation Period
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.SameCycle = null;

        /**
         * Scheduling Cycle Conversion Method - Original Cycle Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.SourceTaskCycle = null;

        /**
         * Scheduling Cycle Conversion Method - Target Cycle Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TargetTaskCycle = null;

        /**
         * Scheduling Cycle Conversion Method - Specific Time for Target Cycle Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TargetTaskAction = null;

        /**
         * Supplement Instance From Definition Parameters
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<StrToStrMap> || null}
         */
        this.MapParamList = null;

        /**
         * Creator ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreatorId = null;

        /**
         * Creator
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Creator = null;

        /**
         * Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreateTime = null;

        /**
         * Supplementary Task ID Collection
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<string> || null}
         */
        this.TaskIdList = null;

        /**
         * Supplementary Plan Date Range
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<CreateMakeDatetimeInfo> || null}
         */
        this.MakeDatetimeList = null;

        /**
         * Supplementary Plan Description
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Remark = null;

        /**
         * Supplementary Designated Scheduling Resource Group (ID)
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.SchedulerResourceGroup = null;

        /**
         * Supplementary Scheduled Resource Group Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.SchedulerResourceGroupName = null;

        /**
         * Supplementary Designated Integration Resource Group (ID)
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.IntegrationResourceGroup = null;

        /**
         * Supplementary Integrated Resource Group Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.IntegrationResourceGroupName = null;

        /**
         * Number of Supplementary Plan Tasks
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TaskCount = null;

        /**
         * Percentage of Supplementary Plan Instances Completed
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.CompletePercent = null;

        /**
         * Percentage of Supplementary Plan Instances Successful
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.SuccessPercent = null;

        /**
         * Check Parent Task Type for Supplementary. Value range:
<li> NONE: Do not check any </li>
<li> ALL: Check all upstream parent tasks </li>
<li> MAKE_SCOPE: Check only within the selected tasks of (the current supplementary plan) </li>
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CheckParentType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.PlanId = 'PlanId' in params ? params.PlanId : null;
        this.MakeName = 'MakeName' in params ? params.MakeName : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.CheckParent = 'CheckParent' in params ? params.CheckParent : null;
        this.SameSelfDependType = 'SameSelfDependType' in params ? params.SameSelfDependType : null;
        this.ParallelNum = 'ParallelNum' in params ? params.ParallelNum : null;
        this.SameCycle = 'SameCycle' in params ? params.SameCycle : null;
        this.SourceTaskCycle = 'SourceTaskCycle' in params ? params.SourceTaskCycle : null;
        this.TargetTaskCycle = 'TargetTaskCycle' in params ? params.TargetTaskCycle : null;
        this.TargetTaskAction = 'TargetTaskAction' in params ? params.TargetTaskAction : null;

        if (params.MapParamList) {
            this.MapParamList = new Array();
            for (let z in params.MapParamList) {
                let obj = new StrToStrMap();
                obj.deserialize(params.MapParamList[z]);
                this.MapParamList.push(obj);
            }
        }
        this.CreatorId = 'CreatorId' in params ? params.CreatorId : null;
        this.Creator = 'Creator' in params ? params.Creator : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;
        this.TaskIdList = 'TaskIdList' in params ? params.TaskIdList : null;

        if (params.MakeDatetimeList) {
            this.MakeDatetimeList = new Array();
            for (let z in params.MakeDatetimeList) {
                let obj = new CreateMakeDatetimeInfo();
                obj.deserialize(params.MakeDatetimeList[z]);
                this.MakeDatetimeList.push(obj);
            }
        }
        this.Remark = 'Remark' in params ? params.Remark : null;
        this.SchedulerResourceGroup = 'SchedulerResourceGroup' in params ? params.SchedulerResourceGroup : null;
        this.SchedulerResourceGroupName = 'SchedulerResourceGroupName' in params ? params.SchedulerResourceGroupName : null;
        this.IntegrationResourceGroup = 'IntegrationResourceGroup' in params ? params.IntegrationResourceGroup : null;
        this.IntegrationResourceGroupName = 'IntegrationResourceGroupName' in params ? params.IntegrationResourceGroupName : null;
        this.TaskCount = 'TaskCount' in params ? params.TaskCount : null;
        this.CompletePercent = 'CompletePercent' in params ? params.CompletePercent : null;
        this.SuccessPercent = 'SuccessPercent' in params ? params.SuccessPercent : null;
        this.CheckParentType = 'CheckParentType' in params ? params.CheckParentType : null;

    }
}

/**
 * Submit Workflow Entity
 * @class
 */
class SubmitWorkflow extends  AbstractModel {
    constructor(){
        super();

        /**
         * Submitted Task ID Collection
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<string> || null}
         */
        this.TaskIds = null;

        /**
         * Execution Result
         * @type {boolean || null}
         */
        this.Result = null;

        /**
         * Execution Status Remarks
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ErrorDesc = null;

        /**
         * Execution Status ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ErrorId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskIds = 'TaskIds' in params ? params.TaskIds : null;
        this.Result = 'Result' in params ? params.Result : null;
        this.ErrorDesc = 'ErrorDesc' in params ? params.ErrorDesc : null;
        this.ErrorId = 'ErrorId' in params ? params.ErrorId : null;

    }
}

/**
 * BatchResumeIntegrationTasks request structure.
 * @class
 */
class BatchResumeIntegrationTasksRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {Array.<string> || null}
         */
        this.TaskIds = null;

        /**
         * Task Type, 201 for Real-time Task, 202 for Offline Task
         * @type {number || null}
         */
        this.TaskType = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskIds = 'TaskIds' in params ? params.TaskIds : null;
        this.TaskType = 'TaskType' in params ? params.TaskType : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * Operation Result
 * @class
 */
class OperationOpsDto extends  AbstractModel {
    constructor(){
        super();

        /**
         * Operation Success
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.Result = null;

        /**
         * Operation Result Details
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ResultMsg = null;

        /**
         * Operation Failure Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ErrorId = null;

        /**
         * Operation Failure Description
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ErrorDesc = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Result = 'Result' in params ? params.Result : null;
        this.ResultMsg = 'ResultMsg' in params ? params.ResultMsg : null;
        this.ErrorId = 'ErrorId' in params ? params.ErrorId : null;
        this.ErrorDesc = 'ErrorDesc' in params ? params.ErrorDesc : null;

    }
}

/**
 * DeleteTaskAlarmRegular response structure.
 * @class
 */
class DeleteTaskAlarmRegularResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Delete Result (true for success, false for failure)
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DeleteWorkflowById request structure.
 * @class
 */
class DeleteWorkflowByIdRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Workflow ID
         * @type {string || null}
         */
        this.WorkflowId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Handling method for downstream tasks after deletion, true: all downstream tasks run normally false: all downstream tasks fail
         * @type {boolean || null}
         */
        this.DeleteMode = null;

        /**
         * Notify downstream task owners after task deletion, true: notify false: do not notify
         * @type {boolean || null}
         */
        this.EnableNotify = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.DeleteMode = 'DeleteMode' in params ? params.DeleteMode : null;
        this.EnableNotify = 'EnableNotify' in params ? params.EnableNotify : null;

    }
}

/**
 * Basic Information
 * @class
 */
class ProjectBaseInfoOpsRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Project Identifier
         * @type {string || null}
         */
        this.ProjectIdent = null;

        /**
         * Project name
         * @type {string || null}
         */
        this.ProjectName = null;

        /**
         * Whether admin
         * @type {boolean || null}
         */
        this.IsAdmin = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.ProjectIdent = 'ProjectIdent' in params ? params.ProjectIdent : null;
        this.ProjectName = 'ProjectName' in params ? params.ProjectName : null;
        this.IsAdmin = 'IsAdmin' in params ? params.IsAdmin : null;

    }
}

/**
 * DeleteRule response structure.
 * @class
 */
class DeleteRuleResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Whether Deletion is Successful
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Supplementary Plan Task Collection
 * @class
 */
class MakePlanTaskOpsDtoCollection extends  AbstractModel {
    constructor(){
        super();

        /**
         * Total Record Count
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * Total Number of Pages
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalPage = null;

        /**
         * Number of Records on Current Page
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.PageCount = null;

        /**
         * Page Number
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Page Size
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Record List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<MakePlanTaskOpsDto> || null}
         */
        this.Items = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.TotalPage = 'TotalPage' in params ? params.TotalPage : null;
        this.PageCount = 'PageCount' in params ? params.PageCount : null;
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;

        if (params.Items) {
            this.Items = new Array();
            for (let z in params.Items) {
                let obj = new MakePlanTaskOpsDto();
                obj.deserialize(params.Items[z]);
                this.Items.push(obj);
            }
        }

    }
}

/**
 * Lineage Column Description
 * @class
 */
class SimpleColumnInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Column ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Id = null;

        /**
         * Qualified Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.QualifiedName = null;

        /**
         * Column nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ColumnName = null;

        /**
         * Column Chinese Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ColumnNameCn = null;

        /**
         * Column Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ColumnType = null;

        /**
         * Column Description
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Description = null;

        /**
         * Prefix Path
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.PrefixPath = null;

        /**
         * Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreateTime = null;

        /**
         * Modification TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ModifyTime = null;

        /**
         * Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatasourceId = null;

        /**
         * Downstream Quantity
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.DownStreamCount = null;

        /**
         * Upstream Quantity
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.UpStreamCount = null;

        /**
         * Relationship Parameters
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.RelationParams = null;

        /**
         * ParameterNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Params = null;

        /**
         * Task Collection
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<string> || null}
         */
        this.Tasks = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Id = 'Id' in params ? params.Id : null;
        this.QualifiedName = 'QualifiedName' in params ? params.QualifiedName : null;
        this.ColumnName = 'ColumnName' in params ? params.ColumnName : null;
        this.ColumnNameCn = 'ColumnNameCn' in params ? params.ColumnNameCn : null;
        this.ColumnType = 'ColumnType' in params ? params.ColumnType : null;
        this.Description = 'Description' in params ? params.Description : null;
        this.PrefixPath = 'PrefixPath' in params ? params.PrefixPath : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;
        this.ModifyTime = 'ModifyTime' in params ? params.ModifyTime : null;
        this.DatasourceId = 'DatasourceId' in params ? params.DatasourceId : null;
        this.DownStreamCount = 'DownStreamCount' in params ? params.DownStreamCount : null;
        this.UpStreamCount = 'UpStreamCount' in params ? params.UpStreamCount : null;
        this.RelationParams = 'RelationParams' in params ? params.RelationParams : null;
        this.Params = 'Params' in params ? params.Params : null;
        this.Tasks = 'Tasks' in params ? params.Tasks : null;

    }
}

/**
 * CreateWorkflowDs request structure.
 * @class
 */
class CreateWorkflowDsRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Workflow name
         * @type {string || null}
         */
        this.WorkflowName = null;

        /**
         * Folder ID
         * @type {string || null}
         */
        this.FolderId = null;

        /**
         * Workflow Description
         * @type {string || null}
         */
        this.WorkflowDesc = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.WorkflowName = 'WorkflowName' in params ? params.WorkflowName : null;
        this.FolderId = 'FolderId' in params ? params.FolderId : null;
        this.WorkflowDesc = 'WorkflowDesc' in params ? params.WorkflowDesc : null;

    }
}

/**
 * CreateTask response structure.
 * @class
 */
class CreateTaskResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Return Task ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {CommonId || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new CommonId();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Table Quality Details
 * @class
 */
class TableQualityDetail extends  AbstractModel {
    constructor(){
        super();

        /**
         * Database ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatabaseId = null;

        /**
         * Database nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatabaseName = null;

        /**
         * Table ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableId = null;

        /**
         * Table Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableName = null;

        /**
         * Table Owner ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.OwnerUserId = null;

        /**
         * Table Owner Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.OwnerUserName = null;

        /**
         * Database Score
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.DatabaseScore = null;

        /**
         * Table Score
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TableScore = null;

        /**
         * Table Month-over-Month Growth
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.LastPeriodRatio = null;

        /**
         * 0 or not returned or null: Undefined, 1: Production, 2: Development
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.DsEnvType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.DatabaseId = 'DatabaseId' in params ? params.DatabaseId : null;
        this.DatabaseName = 'DatabaseName' in params ? params.DatabaseName : null;
        this.TableId = 'TableId' in params ? params.TableId : null;
        this.TableName = 'TableName' in params ? params.TableName : null;
        this.OwnerUserId = 'OwnerUserId' in params ? params.OwnerUserId : null;
        this.OwnerUserName = 'OwnerUserName' in params ? params.OwnerUserName : null;
        this.DatabaseScore = 'DatabaseScore' in params ? params.DatabaseScore : null;
        this.TableScore = 'TableScore' in params ? params.TableScore : null;
        this.LastPeriodRatio = 'LastPeriodRatio' in params ? params.LastPeriodRatio : null;
        this.DsEnvType = 'DsEnvType' in params ? params.DsEnvType : null;

    }
}

/**
 * BatchStopIntegrationTasks response structure.
 * @class
 */
class BatchStopIntegrationTasksResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Number of Successful Operations
         * @type {number || null}
         */
        this.SuccessCount = null;

        /**
         * Number of Failed Operations
         * @type {number || null}
         */
        this.FailedCount = null;

        /**
         * Total Number of Tasks
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * Number of successful tasks involved in this batch operation, for auditing
         * @type {Array.<string> || null}
         */
        this.TaskNames = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.SuccessCount = 'SuccessCount' in params ? params.SuccessCount : null;
        this.FailedCount = 'FailedCount' in params ? params.FailedCount : null;
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.TaskNames = 'TaskNames' in params ? params.TaskNames : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeApproveTypeList request structure.
 * @class
 */
class DescribeApproveTypeListRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Type key
         * @type {string || null}
         */
        this.Classification = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Classification = 'Classification' in params ? params.Classification : null;

    }
}

/**
 * DeleteIntegrationNode response structure.
 * @class
 */
class DeleteIntegrationNodeResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Indication of whether the deletion was successful
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeDataSourceInfoList request structure.
 * @class
 */
class DescribeDataSourceInfoListRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Page Number
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Page number
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Filter condition (not supported yet)
         * @type {Filter || null}
         */
        this.Filters = null;

        /**
         * Sorting Configuration
         * @type {OrderField || null}
         */
        this.OrderFields = null;

        /**
         * Data Source Type, mandatory (e.g., MYSQL, DLC, etc.)
         * @type {string || null}
         */
        this.Type = null;

        /**
         * Data Source Name Filter
         * @type {string || null}
         */
        this.DatasourceName = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;

        if (params.Filters) {
            let obj = new Filter();
            obj.deserialize(params.Filters)
            this.Filters = obj;
        }

        if (params.OrderFields) {
            let obj = new OrderField();
            obj.deserialize(params.OrderFields)
            this.OrderFields = obj;
        }
        this.Type = 'Type' in params ? params.Type : null;
        this.DatasourceName = 'DatasourceName' in params ? params.DatasourceName : null;

    }
}

/**
 * DescribeIntegrationNode request structure.
 * @class
 */
class DescribeIntegrationNodeRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Node ID
         * @type {string || null}
         */
        this.Id = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Task Type, 201 for Real-time Task, 202 for Offline Task
         * @type {number || null}
         */
        this.TaskType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Id = 'Id' in params ? params.Id : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.TaskType = 'TaskType' in params ? params.TaskType : null;

    }
}

/**
 * SetTaskAlarmNew response structure.
 * @class
 */
class SetTaskAlarmNewResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Returns the number of successful batch operations, the number of failures, and the total number of operations
         * @type {BatchOperateResult || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new BatchOperateResult();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * GetOfflineDIInstanceList response structure.
 * @class
 */
class GetOfflineDIInstanceListResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Total number of items
         * @type {number || null}
         */
        this.Total = null;

        /**
         * Instance details
         * @type {Array.<OfflineInstance> || null}
         */
        this.List = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Total = 'Total' in params ? params.Total : null;

        if (params.List) {
            this.List = new Array();
            for (let z in params.List) {
                let obj = new OfflineInstance();
                obj.deserialize(params.List[z]);
                this.List.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeDatasource response structure.
 * @class
 */
class DescribeDatasourceResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Data Source Object
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {DataSourceInfo || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new DataSourceInfo();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeStatisticInstanceStatusTrendOps request structure.
 * @class
 */
class DescribeStatisticInstanceStatusTrendOpsRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Task Type Id
         * @type {string || null}
         */
        this.TaskTypeId = null;

        /**
         * Time Type
         * @type {string || null}
         */
        this.TimeType = null;

        /**
         * Task Type Name
         * @type {string || null}
         */
        this.TypeName = null;

        /**
         * Start Time
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * End time
         * @type {string || null}
         */
        this.EndTime = null;

        /**
         * Resource Group ID
         * @type {string || null}
         */
        this.ExecutionGroupId = null;

        /**
         * Resource Group Name
         * @type {string || null}
         */
        this.ExecutionGroupName = null;

        /**
         * 1
         * @type {string || null}
         */
        this.InCharge = null;

        /**
         * 1
         * @type {number || null}
         */
        this.TaskType = null;

        /**
         * 1
         * @type {Array.<number> || null}
         */
        this.StateList = null;

        /**
         * D represents days, H represents hours
         * @type {string || null}
         */
        this.AggregationUnit = null;

        /**
         * 1
         * @type {number || null}
         */
        this.AverageWindowSize = null;

        /**
         * Workflow ID
         * @type {string || null}
         */
        this.WorkflowId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.TaskTypeId = 'TaskTypeId' in params ? params.TaskTypeId : null;
        this.TimeType = 'TimeType' in params ? params.TimeType : null;
        this.TypeName = 'TypeName' in params ? params.TypeName : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;
        this.ExecutionGroupId = 'ExecutionGroupId' in params ? params.ExecutionGroupId : null;
        this.ExecutionGroupName = 'ExecutionGroupName' in params ? params.ExecutionGroupName : null;
        this.InCharge = 'InCharge' in params ? params.InCharge : null;
        this.TaskType = 'TaskType' in params ? params.TaskType : null;
        this.StateList = 'StateList' in params ? params.StateList : null;
        this.AggregationUnit = 'AggregationUnit' in params ? params.AggregationUnit : null;
        this.AverageWindowSize = 'AverageWindowSize' in params ? params.AverageWindowSize : null;
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;

    }
}

/**
 * Rule Execution Configuration
 * @class
 */
class RuleExecConfig extends  AbstractModel {
    constructor(){
        super();

        /**
         * Compute Queue Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.QueueName = null;

        /**
         * Execution Resource Group
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ExecutorGroupId = null;

        /**
         * The running execution engine, if not specified, the default execution engine under this data source will be requested
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EngineType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.QueueName = 'QueueName' in params ? params.QueueName : null;
        this.ExecutorGroupId = 'ExecutorGroupId' in params ? params.ExecutorGroupId : null;
        this.EngineType = 'EngineType' in params ? params.EngineType : null;

    }
}

/**
 * SuspendIntegrationTask response structure.
 * @class
 */
class SuspendIntegrationTaskResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Operation Success or Failure Indicator
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * ListInstances request structure.
 * @class
 */
class ListInstancesRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * **Project ID**.
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Instance plan scheduling time.
Filter start time. the time format is yyyy-MM-dd HH:MM:ss.
         * @type {string || null}
         */
        this.ScheduleTimeFrom = null;

        /**
         * Instance plan scheduling time.
Filter expiration time. time format: yyyy-MM-dd HH:MM:ss.
         * @type {string || null}
         */
        this.ScheduleTimeTo = null;

        /**
         * Page number, integer.
Use in conjunction with pageSize and cannot be less than 1. the default value is 1.
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Number of items per page, integer.
Use in conjunction with pageNumber and should not exceed 200. default value: 10.
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Field used to sort query results.

-SCHEDULE_DATE indicates the planned scheduling time.
-START_TIME indicates the start execution time of an instance.
-END_TIME indicates the execution end time of the instance.
-COST_TIME indicates the execution duration of an instance.
         * @type {string || null}
         */
        this.SortColumn = null;

        /**
         * Instance sorting order.

- ASC 
- DESC
         * @type {string || null}
         */
        this.SortType = null;

        /**
         * Instance type.

-0 indicates the supplementary entry type.
-1 indicates a periodic instance.
-2 indicates a non-periodic instance.
         * @type {number || null}
         */
        this.InstanceType = null;

        /**
         * Instance execution status.
Support filtering multiple items with an "or" relationship between conditions.

-Indicates waiting for event.
-[12] indicates waiting for upstream.
-[6, 7, 9, 10, 18] indicates awaiting execution.
-1, 19, 22 indicate running.
-[21] indicates skipping running.
-[3] indicates retry on failure.
-[8, 4, 5, 13] indicates a failure.
-[2] indicates a success.
         * @type {Array.<number> || null}
         */
        this.InstanceStateList = null;

        /**
         * **Task type Id** specifies the identifier for the task type.

-Supports filtering multiple items with an or relationship between conditions.
-You can use the DescribeAllTaskType API to obtain all task types supported by the project.
         * @type {Array.<number> || null}
         */
        this.TaskTypeIdList = null;

        /**
         * Task cycle type.
Supports filtering multiple conditions with an or relationship between them.
* O: ONEOFF_CYCLE
* Y: YEAR_CYCLE
* M: MONTH_CYCLE
* W: WEEK_CYCLE
* D: DAY_CYCLE
* H: HOUR_CYCLE
* I: MINUTE_CYCLE
* C: CRONTAB_CYCLE
         * @type {Array.<string> || null}
         */
        this.TaskCycleList = null;

        /**
         * Task name or task ID.
Supports fuzzy search filtering. multiple items are separated by english commas.
         * @type {string || null}
         */
        this.Keyword = null;

        /**
         * Task owner.
Support filtering multiple items with an or relationship between conditions.
         * @type {Array.<string> || null}
         */
        this.InChargeList = null;

        /**
         * File to which the task belongs.
Supports filtering multiple conditions with an or relationship between them.
The FindAllFolder API can be used to obtain the folder list under a project.
         * @type {Array.<string> || null}
         */
        this.TaskFolderIdList = null;

        /**
         * **Associated workflow of the task**.
Supports filtering multiple conditions with an or relationship between them.
The workflow list under a project can be obtained through the DescribeOpsWorkflows api.
         * @type {Array.<string> || null}
         */
        this.WorkflowIdList = null;

        /**
         * Execution resource group Id.
Supports filtering multiple conditions with an or relationship between them.
The scheduling resource group list under the project can be obtained through the DescribeNormalSchedulerExecutorGroups api.
The DescribeNormalIntegrationExecutorGroups API can be used to obtain the list of all integration resource groups under a project.
         * @type {Array.<string> || null}
         */
        this.ExecutorGroupIdList = null;

        /**
         * **Start time**.
Filter start time. the time format is yyyy-MM-dd HH:MM:ss.
         * @type {string || null}
         */
        this.StartTimeFrom = null;

        /**
         * **Start time**.
Filter expiration time. time format: yyyy-MM-dd HH:MM:ss.
         * @type {string || null}
         */
        this.StartTimeTo = null;

        /**
         * Time zone.
Time zone. specifies the time zone. the default value is UTC+8.
         * @type {string || null}
         */
        this.ScheduleTimeZone = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.ScheduleTimeFrom = 'ScheduleTimeFrom' in params ? params.ScheduleTimeFrom : null;
        this.ScheduleTimeTo = 'ScheduleTimeTo' in params ? params.ScheduleTimeTo : null;
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;
        this.SortColumn = 'SortColumn' in params ? params.SortColumn : null;
        this.SortType = 'SortType' in params ? params.SortType : null;
        this.InstanceType = 'InstanceType' in params ? params.InstanceType : null;
        this.InstanceStateList = 'InstanceStateList' in params ? params.InstanceStateList : null;
        this.TaskTypeIdList = 'TaskTypeIdList' in params ? params.TaskTypeIdList : null;
        this.TaskCycleList = 'TaskCycleList' in params ? params.TaskCycleList : null;
        this.Keyword = 'Keyword' in params ? params.Keyword : null;
        this.InChargeList = 'InChargeList' in params ? params.InChargeList : null;
        this.TaskFolderIdList = 'TaskFolderIdList' in params ? params.TaskFolderIdList : null;
        this.WorkflowIdList = 'WorkflowIdList' in params ? params.WorkflowIdList : null;
        this.ExecutorGroupIdList = 'ExecutorGroupIdList' in params ? params.ExecutorGroupIdList : null;
        this.StartTimeFrom = 'StartTimeFrom' in params ? params.StartTimeFrom : null;
        this.StartTimeTo = 'StartTimeTo' in params ? params.StartTimeTo : null;
        this.ScheduleTimeZone = 'ScheduleTimeZone' in params ? params.ScheduleTimeZone : null;

    }
}

/**
 * DescribeSchedulerRunTimeInstanceCntByStatus response structure.
 * @class
 */
class DescribeSchedulerRunTimeInstanceCntByStatusResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Response Data
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<RuntimeInstanceCntTop> || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            this.Data = new Array();
            for (let z in params.Data) {
                let obj = new RuntimeInstanceCntTop();
                obj.deserialize(params.Data[z]);
                this.Data.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * CreateTaskFolder response structure.
 * @class
 */
class CreateTaskFolderResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task Folder ID, null if creation failed
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * RunForceSucScheduleInstances request structure.
 * @class
 */
class RunForceSucScheduleInstancesRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Instance List
         * @type {Array.<InstanceOpsDto> || null}
         */
        this.Instances = null;

        /**
         * Check Parent Task Type, true: Check parent task; false: Do not check parent task
         * @type {boolean || null}
         */
        this.CheckFather = null;

        /**
         * Rerun Type, 1: Self; 3: Child; 2: Self and Child
         * @type {string || null}
         */
        this.RerunType = null;

        /**
         * Instance Dependency Mode, 1: Self-dependent; 2: Task-dependent; 3: Self and Parent-Child dependent
         * @type {string || null}
         */
        this.DependentWay = null;

        /**
         * Rerun Ignore Event Listening or Not
         * @type {boolean || null}
         */
        this.SkipEventListening = null;

        /**
         * Downstream Instance Range 1: Within the workflow 2: Within the project 3: Across all workflows dependent on the project
         * @type {string || null}
         */
        this.SonInstanceType = null;

        /**
         * Query conditions
         * @type {InstanceApiOpsRequest || null}
         */
        this.SearchCondition = null;

        /**
         * Access type
         * @type {string || null}
         */
        this.OptType = null;

        /**
         * Operator Name
         * @type {string || null}
         */
        this.OperatorName = null;

        /**
         * Operator ID
         * @type {string || null}
         */
        this.OperatorId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Project Identifier
         * @type {string || null}
         */
        this.ProjectIdent = null;

        /**
         * Project name
         * @type {string || null}
         */
        this.ProjectName = null;

        /**
         * Index Page Number
         * @type {number || null}
         */
        this.PageIndex = null;

        /**
         * Page size
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Total Data
         * @type {number || null}
         */
        this.Count = null;

        /**
         * Basic Request Information
         * @type {ProjectBaseInfoOpsRequest || null}
         */
        this.RequestBaseInfo = null;

        /**
         * Whether to Calculate Total
         * @type {boolean || null}
         */
        this.IsCount = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Instances) {
            this.Instances = new Array();
            for (let z in params.Instances) {
                let obj = new InstanceOpsDto();
                obj.deserialize(params.Instances[z]);
                this.Instances.push(obj);
            }
        }
        this.CheckFather = 'CheckFather' in params ? params.CheckFather : null;
        this.RerunType = 'RerunType' in params ? params.RerunType : null;
        this.DependentWay = 'DependentWay' in params ? params.DependentWay : null;
        this.SkipEventListening = 'SkipEventListening' in params ? params.SkipEventListening : null;
        this.SonInstanceType = 'SonInstanceType' in params ? params.SonInstanceType : null;

        if (params.SearchCondition) {
            let obj = new InstanceApiOpsRequest();
            obj.deserialize(params.SearchCondition)
            this.SearchCondition = obj;
        }
        this.OptType = 'OptType' in params ? params.OptType : null;
        this.OperatorName = 'OperatorName' in params ? params.OperatorName : null;
        this.OperatorId = 'OperatorId' in params ? params.OperatorId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.ProjectIdent = 'ProjectIdent' in params ? params.ProjectIdent : null;
        this.ProjectName = 'ProjectName' in params ? params.ProjectName : null;
        this.PageIndex = 'PageIndex' in params ? params.PageIndex : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;
        this.Count = 'Count' in params ? params.Count : null;

        if (params.RequestBaseInfo) {
            let obj = new ProjectBaseInfoOpsRequest();
            obj.deserialize(params.RequestBaseInfo)
            this.RequestBaseInfo = obj;
        }
        this.IsCount = 'IsCount' in params ? params.IsCount : null;

    }
}

/**
 * DescribeQualityScore response structure.
 * @class
 */
class DescribeQualityScoreResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Quality Score
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {QualityScore || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new QualityScore();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeRulesByPage response structure.
 * @class
 */
class DescribeRulesByPageResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Rule Quality List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {RulePage || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new RulePage();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeDsParentFolderTree response structure.
 * @class
 */
class DescribeDsParentFolderTreeResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Unified Tree Structure Return Attribute List
         * @type {Array.<PathNodeDsVO> || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            this.Data = new Array();
            for (let z in params.Data) {
                let obj = new PathNodeDsVO();
                obj.deserialize(params.Data[z]);
                this.Data.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Quality Overview Table Ranking Elements
 * @class
 */
class TopTableStatItem extends  AbstractModel {
    constructor(){
        super();

        /**
         * Table Id
         * @type {string || null}
         */
        this.TableId = null;

        /**
         * Table nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableName = null;

        /**
         * Number
         * @type {number || null}
         */
        this.Cnt = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TableId = 'TableId' in params ? params.TableId : null;
        this.TableName = 'TableName' in params ? params.TableName : null;
        this.Cnt = 'Cnt' in params ? params.Cnt : null;

    }
}

/**
 * DescribeEventConsumeTasks request structure.
 * @class
 */
class DescribeEventConsumeTasksRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Event Instance ID
         * @type {string || null}
         */
        this.EventCaseId = null;

        /**
         * Page Number
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Number of items per page
         * @type {number || null}
         */
        this.PageSize = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.EventCaseId = 'EventCaseId' in params ? params.EventCaseId : null;
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;

    }
}

/**
 * DescribeDataSourceInfoList response structure.
 * @class
 */
class DescribeDataSourceInfoListResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Total number of items.
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * Data Source Information List.
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<DatasourceBaseInfo> || null}
         */
        this.DatasourceSet = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;

        if (params.DatasourceSet) {
            this.DatasourceSet = new Array();
            for (let z in params.DatasourceSet) {
                let obj = new DatasourceBaseInfo();
                obj.deserialize(params.DatasourceSet[z]);
                this.DatasourceSet.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Operation and Maintenance Dashboard Instance Status Statistics and Instance Status Trend
 * @class
 */
class InstanceStatisticInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Instance Status Trend Statistics
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<number> || null}
         */
        this.CountList = null;

        /**
         * Instance Status Trend Time Segmentation
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<string> || null}
         */
        this.TimeList = null;

        /**
         * Instance Status Identification: WAITING_RUNNING, KILLING, FAILED, FAILED_TRYING, SUCCEED, respectively indicate waiting for execution, terminating, failed, trying again, successful, used for Instance Status Distribution and Instance Status Trend
         * @type {string || null}
         */
        this.InstanceStatus = null;

        /**
         * Used for Instance Status Distribution Count
         * @type {number || null}
         */
        this.InstanceCount = null;

        /**
         * Current Display Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ShowTime = null;

        /**
         * 1
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ReportTime = null;

        /**
         * 1
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Count = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.CountList = 'CountList' in params ? params.CountList : null;
        this.TimeList = 'TimeList' in params ? params.TimeList : null;
        this.InstanceStatus = 'InstanceStatus' in params ? params.InstanceStatus : null;
        this.InstanceCount = 'InstanceCount' in params ? params.InstanceCount : null;
        this.ShowTime = 'ShowTime' in params ? params.ShowTime : null;
        this.ReportTime = 'ReportTime' in params ? params.ReportTime : null;
        this.Count = 'Count' in params ? params.Count : null;

    }
}

/**
 * CommitRuleGroupTask request structure.
 * @class
 */
class CommitRuleGroupTaskRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Rule Group ID
         * @type {number || null}
         */
        this.RuleGroupId = null;

        /**
         * Trigger Type 1. Manual Trigger 2. In-process Scheduling Trigger 3. Periodic Scheduling Trigger
         * @type {number || null}
         */
        this.TriggerType = null;

        /**
         * Rule Configuration List
         * @type {Array.<RuleConfig> || null}
         */
        this.ExecRuleConfig = null;

        /**
         * Execution configuration
         * @type {RuleExecConfig || null}
         */
        this.ExecConfig = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * The execution engine that this rule runs. If this parameter is not passed, the default execution engine under this data source will be requested.
         * @type {string || null}
         */
        this.EngineType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.RuleGroupId = 'RuleGroupId' in params ? params.RuleGroupId : null;
        this.TriggerType = 'TriggerType' in params ? params.TriggerType : null;

        if (params.ExecRuleConfig) {
            this.ExecRuleConfig = new Array();
            for (let z in params.ExecRuleConfig) {
                let obj = new RuleConfig();
                obj.deserialize(params.ExecRuleConfig[z]);
                this.ExecRuleConfig.push(obj);
            }
        }

        if (params.ExecConfig) {
            let obj = new RuleExecConfig();
            obj.deserialize(params.ExecConfig)
            this.ExecConfig = obj;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.EngineType = 'EngineType' in params ? params.EngineType : null;

    }
}

/**
 * CheckIntegrationNodeNameExists request structure.
 * @class
 */
class CheckIntegrationNodeNameExistsRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Node name
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Node ID
         * @type {number || null}
         */
        this.Id = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.Name = 'Name' in params ? params.Name : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.Id = 'Id' in params ? params.Id : null;

    }
}

/**
 * Details of a scheduled instance.
 * @class
 */
class InstanceLifeCycleVO extends  AbstractModel {
    constructor(){
        super();

        /**
         * Unique identifier of the instance.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.InstanceKey = null;

        /**
         * Instance status.

-Indicates waiting for event.
-[12] indicates waiting for upstream.
-[6, 7, 9, 10, 18] indicates awaiting execution.
-1, 19, 22 indicate running.
-21: skip running.
-[3] indicates retry on failure.
-[8, 4, 5, 13] indicates a failure.
-[2] indicates a success.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.InstanceState = null;

        /**
         * Lifecycle no.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.LifeRoundNum = null;

        /**
         * Instance running trigger type.

-RERUN indicates rerunning.
-ADDITION indicates supplementary recording.
-PERIODIC indicates a period.
-APERIODIC indicates non-periodic.
-RERUN_SKIP_RUN means empty run for re-run.
-ADDITION_SKIP_RUN indicates a supplementary run - empty run.
-PERIODIC_SKIP_RUN indicates an empty run in a periodic cycle.
-APERIODIC_SKIP_RUN indicates a non-periodic empty run.
-MANUAL_TRIGGER indicates manual triggering.
-RERUN_MANUAL_TRIGGER indicates manual triggering - rerun.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.RunType = null;

        /**
         * Number of retries after failure.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.Tries = null;

        /**
         * List of instance lifecycle.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {Array.<InstanceLifeDetailDto> || null}
         */
        this.LifeCycleDetailList = null;

        /**
         * Instance code file.
The file content specifies the code used for running the execution instance this time. only some tasks support it.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.CodeFileName = null;

        /**
         * Dispatch execution ID.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.ExecutionJobId = null;

        /**
         * The execution node where the log resides.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.BrokerIp = null;

        /**
         * Log file name.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.OriginFileName = null;

        /**
         * Instance log type.

-run: indicates the state of functioning. 
-kill: terminates.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.LogType = null;

        /**
         * Time spent.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.CostTime = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.InstanceKey = 'InstanceKey' in params ? params.InstanceKey : null;
        this.InstanceState = 'InstanceState' in params ? params.InstanceState : null;
        this.LifeRoundNum = 'LifeRoundNum' in params ? params.LifeRoundNum : null;
        this.RunType = 'RunType' in params ? params.RunType : null;
        this.Tries = 'Tries' in params ? params.Tries : null;

        if (params.LifeCycleDetailList) {
            this.LifeCycleDetailList = new Array();
            for (let z in params.LifeCycleDetailList) {
                let obj = new InstanceLifeDetailDto();
                obj.deserialize(params.LifeCycleDetailList[z]);
                this.LifeCycleDetailList.push(obj);
            }
        }
        this.CodeFileName = 'CodeFileName' in params ? params.CodeFileName : null;
        this.ExecutionJobId = 'ExecutionJobId' in params ? params.ExecutionJobId : null;
        this.BrokerIp = 'BrokerIp' in params ? params.BrokerIp : null;
        this.OriginFileName = 'OriginFileName' in params ? params.OriginFileName : null;
        this.LogType = 'LogType' in params ? params.LogType : null;
        this.CostTime = 'CostTime' in params ? params.CostTime : null;

    }
}

/**
 * DescribeReportTaskDetail request structure.
 * @class
 */
class DescribeReportTaskDetailRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Tenant id.
         * @type {string || null}
         */
        this.TenantId = null;

        /**
         * Engine task id.
         * @type {string || null}
         */
        this.EngineTaskId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TenantId = 'TenantId' in params ? params.TenantId : null;
        this.EngineTaskId = 'EngineTaskId' in params ? params.EngineTaskId : null;

    }
}

/**
 * GetOfflineInstanceList response structure.
 * @class
 */
class GetOfflineInstanceListResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Total number of items
         * @type {number || null}
         */
        this.Total = null;

        /**
         * Instance details
         * @type {Array.<OfflineInstance> || null}
         */
        this.List = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Total = 'Total' in params ? params.Total : null;

        if (params.List) {
            this.List = new Array();
            for (let z in params.List) {
                let obj = new OfflineInstance();
                obj.deserialize(params.List[z]);
                this.List.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeOpsMakePlans request structure.
 * @class
 */
class DescribeOpsMakePlansRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Pagination number, default value: 1
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Page size, default value 10
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Supplemental Plan ID
         * @type {string || null}
         */
        this.PlanId = null;

        /**
         * Supplemental Plan Name
         * @type {string || null}
         */
        this.PlanName = null;

        /**
         * Supplementary Task Name
         * @type {string || null}
         */
        this.TaskName = null;

        /**
         * Supplementary Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Supplementary Plan Creator
         * @type {string || null}
         */
        this.Creator = null;

        /**
         * Minimum Creation Time of Supplementary Plan
         * @type {string || null}
         */
        this.MinCreateTime = null;

        /**
         * Maximum Creation Time of Supplementary Plan
         * @type {string || null}
         */
        this.MaxCreateTime = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;
        this.PlanId = 'PlanId' in params ? params.PlanId : null;
        this.PlanName = 'PlanName' in params ? params.PlanName : null;
        this.TaskName = 'TaskName' in params ? params.TaskName : null;
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.Creator = 'Creator' in params ? params.Creator : null;
        this.MinCreateTime = 'MinCreateTime' in params ? params.MinCreateTime : null;
        this.MaxCreateTime = 'MaxCreateTime' in params ? params.MaxCreateTime : null;

    }
}

/**
 * CreateOpsMakePlan request structure.
 * @class
 */
class CreateOpsMakePlanRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Supplemental Plan Name
         * @type {string || null}
         */
        this.MakeName = null;

        /**
         * Supplementary Task Collection
         * @type {Array.<string> || null}
         */
        this.TaskIdList = null;

        /**
         * Supplementary Plan Date Range
         * @type {Array.<CreateMakeDatetimeInfo> || null}
         */
        this.MakeDatetimeList = null;

        /**
         * Project Identifier
         * @type {string || null}
         */
        this.ProjectIdent = null;

        /**
         * Check Parent Task Status for Supplement, default is not to check. Not recommended for use, will be deprecated, recommend using CheckParentType.
         * @type {boolean || null}
         */
        this.CheckParent = null;

        /**
         * Check Parent Task Type for Supplementary. Value range:
<li> NONE: Do not check any </li>
<li> ALL: Check all upstream parent tasks </li>
<li> MAKE_SCOPE: Check only within the selected tasks of (the current supplementary plan) </li>
         * @type {string || null}
         */
        this.CheckParentType = null;

        /**
         * Project name
         * @type {string || null}
         */
        this.ProjectName = null;

        /**
         * Deprecated. Task Self-Dependency Type: parallel, serial (unordered parallel), orderly (ordered serial)
         * @type {string || null}
         */
        this.SelfDependence = null;

        /**
         * Parallelism
         * @type {number || null}
         */
        this.ParallelNum = null;

        /**
         * Is the generation cycle of the supplementary instance the same as the original cycle, default is true
         * @type {boolean || null}
         */
        this.SameCycle = null;

        /**
         * Supplementary Instance Target Cycle Type
         * @type {string || null}
         */
        this.TargetTaskCycle = null;

        /**
         * Specified Time for Supplementary Instance Target Cycle Type
         * @type {number || null}
         */
        this.TargetTaskAction = null;

        /**
         * Custom Parameters for Supplement Instance
         * @type {Array.<StrToStrMap> || null}
         */
        this.MapParamList = null;

        /**
         * Creator ID
         * @type {string || null}
         */
        this.CreatorId = null;

        /**
         * Creator
         * @type {string || null}
         */
        this.Creator = null;

        /**
         * Supplementary Plan Description
         * @type {string || null}
         */
        this.Remark = null;

        /**
         * Use Original Self-Dependency Configuration of Task, default is true
         * @type {boolean || null}
         */
        this.SameSelfDependType = null;

        /**
         * Supplementary Instance Original Cycle Type
         * @type {string || null}
         */
        this.SourceTaskCycle = null;

        /**
         * If no specified scheduling resource group (ID) is provided, the original task scheduling execution resource group will be used
         * @type {string || null}
         */
        this.SchedulerResourceGroup = null;

        /**
         * If no specified integration resource group (ID) is provided, the original task integration execution resource group will be used
         * @type {string || null}
         */
        this.IntegrationResourceGroup = null;

        /**
         * If no specified scheduling resource group name is provided, the original task scheduling execution resource group will be used
         * @type {string || null}
         */
        this.SchedulerResourceGroupName = null;

        /**
         * If no specified integration resource group name is provided, the original task integration execution resource group will be used
         * @type {string || null}
         */
        this.IntegrationResourceGroupName = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.MakeName = 'MakeName' in params ? params.MakeName : null;
        this.TaskIdList = 'TaskIdList' in params ? params.TaskIdList : null;

        if (params.MakeDatetimeList) {
            this.MakeDatetimeList = new Array();
            for (let z in params.MakeDatetimeList) {
                let obj = new CreateMakeDatetimeInfo();
                obj.deserialize(params.MakeDatetimeList[z]);
                this.MakeDatetimeList.push(obj);
            }
        }
        this.ProjectIdent = 'ProjectIdent' in params ? params.ProjectIdent : null;
        this.CheckParent = 'CheckParent' in params ? params.CheckParent : null;
        this.CheckParentType = 'CheckParentType' in params ? params.CheckParentType : null;
        this.ProjectName = 'ProjectName' in params ? params.ProjectName : null;
        this.SelfDependence = 'SelfDependence' in params ? params.SelfDependence : null;
        this.ParallelNum = 'ParallelNum' in params ? params.ParallelNum : null;
        this.SameCycle = 'SameCycle' in params ? params.SameCycle : null;
        this.TargetTaskCycle = 'TargetTaskCycle' in params ? params.TargetTaskCycle : null;
        this.TargetTaskAction = 'TargetTaskAction' in params ? params.TargetTaskAction : null;

        if (params.MapParamList) {
            this.MapParamList = new Array();
            for (let z in params.MapParamList) {
                let obj = new StrToStrMap();
                obj.deserialize(params.MapParamList[z]);
                this.MapParamList.push(obj);
            }
        }
        this.CreatorId = 'CreatorId' in params ? params.CreatorId : null;
        this.Creator = 'Creator' in params ? params.Creator : null;
        this.Remark = 'Remark' in params ? params.Remark : null;
        this.SameSelfDependType = 'SameSelfDependType' in params ? params.SameSelfDependType : null;
        this.SourceTaskCycle = 'SourceTaskCycle' in params ? params.SourceTaskCycle : null;
        this.SchedulerResourceGroup = 'SchedulerResourceGroup' in params ? params.SchedulerResourceGroup : null;
        this.IntegrationResourceGroup = 'IntegrationResourceGroup' in params ? params.IntegrationResourceGroup : null;
        this.SchedulerResourceGroupName = 'SchedulerResourceGroupName' in params ? params.SchedulerResourceGroupName : null;
        this.IntegrationResourceGroupName = 'IntegrationResourceGroupName' in params ? params.IntegrationResourceGroupName : null;

    }
}

/**
 * DescribeDimensionScore response structure.
 * @class
 */
class DescribeDimensionScoreResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Dimensional scoring
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {DimensionScore || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new DimensionScore();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Development Space - Upload Script Request
 * @class
 */
class ScriptRequestInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Script path
Project area 1470575647377821696 project, under the f1 directory:
/datastudio/project/1470575647377821696/f1/sql1234.sql
Personal area:
/datastudio/personal/sqlTTT.sql
         * @type {string || null}
         */
        this.FilePath = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Script Version
         * @type {string || null}
         */
        this.Version = null;

        /**
         * Operation Type
         * @type {string || null}
         */
        this.Operation = null;

        /**
         * Additional Information
         * @type {string || null}
         */
        this.ExtraInfo = null;

        /**
         * Bucket Name
         * @type {string || null}
         */
        this.BucketName = null;

        /**
         * Region
         * @type {string || null}
         */
        this.Region = null;

        /**
         * File Extension Type
         * @type {string || null}
         */
        this.FileExtensionType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.FilePath = 'FilePath' in params ? params.FilePath : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.Version = 'Version' in params ? params.Version : null;
        this.Operation = 'Operation' in params ? params.Operation : null;
        this.ExtraInfo = 'ExtraInfo' in params ? params.ExtraInfo : null;
        this.BucketName = 'BucketName' in params ? params.BucketName : null;
        this.Region = 'Region' in params ? params.Region : null;
        this.FileExtensionType = 'FileExtensionType' in params ? params.FileExtensionType : null;

    }
}

/**
 * DescribeOrganizationalFunctions response structure.
 * @class
 */
class DescribeOrganizationalFunctionsResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Function information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<OrganizationalFunction> || null}
         */
        this.Content = null;

        /**
         * Operation failed
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ErrorMessage = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Content) {
            this.Content = new Array();
            for (let z in params.Content) {
                let obj = new OrganizationalFunction();
                obj.deserialize(params.Content[z]);
                this.Content.push(obj);
            }
        }
        this.ErrorMessage = 'ErrorMessage' in params ? params.ErrorMessage : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Folder List
 * @class
 */
class CollectionFolderOpsDto extends  AbstractModel {
    constructor(){
        super();

        /**
         * Total numberNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * Total number of pages
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalPage = null;

        /**
         * Current Page Number
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.PageCount = null;

        /**
         * Page Number
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Quantity per page
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Task InformationNote: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<FolderOpsDto> || null}
         */
        this.Items = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.TotalPage = 'TotalPage' in params ? params.TotalPage : null;
        this.PageCount = 'PageCount' in params ? params.PageCount : null;
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;

        if (params.Items) {
            this.Items = new Array();
            for (let z in params.Items) {
                let obj = new FolderOpsDto();
                obj.deserialize(params.Items[z]);
                this.Items.push(obj);
            }
        }

    }
}

/**
 * FreezeTasksByWorkflowIds request structure.
 * @class
 */
class FreezeTasksByWorkflowIdsRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Workflow ID List
         * @type {Array.<string> || null}
         */
        this.WorkflowIds = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Whether to terminate the generated instance
         * @type {boolean || null}
         */
        this.KillInstance = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.WorkflowIds = 'WorkflowIds' in params ? params.WorkflowIds : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.KillInstance = 'KillInstance' in params ? params.KillInstance : null;

    }
}

/**
 * DescribeTaskByCycleReport response structure.
 * @class
 */
class DescribeTaskByCycleReportResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task Cycle Growth Trend Statistics
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<TaskByStatus> || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            this.Data = new Array();
            for (let z in params.Data) {
                let obj = new TaskByStatus();
                obj.deserialize(params.Data[z]);
                this.Data.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * BatchDeleteOpsTasks response structure.
 * @class
 */
class BatchDeleteOpsTasksResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Returns the number of successful batch operations, the number of failures, and the total number of operations
         * @type {BatchOperationOpsDto || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new BatchOperationOpsDto();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * CheckIntegrationTaskNameExists response structure.
 * @class
 */
class CheckIntegrationTaskNameExistsResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * true indicates it exists, false indicates it does not exist
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * Task Name Duplication Type (0: Not duplicated, 1: Duplicated in development state, 2: Duplicated in production state)
         * @type {number || null}
         */
        this.ExistsType = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.ExistsType = 'ExistsType' in params ? params.ExistsType : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Instance Batch Operation Result Class
 * @class
 */
class BatchOperateResultOpsDto extends  AbstractModel {
    constructor(){
        super();

        /**
         * ResultNote: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.Result = null;

        /**
         * Error ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ErrorId = null;

        /**
         * Error Description
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ErrorDesc = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Result = 'Result' in params ? params.Result : null;
        this.ErrorId = 'ErrorId' in params ? params.ErrorId : null;
        this.ErrorDesc = 'ErrorDesc' in params ? params.ErrorDesc : null;

    }
}

/**
 * DeleteRule request structure.
 * @class
 */
class DeleteRuleRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Quality Rule ID
         * @type {number || null}
         */
        this.RuleId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.RuleId = 'RuleId' in params ? params.RuleId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * Approval Category
 * @class
 */
class ApproveType extends  AbstractModel {
    constructor(){
        super();

        /**
         * Application Category Key
         * @type {string || null}
         */
        this.Type = null;

        /**
         * Type Name
         * @type {string || null}
         */
        this.TypeName = null;

        /**
         * Application Type Key
         * @type {string || null}
         */
        this.Classification = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Type = 'Type' in params ? params.Type : null;
        this.TypeName = 'TypeName' in params ? params.TypeName : null;
        this.Classification = 'Classification' in params ? params.Classification : null;

    }
}

/**
 * Query conditions by Table Name
 * @class
 */
class TableNameFilter extends  AbstractModel {
    constructor(){
        super();

        /**
         * Data source type
         * @type {string || null}
         */
        this.MsType = null;

        /**
         * Data source ID
         * @type {number || null}
         */
        this.DatasourceId = null;

        /**
         * Database name
         * @type {string || null}
         */
        this.DatabaseName = null;

        /**
         * schema
         * @type {string || null}
         */
        this.SchemaName = null;

        /**
         * Table name
         * @type {string || null}
         */
        this.Name = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.MsType = 'MsType' in params ? params.MsType : null;
        this.DatasourceId = 'DatasourceId' in params ? params.DatasourceId : null;
        this.DatabaseName = 'DatabaseName' in params ? params.DatabaseName : null;
        this.SchemaName = 'SchemaName' in params ? params.SchemaName : null;
        this.Name = 'Name' in params ? params.Name : null;

    }
}

/**
 * Current Node Information of Real-time Task Instance
 * @class
 */
class RealTimeTaskInstanceNodeInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskName = null;

        /**
         * Task ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Real-time Task Instance Node Information List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<InstanceNodeInfo> || null}
         */
        this.InstanceNodeInfoList = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskName = 'TaskName' in params ? params.TaskName : null;
        this.TaskId = 'TaskId' in params ? params.TaskId : null;

        if (params.InstanceNodeInfoList) {
            this.InstanceNodeInfoList = new Array();
            for (let z in params.InstanceNodeInfoList) {
                let obj = new InstanceNodeInfo();
                obj.deserialize(params.InstanceNodeInfoList[z]);
                this.InstanceNodeInfoList.push(obj);
            }
        }

    }
}

/**
 * DeleteResourceFiles response structure.
 * @class
 */
class DeleteResourceFilesResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Resource Batch Deletion Result
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeFieldBasicInfo request structure.
 * @class
 */
class DescribeFieldBasicInfoRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Page Number
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Page Size
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Filter field
         * @type {Array.<Filter> || null}
         */
        this.Filters = null;

        /**
         * Sort Fields
         * @type {Array.<OrderField> || null}
         */
        this.OrderFields = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;

        if (params.Filters) {
            this.Filters = new Array();
            for (let z in params.Filters) {
                let obj = new Filter();
                obj.deserialize(params.Filters[z]);
                this.Filters.push(obj);
            }
        }

        if (params.OrderFields) {
            this.OrderFields = new Array();
            for (let z in params.OrderFields) {
                let obj = new OrderField();
                obj.deserialize(params.OrderFields[z]);
                this.OrderFields.push(obj);
            }
        }

    }
}

/**
 * DiagnosePro request structure.
 * @class
 */
class DiagnoseProRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Instance List
         * @type {Array.<InstanceOpsDto> || null}
         */
        this.Instances = null;

        /**
         * Check Parent Task Type, true: Check parent task; false: Do not check parent task
         * @type {boolean || null}
         */
        this.CheckFather = null;

        /**
         * Rerun Type, 1: Self; 3: Child; 2: Self and Child
         * @type {string || null}
         */
        this.RerunType = null;

        /**
         * Instance Dependency Mode, 1: Self-dependent; 2: Task-dependent; 3: Self and Parent-Child dependent
         * @type {string || null}
         */
        this.DependentWay = null;

        /**
         * Rerun Ignore Event Listening or Not
         * @type {boolean || null}
         */
        this.SkipEventListening = null;

        /**
         * Downstream Instance Range 1: Within the workflow 2: Within the project 3: Across all workflows dependent on the project
         * @type {string || null}
         */
        this.SonInstanceType = null;

        /**
         * Query Conditions (TaskId and CurRunDate need to be filled in this field for diagnosis)
         * @type {InstanceApiOpsRequest || null}
         */
        this.SearchCondition = null;

        /**
         * Access type
         * @type {string || null}
         */
        this.OptType = null;

        /**
         * Operator Name
         * @type {string || null}
         */
        this.OperatorName = null;

        /**
         * Operator ID
         * @type {string || null}
         */
        this.OperatorId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Project Identifier
         * @type {string || null}
         */
        this.ProjectIdent = null;

        /**
         * Project name
         * @type {string || null}
         */
        this.ProjectName = null;

        /**
         * Index Page Number
         * @type {number || null}
         */
        this.PageIndex = null;

        /**
         * Page size
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Total Data
         * @type {number || null}
         */
        this.Count = null;

        /**
         * Basic Request Information
         * @type {ProjectBaseInfoOpsRequest || null}
         */
        this.RequestBaseInfo = null;

        /**
         * Whether to Calculate Total
         * @type {boolean || null}
         */
        this.IsCount = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Instances) {
            this.Instances = new Array();
            for (let z in params.Instances) {
                let obj = new InstanceOpsDto();
                obj.deserialize(params.Instances[z]);
                this.Instances.push(obj);
            }
        }
        this.CheckFather = 'CheckFather' in params ? params.CheckFather : null;
        this.RerunType = 'RerunType' in params ? params.RerunType : null;
        this.DependentWay = 'DependentWay' in params ? params.DependentWay : null;
        this.SkipEventListening = 'SkipEventListening' in params ? params.SkipEventListening : null;
        this.SonInstanceType = 'SonInstanceType' in params ? params.SonInstanceType : null;

        if (params.SearchCondition) {
            let obj = new InstanceApiOpsRequest();
            obj.deserialize(params.SearchCondition)
            this.SearchCondition = obj;
        }
        this.OptType = 'OptType' in params ? params.OptType : null;
        this.OperatorName = 'OperatorName' in params ? params.OperatorName : null;
        this.OperatorId = 'OperatorId' in params ? params.OperatorId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.ProjectIdent = 'ProjectIdent' in params ? params.ProjectIdent : null;
        this.ProjectName = 'ProjectName' in params ? params.ProjectName : null;
        this.PageIndex = 'PageIndex' in params ? params.PageIndex : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;
        this.Count = 'Count' in params ? params.Count : null;

        if (params.RequestBaseInfo) {
            let obj = new ProjectBaseInfoOpsRequest();
            obj.deserialize(params.RequestBaseInfo)
            this.RequestBaseInfo = obj;
        }
        this.IsCount = 'IsCount' in params ? params.IsCount : null;

    }
}

/**
 * CreateOpsMakePlan response structure.
 * @class
 */
class CreateOpsMakePlanResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Result
         * @type {CommonIdOpsDto || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new CommonIdOpsDto();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeStreamTaskLogList response structure.
 * @class
 */
class DescribeStreamTaskLogListResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Is it full
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.ListOver = null;

        /**
         * Log Collection
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<LogContentInfo> || null}
         */
        this.LogContentList = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ListOver = 'ListOver' in params ? params.ListOver : null;

        if (params.LogContentList) {
            this.LogContentList = new Array();
            for (let z in params.LogContentList) {
                let obj = new LogContentInfo();
                obj.deserialize(params.LogContentList[z]);
                this.LogContentList.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Data Governance Configuration Items
 * @class
 */
class DlcDataGovernPolicy extends  AbstractModel {
    constructor(){
        super();

        /**
         * Data Layout Governance Item
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {DlcRewriteDataInfo || null}
         */
        this.RewriteDataPolicy = null;

        /**
         * Snapshot Expiration Governance Item
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {DlcExpiredSnapshotsInfo || null}
         */
        this.ExpiredSnapshotsPolicy = null;

        /**
         * Remove Isolated Files Governance Item
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {DlcRemoveOrphanFilesInfo || null}
         */
        this.RemoveOrphanFilesPolicy = null;

        /**
         * Merge Metadata Manifests Governance Item
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {DlcMergeManifestsInfo || null}
         */
        this.MergeManifestsPolicy = null;

        /**
         * Integration Library Rules: default (Default Inheritance), none (No Inheritance)
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InheritDataBase = null;

        /**
         * Governance Rule Types, Customize: Custom Definition; Intelligence: Intelligent Governance
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.RuleType = null;

        /**
         * Governance Engine
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.GovernEngine = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.RewriteDataPolicy) {
            let obj = new DlcRewriteDataInfo();
            obj.deserialize(params.RewriteDataPolicy)
            this.RewriteDataPolicy = obj;
        }

        if (params.ExpiredSnapshotsPolicy) {
            let obj = new DlcExpiredSnapshotsInfo();
            obj.deserialize(params.ExpiredSnapshotsPolicy)
            this.ExpiredSnapshotsPolicy = obj;
        }

        if (params.RemoveOrphanFilesPolicy) {
            let obj = new DlcRemoveOrphanFilesInfo();
            obj.deserialize(params.RemoveOrphanFilesPolicy)
            this.RemoveOrphanFilesPolicy = obj;
        }

        if (params.MergeManifestsPolicy) {
            let obj = new DlcMergeManifestsInfo();
            obj.deserialize(params.MergeManifestsPolicy)
            this.MergeManifestsPolicy = obj;
        }
        this.InheritDataBase = 'InheritDataBase' in params ? params.InheritDataBase : null;
        this.RuleType = 'RuleType' in params ? params.RuleType : null;
        this.GovernEngine = 'GovernEngine' in params ? params.GovernEngine : null;

    }
}

/**
 * DescribeRuleGroupExecResultsByPage response structure.
 * @class
 */
class DescribeRuleGroupExecResultsByPageResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Rule Group Execution Result List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {RuleGroupExecResultPage || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new RuleGroupExecResultPage();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeInstanceByCycle request structure.
 * @class
 */
class DescribeInstanceByCycleRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * 1
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * 1
         * @type {string || null}
         */
        this.TenantId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.TenantId = 'TenantId' in params ? params.TenantId : null;

    }
}

/**
 * GetIntegrationNodeColumnSchema request structure.
 * @class
 */
class GetIntegrationNodeColumnSchemaRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Field Example (JSON Format)
         * @type {string || null}
         */
        this.ColumnContent = null;

        /**
         * Data Source Type MYSQL|HIVE|KAFKA|ES|MONGODB|REST_API|SYBASE|TIDB|DORIS|DM|
         * @type {string || null}
         */
        this.DatasourceType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ColumnContent = 'ColumnContent' in params ? params.ColumnContent : null;
        this.DatasourceType = 'DatasourceType' in params ? params.DatasourceType : null;

    }
}

/**
 * DeleteWorkflowById response structure.
 * @class
 */
class DeleteWorkflowByIdResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Delete Result
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {OperationOpsDto || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new OperationOpsDto();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Data Quality Rule Pagination
 * @class
 */
class RulePage extends  AbstractModel {
    constructor(){
        super();

        /**
         * Record Count
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * Rule List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<Rule> || null}
         */
        this.Items = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;

        if (params.Items) {
            this.Items = new Array();
            for (let z in params.Items) {
                let obj = new Rule();
                obj.deserialize(params.Items[z]);
                this.Items.push(obj);
            }
        }

    }
}

/**
 * DeleteIntegrationNode request structure.
 * @class
 */
class DeleteIntegrationNodeRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Node ID
         * @type {string || null}
         */
        this.Id = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Id = 'Id' in params ? params.Id : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * ModifyIntegrationNode response structure.
 * @class
 */
class ModifyIntegrationNodeResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Node ID
         * @type {string || null}
         */
        this.Id = null;

        /**
         * Task ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Id = 'Id' in params ? params.Id : null;
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeIntegrationStatisticsTaskStatusTrend request structure.
 * @class
 */
class DescribeIntegrationStatisticsTaskStatusTrendRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task Type (Real-time:201, Offline:202)
         * @type {number || null}
         */
        this.TaskType = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Query Date
         * @type {string || null}
         */
        this.QueryDate = null;

        /**
         * Resource Group ID
         * @type {string || null}
         */
        this.ExecutorGroupId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskType = 'TaskType' in params ? params.TaskType : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.QueryDate = 'QueryDate' in params ? params.QueryDate : null;
        this.ExecutorGroupId = 'ExecutorGroupId' in params ? params.ExecutorGroupId : null;

    }
}

/**
 * DescribeTableMeta request structure.
 * @class
 */
class DescribeTableMetaRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Unique Table ID
         * @type {string || null}
         */
        this.TableId = null;

        /**
         * Query conditions by Name
         * @type {TableNameFilter || null}
         */
        this.TableNameFilter = null;

        /**
         * Query condition type: 0 by ID, 1 by Name, default is 0
         * @type {number || null}
         */
        this.TableFilterType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TableId = 'TableId' in params ? params.TableId : null;

        if (params.TableNameFilter) {
            let obj = new TableNameFilter();
            obj.deserialize(params.TableNameFilter)
            this.TableNameFilter = obj;
        }
        this.TableFilterType = 'TableFilterType' in params ? params.TableFilterType : null;

    }
}

/**
 * DescribeWorkflowInfoById response structure.
 * @class
 */
class DescribeWorkflowInfoByIdResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Workflow Scheduling Details
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {WorkflowSchedulerOpsDto || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new WorkflowSchedulerOpsDto();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Canvas Required Information
 * @class
 */
class OpsTaskCanvasInfoList extends  AbstractModel {
    constructor(){
        super();

        /**
         * Canvas Task Information
         * @type {Array.<OpsTaskCanvasDto> || null}
         */
        this.TasksList = null;

        /**
         * Canvas Task Link Information
         * @type {Array.<OpsTaskLinkInfoDto> || null}
         */
        this.LinksList = null;

        /**
         * Canvas Cyclic Dependency Task Information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<OpsTaskCanvasDto> || null}
         */
        this.CirculateTaskList = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.TasksList) {
            this.TasksList = new Array();
            for (let z in params.TasksList) {
                let obj = new OpsTaskCanvasDto();
                obj.deserialize(params.TasksList[z]);
                this.TasksList.push(obj);
            }
        }

        if (params.LinksList) {
            this.LinksList = new Array();
            for (let z in params.LinksList) {
                let obj = new OpsTaskLinkInfoDto();
                obj.deserialize(params.LinksList[z]);
                this.LinksList.push(obj);
            }
        }

        if (params.CirculateTaskList) {
            this.CirculateTaskList = new Array();
            for (let z in params.CirculateTaskList) {
                let obj = new OpsTaskCanvasDto();
                obj.deserialize(params.CirculateTaskList[z]);
                this.CirculateTaskList.push(obj);
            }
        }

    }
}

/**
 * SubmitTaskTestRun response structure.
 * @class
 */
class SubmitTaskTestRunResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Submit Run jobid
         * @type {number || null}
         */
        this.JobId = null;

        /**
         * Operation Record ID
         * @type {Array.<number> || null}
         */
        this.RecordId = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.JobId = 'JobId' in params ? params.JobId : null;
        this.RecordId = 'RecordId' in params ? params.RecordId : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * ModifyDimensionWeight response structure.
 * @class
 */
class ModifyDimensionWeightResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Update Weight Successfully?
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * ModifyTaskAlarmRegular response structure.
 * @class
 */
class ModifyTaskAlarmRegularResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Modify Successfully Determined?
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Instance Retrieval Criteria
 * @class
 */
class InstanceSearchCondition extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task Scheduling Cycle Type
         * @type {Array.<string> || null}
         */
        this.CycleList = null;

        /**
         * Start time
         * @type {string || null}
         */
        this.DateFrom = null;

        /**
         * Expire Time
         * @type {string || null}
         */
        this.DateTo = null;

        /**
         * Instance Filtering Conditions
         * @type {InstanceCondition || null}
         */
        this.Instance = null;

        /**
         * Fuzzy Query Keywords
         * @type {string || null}
         */
        this.Keyword = null;

        /**
         * Sorting Method
         * @type {string || null}
         */
        this.Sort = null;

        /**
         * Sort Fields
         * @type {string || null}
         */
        this.SortCol = null;

        /**
         * Instance Status Type
         * @type {Array.<string> || null}
         */
        this.StateList = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.CycleList = 'CycleList' in params ? params.CycleList : null;
        this.DateFrom = 'DateFrom' in params ? params.DateFrom : null;
        this.DateTo = 'DateTo' in params ? params.DateTo : null;

        if (params.Instance) {
            let obj = new InstanceCondition();
            obj.deserialize(params.Instance)
            this.Instance = obj;
        }
        this.Keyword = 'Keyword' in params ? params.Keyword : null;
        this.Sort = 'Sort' in params ? params.Sort : null;
        this.SortCol = 'SortCol' in params ? params.SortCol : null;
        this.StateList = 'StateList' in params ? params.StateList : null;

    }
}

/**
 * CreateRule response structure.
 * @class
 */
class CreateRuleResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * RuleNote: This field may return null, indicating that no valid value can be obtained.
         * @type {Rule || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new Rule();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * ModifyTaskLinks response structure.
 * @class
 */
class ModifyTaskLinksResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Success or Failure
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeTaskRunHistory request structure.
 * @class
 */
class DescribeTaskRunHistoryRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Search Criteria
         * @type {InstanceSearchCondition || null}
         */
        this.SearchCondition = null;

        /**
         * Page Size
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Page Number
         * @type {number || null}
         */
        this.PageNumber = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

        if (params.SearchCondition) {
            let obj = new InstanceSearchCondition();
            obj.deserialize(params.SearchCondition)
            this.SearchCondition = obj;
        }
        this.PageSize = 'PageSize' in params ? params.PageSize : null;
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;

    }
}

/**
 * BatchMakeUpIntegrationTasks request structure.
 * @class
 */
class BatchMakeUpIntegrationTasksRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {Array.<string> || null}
         */
        this.TaskIds = null;

        /**
         * Task Type, 201 for Real-time Task, 202 for Offline Task
         * @type {number || null}
         */
        this.TaskType = null;

        /**
         * Data Supplement Start Time
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * Data Supplement End Time
         * @type {string || null}
         */
        this.EndTime = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskIds = 'TaskIds' in params ? params.TaskIds : null;
        this.TaskType = 'TaskType' in params ? params.TaskType : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * Offline Instance
 * @class
 */
class OfflineInstance extends  AbstractModel {
    constructor(){
        super();

        /**
         * Create Account Sub UIN
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreateUin = null;

        /**
         * Operate Account Sub UIN
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.OperatorUin = null;

        /**
         * Primary AccountNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.OwnerUin = null;

        /**
         * AccountsNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.AppId = null;

        /**
         * Project ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.WorkspaceId = null;

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Data Timestamp
         * @type {string || null}
         */
        this.CurRunDate = null;

        /**
         * Issuance time
         * @type {string || null}
         */
        this.IssueId = null;

        /**
         * Resource Group ID Issuance, not an input item
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InlongTaskId = null;

        /**
         * Resource Group
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ResourceGroup = null;

        /**
         * Task Type (1 Debugging, 2 Scheduled Execution)
         * @type {number || null}
         */
        this.TaskRunType = null;

        /**
         * Instance status EVENT_LISTENING|DEPENDENCE|BEFORE_ASPECT|ALLOCATED|LAUNCHED|KILL|SNAP_STATE_SAVING|ISSUED|RUNNING|AFTER_ASPECT|PENDING|KILLING|FINAL_STATE_SAVING|FAILED|KILL_FAILED|COMPLETED|EXPIRED|KILL_EXPIRED|DELETED
         * @type {string || null}
         */
        this.State = null;

        /**
         * Start TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * End timeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EndTime = null;

        /**
         * Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreateTime = null;

        /**
         * Last Updated Time
         * @type {string || null}
         */
        this.UpdateTime = null;

        /**
         * Unique Key
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InstanceKey = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.CreateUin = 'CreateUin' in params ? params.CreateUin : null;
        this.OperatorUin = 'OperatorUin' in params ? params.OperatorUin : null;
        this.OwnerUin = 'OwnerUin' in params ? params.OwnerUin : null;
        this.AppId = 'AppId' in params ? params.AppId : null;
        this.WorkspaceId = 'WorkspaceId' in params ? params.WorkspaceId : null;
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.CurRunDate = 'CurRunDate' in params ? params.CurRunDate : null;
        this.IssueId = 'IssueId' in params ? params.IssueId : null;
        this.InlongTaskId = 'InlongTaskId' in params ? params.InlongTaskId : null;
        this.ResourceGroup = 'ResourceGroup' in params ? params.ResourceGroup : null;
        this.TaskRunType = 'TaskRunType' in params ? params.TaskRunType : null;
        this.State = 'State' in params ? params.State : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;
        this.UpdateTime = 'UpdateTime' in params ? params.UpdateTime : null;
        this.InstanceKey = 'InstanceKey' in params ? params.InstanceKey : null;

    }
}

/**
 * Used by BatchCreateTaskVersion, describes task information
 * @class
 */
class BatchCreateTaskVersionDTO extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * VersionRemark
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.VersionRemark = null;

        /**
         * Folder ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FolderId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.VersionRemark = 'VersionRemark' in params ? params.VersionRemark : null;
        this.FolderId = 'FolderId' in params ? params.FolderId : null;

    }
}

/**
 * CreateTaskVersionDs request structure.
 * @class
 */
class CreateTaskVersionDsRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {BatchCreateTaskVersionDTO || null}
         */
        this.Task = null;

        /**
         * Whether to verify that the parent task has been submitted for scheduling
         * @type {boolean || null}
         */
        this.NeedCheckParentSubmitted = null;

        /**
         * Automatic Execution
         * @type {boolean || null}
         */
        this.AutoRun = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Request Source, WEB frontend; CLIENT client
         * @type {string || null}
         */
        this.RequestFromSource = null;

        /**
         * Alert Method: email-Email; sms-SMS; wecom-WeCom
         * @type {string || null}
         */
        this.AlarmWays = null;

        /**
         * Alert Object: 1-Project Administrator, 2-Task Owner
         * @type {string || null}
         */
        this.AlarmRecipientTypes = null;

        /**
         * Whether to verify circular dependencies, default is true. If false is passed after successful validation using CheckTaskCycleLink and CheckTaskCycleConfiguration interfaces, the back-end server will not perform validation
         * @type {boolean || null}
         */
        this.EnableCheckTaskCycleLink = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Task) {
            let obj = new BatchCreateTaskVersionDTO();
            obj.deserialize(params.Task)
            this.Task = obj;
        }
        this.NeedCheckParentSubmitted = 'NeedCheckParentSubmitted' in params ? params.NeedCheckParentSubmitted : null;
        this.AutoRun = 'AutoRun' in params ? params.AutoRun : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.RequestFromSource = 'RequestFromSource' in params ? params.RequestFromSource : null;
        this.AlarmWays = 'AlarmWays' in params ? params.AlarmWays : null;
        this.AlarmRecipientTypes = 'AlarmRecipientTypes' in params ? params.AlarmRecipientTypes : null;
        this.EnableCheckTaskCycleLink = 'EnableCheckTaskCycleLink' in params ? params.EnableCheckTaskCycleLink : null;

    }
}

/**
 * DeleteOfflineTask request structure.
 * @class
 */
class DeleteOfflineTaskRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Operator's name
         * @type {string || null}
         */
        this.OperatorName = null;

        /**
         * Project/workspace ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Virtual task marker (defaults to false, consistent with previous scheduling interfaces)
         * @type {boolean || null}
         */
        this.VirtualFlag = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.OperatorName = 'OperatorName' in params ? params.OperatorName : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.VirtualFlag = 'VirtualFlag' in params ? params.VirtualFlag : null;

    }
}

/**
 * Weight Information
 * @class
 */
class WeightInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Weight
         * @type {number || null}
         */
        this.Weight = null;

        /**
         * Dimension Type 1:Accuracy, 2:Uniqueness, 3:Integrity, 4:Consistency, 5:Timeliness, 6:Validity
         * @type {number || null}
         */
        this.QualityDim = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Weight = 'Weight' in params ? params.Weight : null;
        this.QualityDim = 'QualityDim' in params ? params.QualityDim : null;

    }
}

/**
 * DescribeDatabaseInfoList response structure.
 * @class
 */
class DescribeDatabaseInfoListResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Database List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<DatabaseInfo> || null}
         */
        this.DatabaseInfo = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.DatabaseInfo) {
            this.DatabaseInfo = new Array();
            for (let z in params.DatabaseInfo) {
                let obj = new DatabaseInfo();
                obj.deserialize(params.DatabaseInfo[z]);
                this.DatabaseInfo.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * ModifyDsFolder response structure.
 * @class
 */
class ModifyDsFolderResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * true indicates success, false indicates failure
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Content Details
 * @class
 */
class CommonContent extends  AbstractModel {
    constructor(){
        super();

        /**
         * Detailed Content
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Content = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Content = 'Content' in params ? params.Content : null;

    }
}

/**
 * DescribeTableScoreTrend response structure.
 * @class
 */
class DescribeTableScoreTrendResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Table Scoring Trend
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {QualityScoreTrend || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new QualityScoreTrend();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * ModifyIntegrationNode request structure.
 * @class
 */
class ModifyIntegrationNodeRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Integrated Node Information
         * @type {IntegrationNodeInfo || null}
         */
        this.NodeInfo = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Task Type "201. stream, 202. offline"
         * @type {number || null}
         */
        this.TaskType = null;

        /**
         * Distinguish Canvas Mode and Form "1. Canvas, 2. Form" mode
         * @type {number || null}
         */
        this.TaskMode = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.NodeInfo) {
            let obj = new IntegrationNodeInfo();
            obj.deserialize(params.NodeInfo)
            this.NodeInfo = obj;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.TaskType = 'TaskType' in params ? params.TaskType : null;
        this.TaskMode = 'TaskMode' in params ? params.TaskMode : null;

    }
}

/**
 * ModifyMonitorStatus response structure.
 * @class
 */
class ModifyMonitorStatusResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Monitoring Status Modified Successfully
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeRuleTemplatesByPage response structure.
 * @class
 */
class DescribeRuleTemplatesByPageResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Result
         * @type {RuleTemplatePage || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new RuleTemplatePage();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeTemplateDimCount response structure.
 * @class
 */
class DescribeTemplateDimCountResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Dimensional statistics results
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<DimensionCount> || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            this.Data = new Array();
            for (let z in params.Data) {
                let obj = new DimensionCount();
                obj.deserialize(params.Data[z]);
                this.Data.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeFunctionTypes request structure.
 * @class
 */
class DescribeFunctionTypesRequest extends  AbstractModel {
    constructor(){
        super();

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

    }
}

/**
 * Dimension statistical business view
 * @class
 */
class DimensionCount extends  AbstractModel {
    constructor(){
        super();

        /**
         * Dimension types 1: Accuracy, 2: Uniqueness, 3: Completeness, 4: Consistency, 5: Timeliness, 6: Validity
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.DimType = null;

        /**
         * Statistics value
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Count = null;

        /**
         * Dimension types 1: Accuracy, 2: Uniqueness, 3: Completeness, 4: Consistency, 5: Timeliness, 6: Validity
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.QualityDim = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.DimType = 'DimType' in params ? params.DimType : null;
        this.Count = 'Count' in params ? params.Count : null;
        this.QualityDim = 'QualityDim' in params ? params.QualityDim : null;

    }
}

/**
 * AIOps basic information
 * @class
 */
class AttributeItemDTO extends  AbstractModel {
    constructor(){
        super();

        /**
         * key
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Key = null;

        /**
         * value
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Value = null;

        /**
         * DescriptionNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Description = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Key = 'Key' in params ? params.Key : null;
        this.Value = 'Value' in params ? params.Value : null;
        this.Description = 'Description' in params ? params.Description : null;

    }
}

/**
 * DescribeInstanceLog response structure.
 * @class
 */
class DescribeInstanceLogResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Returned result
         * @type {string || null}
         */
        this.Data = null;

        /**
         * Return results
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {IntegrationInstanceLog || null}
         */
        this.InstanceLogInfo = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;

        if (params.InstanceLogInfo) {
            let obj = new IntegrationInstanceLog();
            obj.deserialize(params.InstanceLogInfo)
            this.InstanceLogInfo = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Modify Approval Form Status
 * @class
 */
class ApproveModify extends  AbstractModel {
    constructor(){
        super();

        /**
         * Approval Form ID
         * @type {string || null}
         */
        this.ApproveId = null;

        /**
         * Modification successful?
         * @type {boolean || null}
         */
        this.Success = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ApproveId = 'ApproveId' in params ? params.ApproveId : null;
        this.Success = 'Success' in params ? params.Success : null;

    }
}

/**
 * DescribeOpsMakePlanTasks response structure.
 * @class
 */
class DescribeOpsMakePlanTasksResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Supplementary plan task pagination query results
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {MakePlanTaskOpsDtoCollection || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new MakePlanTaskOpsDtoCollection();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Instance log information
 * @class
 */
class InstanceLogList extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Data TimestampNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CurRunDate = null;

        /**
         * Maximum number of retriesNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Tries = null;

        /**
         * Last Updated TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.LastUpdate = null;

        /**
         * Node IP
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.BrokerIp = null;

        /**
         * File sizeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FileSize = null;

        /**
         * Original File Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.OriginFileName = null;

        /**
         * Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreateTime = null;

        /**
         * Instance Log Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InstanceLogType = null;

        /**
         * Task NameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskName = null;

        /**
         * Time Consumed
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CostTime = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.CurRunDate = 'CurRunDate' in params ? params.CurRunDate : null;
        this.Tries = 'Tries' in params ? params.Tries : null;
        this.LastUpdate = 'LastUpdate' in params ? params.LastUpdate : null;
        this.BrokerIp = 'BrokerIp' in params ? params.BrokerIp : null;
        this.FileSize = 'FileSize' in params ? params.FileSize : null;
        this.OriginFileName = 'OriginFileName' in params ? params.OriginFileName : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;
        this.InstanceLogType = 'InstanceLogType' in params ? params.InstanceLogType : null;
        this.TaskName = 'TaskName' in params ? params.TaskName : null;
        this.CostTime = 'CostTime' in params ? params.CostTime : null;

    }
}

/**
 * ModifyMonitorStatus request structure.
 * @class
 */
class ModifyMonitorStatusRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Rule Group ID
         * @type {number || null}
         */
        this.RuleGroupId = null;

        /**
         * Monitor switch status
         * @type {boolean || null}
         */
        this.MonitorStatus = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.RuleGroupId = 'RuleGroupId' in params ? params.RuleGroupId : null;
        this.MonitorStatus = 'MonitorStatus' in params ? params.MonitorStatus : null;

    }
}

/**
 * DescribeColumnLineage response structure.
 * @class
 */
class DescribeColumnLineageResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Field lineage information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {ColumnAggregationLineage || null}
         */
        this.ColumnAggregationLineage = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.ColumnAggregationLineage) {
            let obj = new ColumnAggregationLineage();
            obj.deserialize(params.ColumnAggregationLineage)
            this.ColumnAggregationLineage = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeIntegrationTask request structure.
 * @class
 */
class DescribeIntegrationTaskRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Task Type, 201: Real-time Integration Task, 202: Offline Integration Task, default value is 201 for real-time task if not specified
         * @type {number || null}
         */
        this.TaskType = null;

        /**
         * Submit version number
         * @type {number || null}
         */
        this.InstanceVersion = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.TaskType = 'TaskType' in params ? params.TaskType : null;
        this.InstanceVersion = 'InstanceVersion' in params ? params.InstanceVersion : null;

    }
}

/**
 * DiagnoseRep
 * @class
 */
class DiagnoseRep extends  AbstractModel {
    constructor(){
        super();

        /**
         * Diagnostic information content
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Content || null}
         */
        this.Content = null;

        /**
         * List of diagnostic result-related information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Table || null}
         */
        this.Table = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Content) {
            let obj = new Content();
            obj.deserialize(params.Content)
            this.Content = obj;
        }

        if (params.Table) {
            let obj = new Table();
            obj.deserialize(params.Table)
            this.Table = obj;
        }

    }
}

/**
 * DescribeWorkflowListByProjectId response structure.
 * @class
 */
class DescribeWorkflowListByProjectIdResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Obtain a list of all workflows under the project based on the project ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<WorkflowCanvasOpsDto> || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            this.Data = new Array();
            for (let z in params.Data) {
                let obj = new WorkflowCanvasOpsDto();
                obj.deserialize(params.Data[z]);
                this.Data.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DeleteFilePath request structure.
 * @class
 */
class DeleteFilePathRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Resource ID
         * @type {Array.<string> || null}
         */
        this.ResourceIds = null;

        /**
         * Usage Status- true
- false
         * @type {string || null}
         */
        this.UseStatus = null;

        /**
         * File path
         * @type {Array.<string> || null}
         */
        this.FilePaths = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.ResourceIds = 'ResourceIds' in params ? params.ResourceIds : null;
        this.UseStatus = 'UseStatus' in params ? params.UseStatus : null;
        this.FilePaths = 'FilePaths' in params ? params.FilePaths : null;

    }
}

/**
 * DescribeRulesByPage request structure.
 * @class
 */
class DescribeRulesByPageRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Pagination Index
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Page size
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Filter criteria
         * @type {Array.<Filter> || null}
         */
        this.Filters = null;

        /**
         * Sort Fields
         * @type {Array.<OrderField> || null}
         */
        this.OrderFields = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;

        if (params.Filters) {
            this.Filters = new Array();
            for (let z in params.Filters) {
                let obj = new Filter();
                obj.deserialize(params.Filters[z]);
                this.Filters.push(obj);
            }
        }

        if (params.OrderFields) {
            this.OrderFields = new Array();
            for (let z in params.OrderFields) {
                let obj = new OrderField();
                obj.deserialize(params.OrderFields[z]);
                this.OrderFields.push(obj);
            }
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * DescribeTopTableStat response structure.
 * @class
 */
class DescribeTopTableStatResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Result
         * @type {TopTableStat || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new TopTableStat();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Data Quality Production Scheduling Task Business Entity
 * @class
 */
class ProdSchedulerTask extends  AbstractModel {
    constructor(){
        super();

        /**
         * Production Scheduling Task Workflow ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.WorkflowId = null;

        /**
         * Production Scheduling Task ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Production Scheduling Task Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskName = null;

        /**
         * Production Scheduling Task Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.CycleType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.TaskName = 'TaskName' in params ? params.TaskName : null;
        this.CycleType = 'CycleType' in params ? params.CycleType : null;

    }
}

/**
 * Workflow Scheduling Details
 * @class
 */
class WorkflowSchedulerOpsDto extends  AbstractModel {
    constructor(){
        super();

        /**
         * Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreateTime = null;

        /**
         * CreatorNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Creator = null;

        /**
         * Modification TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ModifyTime = null;

        /**
         * Latency, unit=minute
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.DelayTime = null;

        /**
         * Start Time, unit=minute
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.StartupTime = null;

        /**
         * Task Dependency Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.SelfDepend = null;

        /**
         * Start TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * End timeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EndTime = null;

        /**
         * Specified Running Time, Specified Time: e.g., Monday:1
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskAction = null;

        /**
         * Scheduling Cycle Type, Time Unit
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CycleType = null;

        /**
         * Scheduling Period, Interval Step unit=minute
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.CycleStep = null;

        /**
         * Scheduling Cron Expression
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CrontabExpression = null;

        /**
         * Execution Time Left Closed Interval
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ExecutionStartTime = null;

        /**
         * Execution Time Right Closed Interval
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ExecutionEndTime = null;

        /**
         * Task Instance Initialization Strategy
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InstanceInitStrategy = null;

        /**
         * Workflow IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.WorkflowId = null;

        /**
         * Workflow Self-Dependency
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DependencyWorkflow = null;

        /**
         * Scheduling Plan Interpretation
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.SchedulerDesc = null;

        /**
         * First Submission Time of Workflow
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FirstSubmitTime = null;

        /**
         * Latest Submission Time of Workflow
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.LatestSubmitTime = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;
        this.Creator = 'Creator' in params ? params.Creator : null;
        this.ModifyTime = 'ModifyTime' in params ? params.ModifyTime : null;
        this.DelayTime = 'DelayTime' in params ? params.DelayTime : null;
        this.StartupTime = 'StartupTime' in params ? params.StartupTime : null;
        this.SelfDepend = 'SelfDepend' in params ? params.SelfDepend : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;
        this.TaskAction = 'TaskAction' in params ? params.TaskAction : null;
        this.CycleType = 'CycleType' in params ? params.CycleType : null;
        this.CycleStep = 'CycleStep' in params ? params.CycleStep : null;
        this.CrontabExpression = 'CrontabExpression' in params ? params.CrontabExpression : null;
        this.ExecutionStartTime = 'ExecutionStartTime' in params ? params.ExecutionStartTime : null;
        this.ExecutionEndTime = 'ExecutionEndTime' in params ? params.ExecutionEndTime : null;
        this.InstanceInitStrategy = 'InstanceInitStrategy' in params ? params.InstanceInitStrategy : null;
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;
        this.DependencyWorkflow = 'DependencyWorkflow' in params ? params.DependencyWorkflow : null;
        this.SchedulerDesc = 'SchedulerDesc' in params ? params.SchedulerDesc : null;
        this.FirstSubmitTime = 'FirstSubmitTime' in params ? params.FirstSubmitTime : null;
        this.LatestSubmitTime = 'LatestSubmitTime' in params ? params.LatestSubmitTime : null;

    }
}

/**
 * Upstream Node Field Information
 * @class
 */
class SourceFieldInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Field Name
         * @type {string || null}
         */
        this.FieldName = null;

        /**
         * Field Type
         * @type {string || null}
         */
        this.FieldType = null;

        /**
         * Field Alias
         * @type {string || null}
         */
        this.Alias = null;

        /**
         * Field DescriptionNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Comment = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.FieldName = 'FieldName' in params ? params.FieldName : null;
        this.FieldType = 'FieldType' in params ? params.FieldType : null;
        this.Alias = 'Alias' in params ? params.Alias : null;
        this.Comment = 'Comment' in params ? params.Comment : null;

    }
}

/**
 * GetTaskInstance request structure.
 * @class
 */
class GetTaskInstanceRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * **Project ID**.
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Unique identifier of an instance.
         * @type {string || null}
         */
        this.InstanceKey = null;

        /**
         * Time zone.
Time zone. specifies the time zone. the default value is UTC+8.
         * @type {string || null}
         */
        this.ScheduleTimeZone = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.InstanceKey = 'InstanceKey' in params ? params.InstanceKey : null;
        this.ScheduleTimeZone = 'ScheduleTimeZone' in params ? params.ScheduleTimeZone : null;

    }
}

/**
 * DeleteDsFolder request structure.
 * @class
 */
class DeleteDsFolderRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Folder ID
         * @type {string || null}
         */
        this.FolderId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.FolderId = 'FolderId' in params ? params.FolderId : null;

    }
}

/**
 * SaveCustomFunction response structure.
 * @class
 */
class SaveCustomFunctionResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Function Unique IdentifierNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FunctionId = null;

        /**
         * NoNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ErrorMessage = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.FunctionId = 'FunctionId' in params ? params.FunctionId : null;
        this.ErrorMessage = 'ErrorMessage' in params ? params.ErrorMessage : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * ModifyDsFolder request structure.
 * @class
 */
class ModifyDsFolderRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Folder Name
         * @type {string || null}
         */
        this.FolderName = null;

        /**
         * Folder ID
         * @type {string || null}
         */
        this.FolderId = null;

        /**
         * Parent Folder ID
         * @type {string || null}
         */
        this.ParentsFolderId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.FolderName = 'FolderName' in params ? params.FolderName : null;
        this.FolderId = 'FolderId' in params ? params.FolderId : null;
        this.ParentsFolderId = 'ParentsFolderId' in params ? params.ParentsFolderId : null;

    }
}

/**
 * Task Submission Record
 * @class
 */
class AdhocRecord extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task Submission Record ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Id = null;

        /**
         * Script ContentNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ScriptContent = null;

        /**
         * Task Submission Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreateTime = null;

        /**
         * Task StatusNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Status = null;

        /**
         * Instance ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InstanceId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Id = 'Id' in params ? params.Id : null;
        this.ScriptContent = 'ScriptContent' in params ? params.ScriptContent : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;
        this.Status = 'Status' in params ? params.Status : null;
        this.InstanceId = 'InstanceId' in params ? params.InstanceId : null;

    }
}

/**
 * TriggerDsEvent response structure.
 * @class
 */
class TriggerDsEventResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Operation resultNote: This field may return null, indicating that no valid value can be obtained.
         * @type {BatchOpsDTO || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new BatchOpsDTO();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Event Continuous Time Instance Information
 * @class
 */
class EventBatchCaseDTO extends  AbstractModel {
    constructor(){
        super();

        /**
         * Event Instance ID
         * @type {string || null}
         */
        this.CaseId = null;

        /**
         * Event
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Event Trigger Start Time
         * @type {string || null}
         */
        this.StartDimension = null;

        /**
         * Creation Time
         * @type {string || null}
         */
        this.CreationTs = null;

        /**
         * Consumer ID
         * @type {string || null}
         */
        this.ConsumerId = null;

        /**
         * Description
         * @type {string || null}
         */
        this.Description = null;

        /**
         * Event Trigger End Time
         * @type {string || null}
         */
        this.EndDimension = null;

        /**
         * Event Cycle
         * @type {string || null}
         */
        this.EventSubType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.CaseId = 'CaseId' in params ? params.CaseId : null;
        this.Name = 'Name' in params ? params.Name : null;
        this.StartDimension = 'StartDimension' in params ? params.StartDimension : null;
        this.CreationTs = 'CreationTs' in params ? params.CreationTs : null;
        this.ConsumerId = 'ConsumerId' in params ? params.ConsumerId : null;
        this.Description = 'Description' in params ? params.Description : null;
        this.EndDimension = 'EndDimension' in params ? params.EndDimension : null;
        this.EventSubType = 'EventSubType' in params ? params.EventSubType : null;

    }
}

/**
 * CreateTask request structure.
 * @class
 */
class CreateTaskRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Workflow ID
         * @type {string || null}
         */
        this.WorkflowId = null;

        /**
         * Task Name
         * @type {string || null}
         */
        this.TaskName = null;

        /**
         * 26 Offline Synchronization,30 Python,31 PySpark,32 DLC,33 Impala,34 Hive SQL,35 Shell,36 Spark SQL,39 Spark,40 TCHouse-P,92 MapReduce
         * @type {number || null}
         */
        this.TaskType = null;

        /**
         * Extended Attributes
         * @type {Array.<TaskExtInfo> || null}
         */
        this.TaskExt = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;
        this.TaskName = 'TaskName' in params ? params.TaskName : null;
        this.TaskType = 'TaskType' in params ? params.TaskType : null;

        if (params.TaskExt) {
            this.TaskExt = new Array();
            for (let z in params.TaskExt) {
                let obj = new TaskExtInfo();
                obj.deserialize(params.TaskExt[z]);
                this.TaskExt.push(obj);
            }
        }

    }
}

/**
 * DescribeDatabaseMetas request structure.
 * @class
 */
class DescribeDatabaseMetasRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Filter Fields, projectIds/msTypes/createTime/modifiedTime
         * @type {Array.<Filter> || null}
         */
        this.Filters = null;

        /**
         * Sort Fields, such as name
         * @type {Array.<OrderField> || null}
         */
        this.OrderFields = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Filters) {
            this.Filters = new Array();
            for (let z in params.Filters) {
                let obj = new Filter();
                obj.deserialize(params.Filters[z]);
                this.Filters.push(obj);
            }
        }

        if (params.OrderFields) {
            this.OrderFields = new Array();
            for (let z in params.OrderFields) {
                let obj = new OrderField();
                obj.deserialize(params.OrderFields[z]);
                this.OrderFields.push(obj);
            }
        }

    }
}

/**
 * Table Field Information
 * @class
 */
class SearchColumnDocVO extends  AbstractModel {
    constructor(){
        super();

        /**
         * Field NameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Field Chinese Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ChineseName = null;

        /**
         * Field TypeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Type = null;

        /**
         * Field Type Length
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Length = null;

        /**
         * Field Type Precision
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Precision = null;

        /**
         * Field Type scale
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Scale = null;

        /**
         * Field Default Value
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DefaultValue = null;

        /**
         * Field DescriptionNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Description = null;

        /**
         * Field Order
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Position = null;

        /**
         * Is Partition Field
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.IsPartition = null;

        /**
         * Index Type on the column Primary Key: PRI, Unique Index: UNI, General Index: MUL
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ColumnKey = null;

        /**
         * Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreateTime = null;

        /**
         * Update timeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ModifiedTime = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Name = 'Name' in params ? params.Name : null;
        this.ChineseName = 'ChineseName' in params ? params.ChineseName : null;
        this.Type = 'Type' in params ? params.Type : null;
        this.Length = 'Length' in params ? params.Length : null;
        this.Precision = 'Precision' in params ? params.Precision : null;
        this.Scale = 'Scale' in params ? params.Scale : null;
        this.DefaultValue = 'DefaultValue' in params ? params.DefaultValue : null;
        this.Description = 'Description' in params ? params.Description : null;
        this.Position = 'Position' in params ? params.Position : null;
        this.IsPartition = 'IsPartition' in params ? params.IsPartition : null;
        this.ColumnKey = 'ColumnKey' in params ? params.ColumnKey : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;
        this.ModifiedTime = 'ModifiedTime' in params ? params.ModifiedTime : null;

    }
}

/**
 * Simple Task Information
 * @class
 */
class SimpleTaskInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Task Name
         * @type {string || null}
         */
        this.TaskName = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.TaskName = 'TaskName' in params ? params.TaskName : null;

    }
}

/**
 * DescribeSchedulerTaskCntByStatus request structure.
 * @class
 */
class DescribeSchedulerTaskCntByStatusRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * 1
         * @type {number || null}
         */
        this.TaskType = null;

        /**
         * Y
         * @type {string || null}
         */
        this.TypeName = null;

        /**
         * 111
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * 1
         * @type {string || null}
         */
        this.InCharge = null;

        /**
         * Workflow ID
         * @type {string || null}
         */
        this.WorkflowId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskType = 'TaskType' in params ? params.TaskType : null;
        this.TypeName = 'TypeName' in params ? params.TypeName : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.InCharge = 'InCharge' in params ? params.InCharge : null;
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;

    }
}

/**
 * DescribeRealTimeTaskInstanceNodeInfo request structure.
 * @class
 */
class DescribeRealTimeTaskInstanceNodeInfoRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Real-time Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * Event Instance Pagination Query Results
 * @class
 */
class EventCaseAuditLogVOCollection extends  AbstractModel {
    constructor(){
        super();

        /**
         * Total number of resultsNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * Total PagesNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalPage = null;

        /**
         * Number of records on current page
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.PageCount = null;

        /**
         * Page NumberNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Page sizeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Pagination Data
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<EventCaseAuditLogOptDto> || null}
         */
        this.Items = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.TotalPage = 'TotalPage' in params ? params.TotalPage : null;
        this.PageCount = 'PageCount' in params ? params.PageCount : null;
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;

        if (params.Items) {
            this.Items = new Array();
            for (let z in params.Items) {
                let obj = new EventCaseAuditLogOptDto();
                obj.deserialize(params.Items[z]);
                this.Items.push(obj);
            }
        }

    }
}

/**
 * DescribeDependTaskLists response structure.
 * @class
 */
class DescribeDependTaskListsResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Delete Result
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<TaskOpsDto> || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            this.Data = new Array();
            for (let z in params.Data) {
                let obj = new TaskOpsDto();
                obj.deserialize(params.Data[z]);
                this.Data.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * CreateHiveTable response structure.
 * @class
 */
class CreateHiveTableResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Whether table creation was successful
         * @type {boolean || null}
         */
        this.IsSuccess = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.IsSuccess = 'IsSuccess' in params ? params.IsSuccess : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * RuleTemplatePage results
 * @class
 */
class RuleTemplatePage extends  AbstractModel {
    constructor(){
        super();

        /**
         * Record Count
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * Template List
         * @type {Array.<RuleTemplate> || null}
         */
        this.Items = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;

        if (params.Items) {
            this.Items = new Array();
            for (let z in params.Items) {
                let obj = new RuleTemplate();
                obj.deserialize(params.Items[z]);
                this.Items.push(obj);
            }
        }

    }
}

/**
 * ModifyDataSource response structure.
 * @class
 */
class ModifyDataSourceResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Was it successful
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeTaskByStatusReport response structure.
 * @class
 */
class DescribeTaskByStatusReportResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task reporting trend indicators
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<TaskByStatus> || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            this.Data = new Array();
            for (let z in params.Data) {
                let obj = new TaskByStatus();
                obj.deserialize(params.Data[z]);
                this.Data.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * ModifyDimensionWeight request structure.
 * @class
 */
class ModifyDimensionWeightRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Weight Information List
         * @type {Array.<WeightInfo> || null}
         */
        this.WeightInfoList = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Whether to Refresh Historical Data
         * @type {boolean || null}
         */
        this.Refresh = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.WeightInfoList) {
            this.WeightInfoList = new Array();
            for (let z in params.WeightInfoList) {
                let obj = new WeightInfo();
                obj.deserialize(params.WeightInfoList[z]);
                this.WeightInfoList.push(obj);
            }
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.Refresh = 'Refresh' in params ? params.Refresh : null;

    }
}

/**
 * Supplementary Plan Date Range
 * @class
 */
class CreateMakeDatetimeInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Start date
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.StartDate = null;

        /**
         * End date
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EndDate = null;

        /**
         * Start TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * End timeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EndTime = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.StartDate = 'StartDate' in params ? params.StartDate : null;
        this.EndDate = 'EndDate' in params ? params.EndDate : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;

    }
}

/**
 * Instance Query Type
 * @class
 */
class InstanceApiOpsRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Single Query Condition
         * @type {InstanceOpsDto || null}
         */
        this.Instance = null;

        /**
         * Sort fields, currently includes: Retry Count, Instance Data Time, Runtime Duration
         * @type {string || null}
         */
        this.SortCol = null;

        /**
         * Task ID list
         * @type {Array.<string> || null}
         */
        this.TaskIdList = null;

        /**
         * Fuzzy search by taskName
         * @type {Array.<string> || null}
         */
        this.TaskNameList = null;

        /**
         * Folder List
         * @type {Array.<string> || null}
         */
        this.FolderList = null;

        /**
         * Ascending or Descending
         * @type {string || null}
         */
        this.Sort = null;

        /**
         * Instance Status List
         * @type {Array.<number> || null}
         */
        this.StateList = null;

        /**
         * Instance Type List
         * @type {Array.<number> || null}
         */
        this.TaskTypeList = null;

        /**
         * Cycle Type
         * @type {Array.<string> || null}
         */
        this.CycleList = null;

        /**
         * Person in Charge
         * @type {Array.<string> || null}
         */
        this.OwnerList = null;

        /**
         * Data Timestamp
         * @type {string || null}
         */
        this.DateFrom = null;

        /**
         * Data Timestamp
         * @type {string || null}
         */
        this.DateTo = null;

        /**
         * Instance Storage Time
         * @type {string || null}
         */
        this.CreateTimeFrom = null;

        /**
         * Instance Storage Time
         * @type {string || null}
         */
        this.CreateTimeTo = null;

        /**
         * Start Execution Time
         * @type {string || null}
         */
        this.StartFrom = null;

        /**
         * Start Execution Time
         * @type {string || null}
         */
        this.StartTo = null;

        /**
         * Belongs to Workflow
         * @type {Array.<string> || null}
         */
        this.WorkflowIdList = null;

        /**
         * Fuzzy search by workflowName
         * @type {Array.<string> || null}
         */
        this.WorkflowNameList = null;

        /**
         * Keyword Fuzzy Search
         * @type {string || null}
         */
        this.Keyword = null;

        /**
         * searchColumns are the list of field names to search
         * @type {Array.<string> || null}
         */
        this.SearchColumns = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Limit
         * @type {number || null}
         */
        this.Limit = null;

        /**
         * Task Type Mapping Relationship, storing Task Type ID and Task Type Description Information
         * @type {Array.<TaskTypeMap> || null}
         */
        this.TaskTypeMap = null;

        /**
         * 0 Supplementary Entry Type 1 Periodic Instance 2 Non-periodic Instance
         * @type {string || null}
         */
        this.InstanceType = null;

        /**
         * Whether it is DAG
         * @type {boolean || null}
         */
        this.DagDeal = null;

        /**
         * 1 Parent instance 2 Child instance
         * @type {string || null}
         */
        this.DagType = null;

        /**
         * 1 Self-Dependency 2 Task Dependency 3 All Dependencies
         * @type {string || null}
         */
        this.DagDependent = null;

        /**
         * DAG Depth Default to 1, value range 1-6
         * @type {number || null}
         */
        this.DagDepth = null;

        /**
         * Tenant ID
         * @type {string || null}
         */
        this.TenantId = null;

        /**
         * Inquiry based on Current Data Time or Next Data Time, default to Current Data Time
         * @type {string || null}
         */
        this.DataTimeCycle = null;

        /**
         * Resource Group ID, multiple Resource Group IDs separated by English commas
         * @type {Array.<string> || null}
         */
        this.ExecutorGroupIdList = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Instance) {
            let obj = new InstanceOpsDto();
            obj.deserialize(params.Instance)
            this.Instance = obj;
        }
        this.SortCol = 'SortCol' in params ? params.SortCol : null;
        this.TaskIdList = 'TaskIdList' in params ? params.TaskIdList : null;
        this.TaskNameList = 'TaskNameList' in params ? params.TaskNameList : null;
        this.FolderList = 'FolderList' in params ? params.FolderList : null;
        this.Sort = 'Sort' in params ? params.Sort : null;
        this.StateList = 'StateList' in params ? params.StateList : null;
        this.TaskTypeList = 'TaskTypeList' in params ? params.TaskTypeList : null;
        this.CycleList = 'CycleList' in params ? params.CycleList : null;
        this.OwnerList = 'OwnerList' in params ? params.OwnerList : null;
        this.DateFrom = 'DateFrom' in params ? params.DateFrom : null;
        this.DateTo = 'DateTo' in params ? params.DateTo : null;
        this.CreateTimeFrom = 'CreateTimeFrom' in params ? params.CreateTimeFrom : null;
        this.CreateTimeTo = 'CreateTimeTo' in params ? params.CreateTimeTo : null;
        this.StartFrom = 'StartFrom' in params ? params.StartFrom : null;
        this.StartTo = 'StartTo' in params ? params.StartTo : null;
        this.WorkflowIdList = 'WorkflowIdList' in params ? params.WorkflowIdList : null;
        this.WorkflowNameList = 'WorkflowNameList' in params ? params.WorkflowNameList : null;
        this.Keyword = 'Keyword' in params ? params.Keyword : null;
        this.SearchColumns = 'SearchColumns' in params ? params.SearchColumns : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.Limit = 'Limit' in params ? params.Limit : null;

        if (params.TaskTypeMap) {
            this.TaskTypeMap = new Array();
            for (let z in params.TaskTypeMap) {
                let obj = new TaskTypeMap();
                obj.deserialize(params.TaskTypeMap[z]);
                this.TaskTypeMap.push(obj);
            }
        }
        this.InstanceType = 'InstanceType' in params ? params.InstanceType : null;
        this.DagDeal = 'DagDeal' in params ? params.DagDeal : null;
        this.DagType = 'DagType' in params ? params.DagType : null;
        this.DagDependent = 'DagDependent' in params ? params.DagDependent : null;
        this.DagDepth = 'DagDepth' in params ? params.DagDepth : null;
        this.TenantId = 'TenantId' in params ? params.TenantId : null;
        this.DataTimeCycle = 'DataTimeCycle' in params ? params.DataTimeCycle : null;
        this.ExecutorGroupIdList = 'ExecutorGroupIdList' in params ? params.ExecutorGroupIdList : null;

    }
}

/**
 * SubmitSqlTask request structure.
 * @class
 */
class SubmitSqlTaskRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Database Type
         * @type {string || null}
         */
        this.DatabaseType = null;

        /**
         * Data Source ID
         * @type {number || null}
         */
        this.DatasourceId = null;

        /**
         * Resource Group ID
         * @type {string || null}
         */
        this.GroupId = null;

        /**
         * Script File ID
         * @type {string || null}
         */
        this.ScriptId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Database name
         * @type {string || null}
         */
        this.DatabaseName = null;

        /**
         * Execution Engine Instance ID
         * @type {string || null}
         */
        this.EngineId = null;

        /**
         * Script Content
         * @type {string || null}
         */
        this.ScriptContent = null;

        /**
         * Resource Queue
         * @type {string || null}
         */
        this.ResourceQueue = null;

        /**
         * Database Type
         * @type {string || null}
         */
        this.DatasourceType = null;

        /**
         * Compute Resource Name
         * @type {string || null}
         */
        this.ComputeResource = null;

        /**
         * Advanced Running Parameters
         * @type {string || null}
         */
        this.RunParams = null;

        /**
         * Advanced Settings
         * @type {string || null}
         */
        this.ConfParams = null;

        /**
         * Whether the script content is Base64 encrypted
         * @type {boolean || null}
         */
        this.ScriptEncryption = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.DatabaseType = 'DatabaseType' in params ? params.DatabaseType : null;
        this.DatasourceId = 'DatasourceId' in params ? params.DatasourceId : null;
        this.GroupId = 'GroupId' in params ? params.GroupId : null;
        this.ScriptId = 'ScriptId' in params ? params.ScriptId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.DatabaseName = 'DatabaseName' in params ? params.DatabaseName : null;
        this.EngineId = 'EngineId' in params ? params.EngineId : null;
        this.ScriptContent = 'ScriptContent' in params ? params.ScriptContent : null;
        this.ResourceQueue = 'ResourceQueue' in params ? params.ResourceQueue : null;
        this.DatasourceType = 'DatasourceType' in params ? params.DatasourceType : null;
        this.ComputeResource = 'ComputeResource' in params ? params.ComputeResource : null;
        this.RunParams = 'RunParams' in params ? params.RunParams : null;
        this.ConfParams = 'ConfParams' in params ? params.ConfParams : null;
        this.ScriptEncryption = 'ScriptEncryption' in params ? params.ScriptEncryption : null;

    }
}

/**
 * DescribeTaskLockStatus response structure.
 * @class
 */
class DescribeTaskLockStatusResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task lock status information
         * @type {TaskLockStatus || null}
         */
        this.TaskLockStatus = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.TaskLockStatus) {
            let obj = new TaskLockStatus();
            obj.deserialize(params.TaskLockStatus)
            this.TaskLockStatus = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Submit task information.
 * @class
 */
class ReportTaskListInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task list details.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {Array.<TaskInfoVo> || null}
         */
        this.Rows = null;

        /**
         * Page number

Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.PageNum = null;

        /**
         * Entries per page.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Total number of records

Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * Total pages

Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.TotalPageNumber = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Rows) {
            this.Rows = new Array();
            for (let z in params.Rows) {
                let obj = new TaskInfoVo();
                obj.deserialize(params.Rows[z]);
                this.Rows.push(obj);
            }
        }
        this.PageNum = 'PageNum' in params ? params.PageNum : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.TotalPageNumber = 'TotalPageNumber' in params ? params.TotalPageNumber : null;

    }
}

/**
 * RemoveWorkflowDs request structure.
 * @class
 */
class RemoveWorkflowDsRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Workflow ID
         * @type {string || null}
         */
        this.WorkflowId = null;

        /**
         * Whether to delete the script
         * @type {string || null}
         */
        this.DeleteScript = null;

        /**
         * Notify downstream if deleted
         * @type {string || null}
         */
        this.OperateIsInform = null;

        /**
         * Whether to terminate ongoing tasks
         * @type {string || null}
         */
        this.DeleteMode = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;
        this.DeleteScript = 'DeleteScript' in params ? params.DeleteScript : null;
        this.OperateIsInform = 'OperateIsInform' in params ? params.OperateIsInform : null;
        this.DeleteMode = 'DeleteMode' in params ? params.DeleteMode : null;

    }
}

/**
 * BatchKillIntegrationTaskInstances request structure.
 * @class
 */
class BatchKillIntegrationTaskInstancesRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Instance Information
         * @type {Array.<SchedulerTaskInstanceInfo> || null}
         */
        this.Instances = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Instances) {
            this.Instances = new Array();
            for (let z in params.Instances) {
                let obj = new SchedulerTaskInstanceInfo();
                obj.deserialize(params.Instances[z]);
                this.Instances.push(obj);
            }
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * DeleteTaskDs request structure.
 * @class
 */
class DeleteTaskDsRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Delete script?
true: delete
false: do not delete
Default false if not passed
         * @type {boolean || null}
         */
        this.DeleteScript = null;

        /**
         * Task operation: Notify downstream task owners?
true: notify
false: do not notify
Default false if not passed
         * @type {boolean || null}
         */
        this.OperateInform = null;

        /**
         * Task IDChoose either VirtualTaskId or
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Virtual task id
Either TaskId or this field is optional

         * @type {string || null}
         */
        this.VirtualTaskId = null;

        /**
         * Virtual task flag
true: It is a virtual task
false: It is not a virtual task
Default false if not passed
         * @type {boolean || null}
         */
        this.VirtualFlag = null;

        /**
         * Task deletion method
true: Do not force fail downstream task instances
false: Force fail downstream task instances
If not specified, the default is false

         * @type {boolean || null}
         */
        this.DeleteMode = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.DeleteScript = 'DeleteScript' in params ? params.DeleteScript : null;
        this.OperateInform = 'OperateInform' in params ? params.OperateInform : null;
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.VirtualTaskId = 'VirtualTaskId' in params ? params.VirtualTaskId : null;
        this.VirtualFlag = 'VirtualFlag' in params ? params.VirtualFlag : null;
        this.DeleteMode = 'DeleteMode' in params ? params.DeleteMode : null;

    }
}

/**
 * BatchStopOpsTasks response structure.
 * @class
 */
class BatchStopOpsTasksResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Returns the number of successful batch operations, the number of failures, and the total number of operations
         * @type {BatchOperationOpsDto || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new BatchOperationOpsDto();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Instance log information details
 * @class
 */
class InstanceLogInfoOpsDto extends  AbstractModel {
    constructor(){
        super();

        /**
         * Instance running log
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.LogInfo = null;

        /**
         * The Yarn log address submitted by the instance run
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<string> || null}
         */
        this.YarnLogInfo = null;

        /**
         * The datax log generated by the instance run
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DataLogInfo = null;

        /**
         * Third-party Task Execution Log
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ThirdTaskRunLogInfo = null;

        /**
         * Third-party Task Log Link Description
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ThirdTaskLogUrlDesc = null;

        /**
         * Number of Log Lines
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.LineCount = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.LogInfo = 'LogInfo' in params ? params.LogInfo : null;
        this.YarnLogInfo = 'YarnLogInfo' in params ? params.YarnLogInfo : null;
        this.DataLogInfo = 'DataLogInfo' in params ? params.DataLogInfo : null;
        this.ThirdTaskRunLogInfo = 'ThirdTaskRunLogInfo' in params ? params.ThirdTaskRunLogInfo : null;
        this.ThirdTaskLogUrlDesc = 'ThirdTaskLogUrlDesc' in params ? params.ThirdTaskLogUrlDesc : null;
        this.LineCount = 'LineCount' in params ? params.LineCount : null;

    }
}

/**
 * DeleteFilePath response structure.
 * @class
 */
class DeleteFilePathResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * File ListNote: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<UserFileInfo> || null}
         */
        this.UserFileList = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.UserFileList) {
            this.UserFileList = new Array();
            for (let z in params.UserFileList) {
                let obj = new UserFileInfo();
                obj.deserialize(params.UserFileList[z]);
                this.UserFileList.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Error Handling Result Information
 * @class
 */
class FailMessage extends  AbstractModel {
    constructor(){
        super();

        /**
         * Unique Data Identifier
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Key = null;

        /**
         * Failure Reason
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ErrorMessage = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Key = 'Key' in params ? params.Key : null;
        this.ErrorMessage = 'ErrorMessage' in params ? params.ErrorMessage : null;

    }
}

/**
 * RunRerunScheduleInstances response structure.
 * @class
 */
class RunRerunScheduleInstancesResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Result
         * @type {BatchOperateResultOpsDto || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new BatchOperateResultOpsDto();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Dependency Configuration
 * @class
 */
class DependencyConfig extends  AbstractModel {
    constructor(){
        super();

        /**
         * Only five types of periodic execution dependency configurations: HOUR, DAY, WEEK, MONTH, YEAR, CRONTAB, MINUTE
         * @type {string || null}
         */
        this.DependConfType = null;

        /**
         * Dependency Configuration Subordinate Period Type, CURRENT_HOUR, PREVIOUS_HOUR, CURRENT_DAY, PREVIOUS_DAY, PREVIOUS_WEEK, PREVIOUS_FRIDAY, PREVIOUS_WEEKEND, CURRENT_MONTH, PREVIOUS_MONTH, PREVIOUS_END_OF_MONTH
     * PREVIOUS_BEGIN_OF_MONTH,ALL_MONTH_OF_YEAR,ALL_DAY_OF_YEAR,CURRENT_YEAR,CURRENT,CURRENT_MINUTE,PREVIOUS_MINUTE_CYCLE,PREVIOUS_HOUR_CYCLE
         * @type {string || null}
         */
        this.SubordinateCyclicType = null;

        /**
         * WAITING, waiting (default policy) EXECUTING: executing
         * @type {string || null}
         */
        this.DependencyStrategy = null;

        /**
         * Parent Task Information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {TaskInnerInfo || null}
         */
        this.ParentTask = null;

        /**
         * Subtask Information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {TaskInnerInfo || null}
         */
        this.SonTask = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.DependConfType = 'DependConfType' in params ? params.DependConfType : null;
        this.SubordinateCyclicType = 'SubordinateCyclicType' in params ? params.SubordinateCyclicType : null;
        this.DependencyStrategy = 'DependencyStrategy' in params ? params.DependencyStrategy : null;

        if (params.ParentTask) {
            let obj = new TaskInnerInfo();
            obj.deserialize(params.ParentTask)
            this.ParentTask = obj;
        }

        if (params.SonTask) {
            let obj = new TaskInnerInfo();
            obj.deserialize(params.SonTask)
            this.SonTask = obj;
        }

    }
}

/**
 * RobAndLockIntegrationTask request structure.
 * @class
 */
class RobAndLockIntegrationTaskRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Task Type: 201. stream, 202. offline
         * @type {number || null}
         */
        this.TaskType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.TaskType = 'TaskType' in params ? params.TaskType : null;

    }
}

/**
 * ModifyTaskInfo response structure.
 * @class
 */
class ModifyTaskInfoResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Execution Result
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Data Monitoring Results
 * @class
 */
class DataCheckStat extends  AbstractModel {
    constructor(){
        super();

        /**
         * Total Tables
         * @type {number || null}
         */
        this.TableTotal = null;

        /**
         * Total Number of Fields
         * @type {number || null}
         */
        this.ColumnTotal = null;

        /**
         * Number of Table Configuration Checks
         * @type {number || null}
         */
        this.TableConfig = null;

        /**
         * Number of Field Configuration Checks
         * @type {number || null}
         */
        this.ColumnConfig = null;

        /**
         * Actual Number of Table Checks
         * @type {number || null}
         */
        this.TableExec = null;

        /**
         * Actual Number of Field Checks
         * @type {number || null}
         */
        this.ColumnExec = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TableTotal = 'TableTotal' in params ? params.TableTotal : null;
        this.ColumnTotal = 'ColumnTotal' in params ? params.ColumnTotal : null;
        this.TableConfig = 'TableConfig' in params ? params.TableConfig : null;
        this.ColumnConfig = 'ColumnConfig' in params ? params.ColumnConfig : null;
        this.TableExec = 'TableExec' in params ? params.TableExec : null;
        this.ColumnExec = 'ColumnExec' in params ? params.ColumnExec : null;

    }
}

/**
 * CreateRule request structure.
 * @class
 */
class CreateRuleRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Rule Group ID
         * @type {number || null}
         */
        this.RuleGroupId = null;

        /**
         * Rule name
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Data Table ID
         * @type {string || null}
         */
        this.TableId = null;

        /**
         * Rule Template List
         * @type {number || null}
         */
        this.RuleTemplateId = null;

        /**
         * Rule type 1.System Template, 2.Custom Definition Template, 3.Custom Definition SQL
         * @type {number || null}
         */
        this.Type = null;

        /**
         * Quality Dimension of Rule (1: Accuracy, 2: Uniqueness, 3: Integrity, 4: Consistency, 5: Timeliness, 6: Validity)
         * @type {number || null}
         */
        this.QualityDim = null;

        /**
         * Source Field Detailed Type, int, string
         * @type {string || null}
         */
        this.SourceObjectDataTypeName = null;

        /**
         * Source Field Name
         * @type {string || null}
         */
        this.SourceObjectValue = null;

        /**
         * Detection Range 1.Whole Table 2.Conditional Scan
         * @type {number || null}
         */
        this.ConditionType = null;

        /**
         * Conditional Scan WHERE Condition Expression
         * @type {string || null}
         */
        this.ConditionExpression = null;

        /**
         * Custom Definition SQL
         * @type {string || null}
         */
        this.CustomSql = null;

        /**
         * Alert Trigger Condition
         * @type {CompareRule || null}
         */
        this.CompareRule = null;

        /**
         * Alert Trigger Level 1.Low, 2.Medium, 3.High
         * @type {number || null}
         */
        this.AlarmLevel = null;

        /**
         * Rule Description
         * @type {string || null}
         */
        this.Description = null;

        /**
         * Data Source ID
         * @type {string || null}
         */
        this.DatasourceId = null;

        /**
         * Database ID
         * @type {string || null}
         */
        this.DatabaseId = null;

        /**
         * Target Database Id
         * @type {string || null}
         */
        this.TargetDatabaseId = null;

        /**
         * Target Table Id
         * @type {string || null}
         */
        this.TargetTableId = null;

        /**
         * Target Filter Condition Expression
         * @type {string || null}
         */
        this.TargetConditionExpr = null;

        /**
         * Source Field and Target Field Association Condition ON Expression
         * @type {string || null}
         */
        this.RelConditionExpr = null;

        /**
         * Custom Definition Template SQL Expression Field Replacement Parameter
         * @type {RuleFieldConfig || null}
         */
        this.FieldConfig = null;

        /**
         * Target Field Name CITY
         * @type {string || null}
         */
        this.TargetObjectValue = null;

        /**
         * Supported Execution Engine List for the Rule
         * @type {Array.<number> || null}
         */
        this.SourceEngineTypes = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.RuleGroupId = 'RuleGroupId' in params ? params.RuleGroupId : null;
        this.Name = 'Name' in params ? params.Name : null;
        this.TableId = 'TableId' in params ? params.TableId : null;
        this.RuleTemplateId = 'RuleTemplateId' in params ? params.RuleTemplateId : null;
        this.Type = 'Type' in params ? params.Type : null;
        this.QualityDim = 'QualityDim' in params ? params.QualityDim : null;
        this.SourceObjectDataTypeName = 'SourceObjectDataTypeName' in params ? params.SourceObjectDataTypeName : null;
        this.SourceObjectValue = 'SourceObjectValue' in params ? params.SourceObjectValue : null;
        this.ConditionType = 'ConditionType' in params ? params.ConditionType : null;
        this.ConditionExpression = 'ConditionExpression' in params ? params.ConditionExpression : null;
        this.CustomSql = 'CustomSql' in params ? params.CustomSql : null;

        if (params.CompareRule) {
            let obj = new CompareRule();
            obj.deserialize(params.CompareRule)
            this.CompareRule = obj;
        }
        this.AlarmLevel = 'AlarmLevel' in params ? params.AlarmLevel : null;
        this.Description = 'Description' in params ? params.Description : null;
        this.DatasourceId = 'DatasourceId' in params ? params.DatasourceId : null;
        this.DatabaseId = 'DatabaseId' in params ? params.DatabaseId : null;
        this.TargetDatabaseId = 'TargetDatabaseId' in params ? params.TargetDatabaseId : null;
        this.TargetTableId = 'TargetTableId' in params ? params.TargetTableId : null;
        this.TargetConditionExpr = 'TargetConditionExpr' in params ? params.TargetConditionExpr : null;
        this.RelConditionExpr = 'RelConditionExpr' in params ? params.RelConditionExpr : null;

        if (params.FieldConfig) {
            let obj = new RuleFieldConfig();
            obj.deserialize(params.FieldConfig)
            this.FieldConfig = obj;
        }
        this.TargetObjectValue = 'TargetObjectValue' in params ? params.TargetObjectValue : null;
        this.SourceEngineTypes = 'SourceEngineTypes' in params ? params.SourceEngineTypes : null;

    }
}

/**
 * Integrated Node Schema
 * @class
 */
class IntegrationNodeSchema extends  AbstractModel {
    constructor(){
        super();

        /**
         * Schema ID Random Unique
         * @type {string || null}
         */
        this.Id = null;

        /**
         * Schema Name
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Schema Type
         * @type {string || null}
         */
        this.Type = null;

        /**
         * Schema Value
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Value = null;

        /**
         * Schema Extended Attributes
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<RecordField> || null}
         */
        this.Properties = null;

        /**
         * Schema Alias
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Alias = null;

        /**
         * Field Remarks
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Comment = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Id = 'Id' in params ? params.Id : null;
        this.Name = 'Name' in params ? params.Name : null;
        this.Type = 'Type' in params ? params.Type : null;
        this.Value = 'Value' in params ? params.Value : null;

        if (params.Properties) {
            this.Properties = new Array();
            for (let z in params.Properties) {
                let obj = new RecordField();
                obj.deserialize(params.Properties[z]);
                this.Properties.push(obj);
            }
        }
        this.Alias = 'Alias' in params ? params.Alias : null;
        this.Comment = 'Comment' in params ? params.Comment : null;

    }
}

/**
 * DescribeColumnsMeta response structure.
 * @class
 */
class DescribeColumnsMetaResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Pagination return
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<ColumnMeta> || null}
         */
        this.ColumnMetaSet = null;

        /**
         * Number of records
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.ColumnMetaSet) {
            this.ColumnMetaSet = new Array();
            for (let z in params.ColumnMetaSet) {
                let obj = new ColumnMeta();
                obj.deserialize(params.ColumnMetaSet[z]);
                this.ColumnMetaSet.push(obj);
            }
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeRuleExecResults response structure.
 * @class
 */
class DescribeRuleExecResultsResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Rule Execution Result List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {RuleExecResultPage || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new RuleExecResultPage();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Quality Score Trend
 * @class
 */
class QualityScoreTrend extends  AbstractModel {
    constructor(){
        super();

        /**
         * Periodic Average Score
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.AverageScore = null;

        /**
         * Daily Score List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<DailyScoreInfo> || null}
         */
        this.DailyScoreList = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.AverageScore = 'AverageScore' in params ? params.AverageScore : null;

        if (params.DailyScoreList) {
            this.DailyScoreList = new Array();
            for (let z in params.DailyScoreList) {
                let obj = new DailyScoreInfo();
                obj.deserialize(params.DailyScoreList[z]);
                this.DailyScoreList.push(obj);
            }
        }

    }
}

/**
 * DeleteFile response structure.
 * @class
 */
class DeleteFileResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Delete Result
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.Result = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Result = 'Result' in params ? params.Result : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * ResumeIntegrationTask request structure.
 * @class
 */
class ResumeIntegrationTaskRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Event type (START, STOP, SUSPEND, RESUME, COMMIT, TIMESTAMP)
         * @type {string || null}
         */
        this.Event = null;

        /**
         * Additional parameters
         * @type {Array.<RecordField> || null}
         */
        this.ExtConfig = null;

        /**
         * Describe the type of front-end operation
         * @type {string || null}
         */
        this.EventDesc = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.Event = 'Event' in params ? params.Event : null;

        if (params.ExtConfig) {
            this.ExtConfig = new Array();
            for (let z in params.ExtConfig) {
                let obj = new RecordField();
                obj.deserialize(params.ExtConfig[z]);
                this.ExtConfig.push(obj);
            }
        }
        this.EventDesc = 'EventDesc' in params ? params.EventDesc : null;

    }
}

/**
 * ModifyDataSource request structure.
 * @class
 */
class ModifyDataSourceRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Data Source Name, cannot be empty under the same SpaceName
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Data Source Category: Binding Engine, Binding Database
         * @type {string || null}
         */
        this.Category = null;

        /**
         * Data Source Type: enumerated values
         * @type {string || null}
         */
        this.Type = null;

        /**
         * Data Source ID
         * @type {number || null}
         */
        this.ID = null;

        /**
         * Configuration Information Extension of Business Data Source
         * @type {string || null}
         */
        this.BizParams = null;

        /**
         * Data source configuration information, stored as JSON KV. The KV storage information varies according to the data source type
         * @type {string || null}
         */
        this.Params = null;

        /**
         * Data source description information
         * @type {string || null}
         */
        this.Description = null;

        /**
         * Data Source Display Name, for visual inspection
         * @type {string || null}
         */
        this.Display = null;

        /**
         * If the data source list is bound to a database, then it is the database name
         * @type {string || null}
         */
        this.DatabaseName = null;

        /**
         * Instance ID of the data source engine, e.g., CDB Instance ID
         * @type {string || null}
         */
        this.Instance = null;

        /**
         * Visibility of the data source, where 1 is visible and 0 is not visible. Default is 1
         * @type {number || null}
         */
        this.Status = null;

        /**
         * Name of the business space to which the data source belongs
         * @type {string || null}
         */
        this.ClusterId = null;

        /**
         * Collection Status
         * @type {string || null}
         */
        this.Collect = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.OwnerProjectId = null;

        /**
         * Project name
         * @type {string || null}
         */
        this.OwnerProjectName = null;

        /**
         * Project Chinese Name
         * @type {string || null}
         */
        this.OwnerProjectIdent = null;

        /**
         * cos bucket
         * @type {string || null}
         */
        this.COSBucket = null;

        /**
         * cos region
         * @type {string || null}
         */
        this.COSRegion = null;

        /**
         * Operation Item ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Data Source Development Environment Configuration
         * @type {string || null}
         */
        this.DevelopmentParams = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Name = 'Name' in params ? params.Name : null;
        this.Category = 'Category' in params ? params.Category : null;
        this.Type = 'Type' in params ? params.Type : null;
        this.ID = 'ID' in params ? params.ID : null;
        this.BizParams = 'BizParams' in params ? params.BizParams : null;
        this.Params = 'Params' in params ? params.Params : null;
        this.Description = 'Description' in params ? params.Description : null;
        this.Display = 'Display' in params ? params.Display : null;
        this.DatabaseName = 'DatabaseName' in params ? params.DatabaseName : null;
        this.Instance = 'Instance' in params ? params.Instance : null;
        this.Status = 'Status' in params ? params.Status : null;
        this.ClusterId = 'ClusterId' in params ? params.ClusterId : null;
        this.Collect = 'Collect' in params ? params.Collect : null;
        this.OwnerProjectId = 'OwnerProjectId' in params ? params.OwnerProjectId : null;
        this.OwnerProjectName = 'OwnerProjectName' in params ? params.OwnerProjectName : null;
        this.OwnerProjectIdent = 'OwnerProjectIdent' in params ? params.OwnerProjectIdent : null;
        this.COSBucket = 'COSBucket' in params ? params.COSBucket : null;
        this.COSRegion = 'COSRegion' in params ? params.COSRegion : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.DevelopmentParams = 'DevelopmentParams' in params ? params.DevelopmentParams : null;

    }
}

/**
 * TriggerEvent response structure.
 * @class
 */
class TriggerEventResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Success or FailureNote: This field may return null, indicating that no valid value can be obtained.
         * @type {BatchReturn || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new BatchReturn();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Task Alert Information
 * @class
 */
class TaskAlarmInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Rule name
         * @type {string || null}
         */
        this.RegularName = null;

        /**
         * Rule Status (0 for off, 1 for on)
         * @type {number || null}
         */
        this.RegularStatus = null;

        /**
         * Alert Level (0 for general, 1 for critical, 2 for urgent)
         * @type {number || null}
         */
        this.AlarmLevel = null;

        /**
         * Alert Method, separated by commas (1: email, 2: SMS, 3: WeChat, 4: voice call, 5: represents WeCom, 6: http)
         * @type {string || null}
         */
        this.AlarmWay = null;

        /**
         * Task Type (201 for real-time, 202 for offline)
         * @type {number || null}
         */
        this.TaskType = null;

        /**
         * ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Id = null;

        /**
         * Rule ID
         * @type {string || null}
         */
        this.RegularId = null;

        /**
         * Alert Metrics, 0 for task failure, 1 for task run timeout, 2 for task stop, 3 for task pause,4 Write Speed, 5 Read Speed, 6 Read Throughput, 7 Write Throughput, 8 Dirty Data Byte Count, 9 Number of Dirty Data Entries
         * @type {number || null}
         */
        this.AlarmIndicator = null;

        /**
         * Metric Threshold (1 for the first run failure of an offline task, 2 for all retries failed of an offline task)
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TriggerType = null;

        /**
         * Estimated Timeout Duration (Minute Level)
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.EstimatedTime = null;

        /**
         * Alert Recipient ID, separated by commas
         * @type {string || null}
         */
        this.AlarmRecipientId = null;

        /**
         * Project IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * CreatorNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Creater = null;

        /**
         * Alert Recipient Nickname, separated by commas
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.AlarmRecipientName = null;

        /**
         * Alert Metric Description
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.AlarmIndicatorDesc = null;

        /**
         * Parameters needed for real-time task alerts, 1 is greater than, 2 is less than
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Operator = null;

        /**
         * Node ID, separated by commas
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.NodeId = null;

        /**
         * Node name, separated by commas
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.NodeName = null;

        /**
         * Metric List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<AlarmIndicatorInfo> || null}
         */
        this.AlarmIndicatorInfos = null;

        /**
         * Alert Recipient Type, 0 is designated person; 1 is task responsible person
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.AlarmRecipientType = null;

        /**
         * Do not disturb time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<QuietPeriod> || null}
         */
        this.QuietPeriods = null;

        /**
         * Enterprise WeChat Group Hook Address, multiple hook addresses separated by commas
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.WeComHook = null;

        /**
         * Last Operation Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.UpdateTime = null;

        /**
         * Last Operator Uin
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.OperatorUin = null;

        /**
         * Associated Task Count
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TaskCount = null;

        /**
         * Monitored Object Type, 1: all tasks, 2: specified tasks, 3: specified responsible person
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.MonitorType = null;

        /**
         * Monitoring Object List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<string> || null}
         */
        this.MonitorObjectIds = null;

        /**
         * Instance ID of the Last Alert
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.LatestAlarmInstanceId = null;

        /**
         * Time of the Last Alert
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.LatestAlarmTime = null;

        /**
         * Alert Rule Description
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Description = null;

        /**
         * FeiShu Group Hook Address, multiple hook addresses separated by commas
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.LarkWebHooks = null;

        /**
         * DingTalk Group Hook addresses, multiple hook addresses separated by commas
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DingDingWebHooks = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.RegularName = 'RegularName' in params ? params.RegularName : null;
        this.RegularStatus = 'RegularStatus' in params ? params.RegularStatus : null;
        this.AlarmLevel = 'AlarmLevel' in params ? params.AlarmLevel : null;
        this.AlarmWay = 'AlarmWay' in params ? params.AlarmWay : null;
        this.TaskType = 'TaskType' in params ? params.TaskType : null;
        this.Id = 'Id' in params ? params.Id : null;
        this.RegularId = 'RegularId' in params ? params.RegularId : null;
        this.AlarmIndicator = 'AlarmIndicator' in params ? params.AlarmIndicator : null;
        this.TriggerType = 'TriggerType' in params ? params.TriggerType : null;
        this.EstimatedTime = 'EstimatedTime' in params ? params.EstimatedTime : null;
        this.AlarmRecipientId = 'AlarmRecipientId' in params ? params.AlarmRecipientId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.Creater = 'Creater' in params ? params.Creater : null;
        this.AlarmRecipientName = 'AlarmRecipientName' in params ? params.AlarmRecipientName : null;
        this.AlarmIndicatorDesc = 'AlarmIndicatorDesc' in params ? params.AlarmIndicatorDesc : null;
        this.Operator = 'Operator' in params ? params.Operator : null;
        this.NodeId = 'NodeId' in params ? params.NodeId : null;
        this.NodeName = 'NodeName' in params ? params.NodeName : null;

        if (params.AlarmIndicatorInfos) {
            this.AlarmIndicatorInfos = new Array();
            for (let z in params.AlarmIndicatorInfos) {
                let obj = new AlarmIndicatorInfo();
                obj.deserialize(params.AlarmIndicatorInfos[z]);
                this.AlarmIndicatorInfos.push(obj);
            }
        }
        this.AlarmRecipientType = 'AlarmRecipientType' in params ? params.AlarmRecipientType : null;

        if (params.QuietPeriods) {
            this.QuietPeriods = new Array();
            for (let z in params.QuietPeriods) {
                let obj = new QuietPeriod();
                obj.deserialize(params.QuietPeriods[z]);
                this.QuietPeriods.push(obj);
            }
        }
        this.WeComHook = 'WeComHook' in params ? params.WeComHook : null;
        this.UpdateTime = 'UpdateTime' in params ? params.UpdateTime : null;
        this.OperatorUin = 'OperatorUin' in params ? params.OperatorUin : null;
        this.TaskCount = 'TaskCount' in params ? params.TaskCount : null;
        this.MonitorType = 'MonitorType' in params ? params.MonitorType : null;
        this.MonitorObjectIds = 'MonitorObjectIds' in params ? params.MonitorObjectIds : null;
        this.LatestAlarmInstanceId = 'LatestAlarmInstanceId' in params ? params.LatestAlarmInstanceId : null;
        this.LatestAlarmTime = 'LatestAlarmTime' in params ? params.LatestAlarmTime : null;
        this.Description = 'Description' in params ? params.Description : null;
        this.LarkWebHooks = 'LarkWebHooks' in params ? params.LarkWebHooks : null;
        this.DingDingWebHooks = 'DingDingWebHooks' in params ? params.DingDingWebHooks : null;

    }
}

/**
 * ModifyApproveStatus request structure.
 * @class
 */
class ModifyApproveStatusRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Approval Form IDs
         * @type {Array.<string> || null}
         */
        this.ApproveIds = null;

        /**
         * Approval Remarks
         * @type {string || null}
         */
        this.Remark = null;

        /**
         * Status
         * @type {string || null}
         */
        this.Status = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ApproveIds = 'ApproveIds' in params ? params.ApproveIds : null;
        this.Remark = 'Remark' in params ? params.Remark : null;
        this.Status = 'Status' in params ? params.Status : null;

    }
}

/**
 * DescribeOperateOpsTasks response structure.
 * @class
 */
class DescribeOperateOpsTasksResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task List Information
         * @type {OpsTaskInfoPage || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new OpsTaskInfoPage();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeResourceManagePathTrees request structure.
 * @class
 */
class DescribeResourceManagePathTreesRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Name, for search
         * @type {string || null}
         */
        this.Name = null;

        /**
         * File Type
         * @type {string || null}
         */
        this.FileType = null;

        /**
         * File path
         * @type {string || null}
         */
        this.FilePath = null;

        /**
         * Folder Type
personal individual
project Item
resource
         * @type {string || null}
         */
        this.DirType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.Name = 'Name' in params ? params.Name : null;
        this.FileType = 'FileType' in params ? params.FileType : null;
        this.FilePath = 'FilePath' in params ? params.FilePath : null;
        this.DirType = 'DirType' in params ? params.DirType : null;

    }
}

/**
 * Function Resource Information
 * @class
 */
class FunctionResource extends  AbstractModel {
    constructor(){
        super();

        /**
         * Resource PathNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Path = null;

        /**
         * NoNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Resource Unique Identifier
         * @type {string || null}
         */
        this.Id = null;

        /**
         * Resource MD5 Value
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Md5 = null;

        /**
         * Default is HDFS
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Type = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Path = 'Path' in params ? params.Path : null;
        this.Name = 'Name' in params ? params.Name : null;
        this.Id = 'Id' in params ? params.Id : null;
        this.Md5 = 'Md5' in params ? params.Md5 : null;
        this.Type = 'Type' in params ? params.Type : null;

    }
}

/**
 * DescribeTableQualityDetails response structure.
 * @class
 */
class DescribeTableQualityDetailsResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Table quality score details result
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {TableQualityDetailPage || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new TableQualityDetailPage();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Return Command ID
 * @class
 */
class CommonIdOpsDto extends  AbstractModel {
    constructor(){
        super();

        /**
         * Returns the supplemental plan id
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Id = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Id = 'Id' in params ? params.Id : null;

    }
}

/**
 * BatchStopWorkflowsByIds response structure.
 * @class
 */
class BatchStopWorkflowsByIdsResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Operation ResultNote: This field may return null, indicating that no valid value can be obtained.
         * @type {OperationOpsDto || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new OperationOpsDto();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Rule Group Scheduling Information
 * @class
 */
class RuleGroupSchedulerInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Rule Group IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Id = null;

        /**
         * 1: Unconfigured 2: Associated with production scheduling 3: Offline cycle detection
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.MonitorType = null;

        /**
         * Start TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * End timeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EndTime = null;

        /**
         * Abbreviation for cycle type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CycleType = null;

        /**
         * Cycle step length
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.CycleStep = null;

        /**
         * Cycle type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CycleDesc = null;

        /**
         * Specified time under offline cycle detection
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskAction = null;

        /**
         * Delay time under offline cycle detection
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.DelayTime = null;

        /**
         * Task ID registered to the task scheduler under offline cycle detection
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CycleTaskId = null;

        /**
         * Associated task ID under associated production scheduling
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<string> || null}
         */
        this.AssociateTaskIds = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Id = 'Id' in params ? params.Id : null;
        this.MonitorType = 'MonitorType' in params ? params.MonitorType : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;
        this.CycleType = 'CycleType' in params ? params.CycleType : null;
        this.CycleStep = 'CycleStep' in params ? params.CycleStep : null;
        this.CycleDesc = 'CycleDesc' in params ? params.CycleDesc : null;
        this.TaskAction = 'TaskAction' in params ? params.TaskAction : null;
        this.DelayTime = 'DelayTime' in params ? params.DelayTime : null;
        this.CycleTaskId = 'CycleTaskId' in params ? params.CycleTaskId : null;
        this.AssociateTaskIds = 'AssociateTaskIds' in params ? params.AssociateTaskIds : null;

    }
}

/**
 * Data Source Object
 * @class
 */
class DatasourceBaseInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * If the data source list is bound to a database, then it is the database nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<string> || null}
         */
        this.DatabaseNames = null;

        /**
         * Data source description informationNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Description = null;

        /**
         * Data Source ID
         * @type {number || null}
         */
        this.ID = null;

        /**
         * Instance ID of the data source engine, e.g., CDB Instance IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Instance = null;

        /**
         * Data Source Name, cannot be empty under the same SpaceName
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Region to which the data source engine belongs
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Region = null;

        /**
         * Data Source Type: enumerated valuesNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Type = null;

        /**
         * Cluster ID to which the data source belongs
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ClusterId = null;

        /**
         * Version information of the data source
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Version = null;

        /**
         * Attached parameter information of the data source Params JSON string
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ParamsString = null;

        /**
         * Distinguish whether the data source type is a custom Definition source or a system source
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Category = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.DatabaseNames = 'DatabaseNames' in params ? params.DatabaseNames : null;
        this.Description = 'Description' in params ? params.Description : null;
        this.ID = 'ID' in params ? params.ID : null;
        this.Instance = 'Instance' in params ? params.Instance : null;
        this.Name = 'Name' in params ? params.Name : null;
        this.Region = 'Region' in params ? params.Region : null;
        this.Type = 'Type' in params ? params.Type : null;
        this.ClusterId = 'ClusterId' in params ? params.ClusterId : null;
        this.Version = 'Version' in params ? params.Version : null;
        this.ParamsString = 'ParamsString' in params ? params.ParamsString : null;
        this.Category = 'Category' in params ? params.Category : null;

    }
}

/**
 * Details of the task dependency edge
 * @class
 */
class LinkOpsDto extends  AbstractModel {
    constructor(){
        super();

        /**
         * Edge ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Id = null;

        /**
         * Edge key
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.LinkKey = null;

        /**
         * Source node of the edge
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskFrom = null;

        /**
         * Target node of the edge
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskTo = null;

        /**
         * Person in ChargeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InCharge = null;

        /**
         * Dependency Relationship Between Parent and Child TasksNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.LinkDependencyType = null;

        /**
         * Dependency offset between parent and child tasks
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Offset = null;

        /**
         * Type of edge
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.LinkType = null;

        /**
         * Workflow IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.WorkflowId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Id = 'Id' in params ? params.Id : null;
        this.LinkKey = 'LinkKey' in params ? params.LinkKey : null;
        this.TaskFrom = 'TaskFrom' in params ? params.TaskFrom : null;
        this.TaskTo = 'TaskTo' in params ? params.TaskTo : null;
        this.InCharge = 'InCharge' in params ? params.InCharge : null;
        this.LinkDependencyType = 'LinkDependencyType' in params ? params.LinkDependencyType : null;
        this.Offset = 'Offset' in params ? params.Offset : null;
        this.LinkType = 'LinkType' in params ? params.LinkType : null;
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;

    }
}

/**
 * Merge metadata Manifests governance items
 * @class
 */
class DlcMergeManifestsInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Whether to enable merging metadata Manifests file governance items: enable, none
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.MergeManifestsEnable = null;

        /**
         * Engine name used to run merging metadata Manifests file governance items
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Engine = null;

        /**
         * Merge Metadata Manifests file governance runtime cycle, in minutes
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.IntervalMin = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.MergeManifestsEnable = 'MergeManifestsEnable' in params ? params.MergeManifestsEnable : null;
        this.Engine = 'Engine' in params ? params.Engine : null;
        this.IntervalMin = 'IntervalMin' in params ? params.IntervalMin : null;

    }
}

/**
 * DescribeWorkflowListByProjectId request structure.
 * @class
 */
class DescribeWorkflowListByProjectIdRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * Alert Metrics
 * @class
 */
class AlarmIndicatorInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Metric ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Id = null;

        /**
         * Alert Metrics, 0 for task failure, 1 for task execution timeout, 2 for task stop, 3 for task pause, 4 read speed, 5 write speed, 6 read throughput, 7 write throughput, 8 dirty data byte count, 9 number of dirty data entries, 10 task exception, 11 task detection anomaly, 12 restart times, 13 task delay, 14 number of restarts within the last 20 minutes, 15 transmission delay, 16 business delay, 50 offline package CPU usage rate, 51 offline package memory usage rate, 52 offline package parallelism utilization, 53 number of instances queued for offline packages, 54 real-time package resource utilization, 55 number of tasks running in real-time packages
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.AlarmIndicator = null;

        /**
         * Alert Metric Description
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.AlarmIndicatorDesc = null;

        /**
         * Metric Threshold, 1 for the first run failure of an offline task, 2 for all retries failed of an offline task
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TriggerType = null;

        /**
         * Estimated timeout duration, minute level
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.EstimatedTime = null;

        /**
         * Alert threshold operator, 1 Greater than, 2 Less than
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Operator = null;

        /**
         * Alert metric threshold unit: ms (milliseconds), s (seconds), min (minutes)
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.AlarmIndicatorUnit = null;

        /**
         * Alert Interval
         * @type {number || null}
         */
        this.Duration = null;

        /**
         * Alert interval unit: hour, minute, day
         * @type {string || null}
         */
        this.DurationUnit = null;

        /**
         * Maximum number of alerts within a cycle
         * @type {number || null}
         */
        this.MaxTimes = null;

        /**
         * Metric Threshold
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Threshold = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Id = 'Id' in params ? params.Id : null;
        this.AlarmIndicator = 'AlarmIndicator' in params ? params.AlarmIndicator : null;
        this.AlarmIndicatorDesc = 'AlarmIndicatorDesc' in params ? params.AlarmIndicatorDesc : null;
        this.TriggerType = 'TriggerType' in params ? params.TriggerType : null;
        this.EstimatedTime = 'EstimatedTime' in params ? params.EstimatedTime : null;
        this.Operator = 'Operator' in params ? params.Operator : null;
        this.AlarmIndicatorUnit = 'AlarmIndicatorUnit' in params ? params.AlarmIndicatorUnit : null;
        this.Duration = 'Duration' in params ? params.Duration : null;
        this.DurationUnit = 'DurationUnit' in params ? params.DurationUnit : null;
        this.MaxTimes = 'MaxTimes' in params ? params.MaxTimes : null;
        this.Threshold = 'Threshold' in params ? params.Threshold : null;

    }
}

/**
 * DescribeStatisticInstanceStatusTrendOps response structure.
 * @class
 */
class DescribeStatisticInstanceStatusTrendOpsResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Instance status statistics results
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<InstanceStatisticInfo> || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            this.Data = new Array();
            for (let z in params.Data) {
                let obj = new InstanceStatisticInfo();
                obj.deserialize(params.Data[z]);
                this.Data.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Table Metadata Information
 * @class
 */
class TableMeta extends  AbstractModel {
    constructor(){
        super();

        /**
         * Global Unique ID of the Table
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableId = null;

        /**
         * Table NameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableName = null;

        /**
         * Person in ChargeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableOwnerName = null;

        /**
         * Data Source Global Unique ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.DatasourceId = null;

        /**
         * Cluster Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ClusterName = null;

        /**
         * Data Source Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatasourceName = null;

        /**
         * Database nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatabaseName = null;

        /**
         * Table Path
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TablePath = null;

        /**
         * Chinese Table Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableNameCn = null;

        /**
         * Metadata Tenant ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.MetastoreId = null;

        /**
         * Technology Type, available values: HIVE,MYSQL,KAFKA, HBASE
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.MetastoreType = null;

        /**
         * Table Description
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Description = null;

        /**
         * Column Separator
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ColumnSeparator = null;

        /**
         * Storage Format
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.StorageFormat = null;

        /**
         * Storage Volume, Byte Count
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.StorageSize = null;

        /**
         * Table Types, such as hive MANAGED_TABLE;EXTERNAL_TABLE
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableType = null;

        /**
         * Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreateTime = null;

        /**
         * Latest Data Modification Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ModifyTime = null;

        /**
         * Latest DDL Modification Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DdlModifyTime = null;

        /**
         * Last Access Time of Data
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.LastAccessTime = null;

        /**
         * Project Name in English
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectName = null;

        /**
         * Data Directory ID (may be multiple)
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<string> || null}
         */
        this.BizCatalogIds = null;

        /**
         * Data Directory (may be multiple)
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<string> || null}
         */
        this.BizCatalogNames = null;

        /**
         * true for Favorited/false indicates not favorited
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.HasFavorite = null;

        /**
         * LifecycleNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.LifeCycleTime = null;

        /**
         * Storage Volume, displayed in appropriate units
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.StorageSizeWithUnit = null;

        /**
         * Instance ID of the Data Source Engine: e.g., EMR Cluster Instance ID/Data Source Instance ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InstanceId = null;

        /**
         * Data Source Technology Type: HIVE/MYSQL/HBASE/KAFKA etc.
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TechnologyType = null;

        /**
         * Table English Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableNameEn = null;

        /**
         * Project IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Number of partitions in Kafka Topic
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Partitions = null;

        /**
         * Number of replicas in Kafka Topic
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ReplicationFactor = null;

        /**
         * Project English and Chinese Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectDisplayName = null;

        /**
         * Last Modified Time of Data
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DataModifyTime = null;

        /**
         * Cluster ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ClusterId = null;

        /**
         * Current user has Administrator Privileges
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.HasAdminAuthority = null;

        /**
         * Data Source Display Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatasourceDisplayName = null;

        /**
         * Database ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatabaseId = null;

        /**
         * Total favorites on the table under the tenant
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.FavoriteCount = null;

        /**
         * Total likes on the table under the tenant
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.LikeCount = null;

        /**
         * true for liked/false for not liked status
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.HasLike = null;

        /**
         * Asset score of the table
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {TablePropertyScore || null}
         */
        this.TablePropertyScore = null;

        /**
         * Heat value of the table
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {TableHeat || null}
         */
        this.TableHeat = null;

        /**
         * Data source ownerProjectId
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.OwnerProjectId = null;

        /**
         * Table Owner ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableOwnerId = null;

        /**
         * System Source -CLUSTER, DB - Self Definition Source
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DataSourceCategory = null;

        /**
         * Table Field Information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<SearchColumnDocVO> || null}
         */
        this.Columns = null;

        /**
         * Table Collection Type
TABLE, VIEW, MANAGED_TABLE (Hive managed table), EXTERNAL_TABLE (Hive external table), VIRTUAL_VIEW (virtual view), MATERIALIZED_VIEW (materialized view), LATERAL_VIEW, INDEX_TABLE (index table), END_SELECT (query structure), INSTANCE (intermediate temporary table type (data lineage)), CDW (CDW table type)
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.MetaCrawlType = null;

        /**
         * Is View
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.IsView = null;

        /**
         * Storage locationNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Location = null;

        /**
         * Determine if it is a partitioned table 1 Yes 0 No
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.IsPartitionTable = null;

        /**
         * Partition Field Key
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<string> || null}
         */
        this.PartitionColumns = null;

        /**
         * Lifecycle - Partition Retention Days [Valid when Partition Retention Policy is applied]
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.PartitionExpireDays = null;

        /**
         * Table Ancillary Information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<TableMetaProperty> || null}
         */
        this.TableProperties = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TableId = 'TableId' in params ? params.TableId : null;
        this.TableName = 'TableName' in params ? params.TableName : null;
        this.TableOwnerName = 'TableOwnerName' in params ? params.TableOwnerName : null;
        this.DatasourceId = 'DatasourceId' in params ? params.DatasourceId : null;
        this.ClusterName = 'ClusterName' in params ? params.ClusterName : null;
        this.DatasourceName = 'DatasourceName' in params ? params.DatasourceName : null;
        this.DatabaseName = 'DatabaseName' in params ? params.DatabaseName : null;
        this.TablePath = 'TablePath' in params ? params.TablePath : null;
        this.TableNameCn = 'TableNameCn' in params ? params.TableNameCn : null;
        this.MetastoreId = 'MetastoreId' in params ? params.MetastoreId : null;
        this.MetastoreType = 'MetastoreType' in params ? params.MetastoreType : null;
        this.Description = 'Description' in params ? params.Description : null;
        this.ColumnSeparator = 'ColumnSeparator' in params ? params.ColumnSeparator : null;
        this.StorageFormat = 'StorageFormat' in params ? params.StorageFormat : null;
        this.StorageSize = 'StorageSize' in params ? params.StorageSize : null;
        this.TableType = 'TableType' in params ? params.TableType : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;
        this.ModifyTime = 'ModifyTime' in params ? params.ModifyTime : null;
        this.DdlModifyTime = 'DdlModifyTime' in params ? params.DdlModifyTime : null;
        this.LastAccessTime = 'LastAccessTime' in params ? params.LastAccessTime : null;
        this.ProjectName = 'ProjectName' in params ? params.ProjectName : null;
        this.BizCatalogIds = 'BizCatalogIds' in params ? params.BizCatalogIds : null;
        this.BizCatalogNames = 'BizCatalogNames' in params ? params.BizCatalogNames : null;
        this.HasFavorite = 'HasFavorite' in params ? params.HasFavorite : null;
        this.LifeCycleTime = 'LifeCycleTime' in params ? params.LifeCycleTime : null;
        this.StorageSizeWithUnit = 'StorageSizeWithUnit' in params ? params.StorageSizeWithUnit : null;
        this.InstanceId = 'InstanceId' in params ? params.InstanceId : null;
        this.TechnologyType = 'TechnologyType' in params ? params.TechnologyType : null;
        this.TableNameEn = 'TableNameEn' in params ? params.TableNameEn : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.Partitions = 'Partitions' in params ? params.Partitions : null;
        this.ReplicationFactor = 'ReplicationFactor' in params ? params.ReplicationFactor : null;
        this.ProjectDisplayName = 'ProjectDisplayName' in params ? params.ProjectDisplayName : null;
        this.DataModifyTime = 'DataModifyTime' in params ? params.DataModifyTime : null;
        this.ClusterId = 'ClusterId' in params ? params.ClusterId : null;
        this.HasAdminAuthority = 'HasAdminAuthority' in params ? params.HasAdminAuthority : null;
        this.DatasourceDisplayName = 'DatasourceDisplayName' in params ? params.DatasourceDisplayName : null;
        this.DatabaseId = 'DatabaseId' in params ? params.DatabaseId : null;
        this.FavoriteCount = 'FavoriteCount' in params ? params.FavoriteCount : null;
        this.LikeCount = 'LikeCount' in params ? params.LikeCount : null;
        this.HasLike = 'HasLike' in params ? params.HasLike : null;

        if (params.TablePropertyScore) {
            let obj = new TablePropertyScore();
            obj.deserialize(params.TablePropertyScore)
            this.TablePropertyScore = obj;
        }

        if (params.TableHeat) {
            let obj = new TableHeat();
            obj.deserialize(params.TableHeat)
            this.TableHeat = obj;
        }
        this.OwnerProjectId = 'OwnerProjectId' in params ? params.OwnerProjectId : null;
        this.TableOwnerId = 'TableOwnerId' in params ? params.TableOwnerId : null;
        this.DataSourceCategory = 'DataSourceCategory' in params ? params.DataSourceCategory : null;

        if (params.Columns) {
            this.Columns = new Array();
            for (let z in params.Columns) {
                let obj = new SearchColumnDocVO();
                obj.deserialize(params.Columns[z]);
                this.Columns.push(obj);
            }
        }
        this.MetaCrawlType = 'MetaCrawlType' in params ? params.MetaCrawlType : null;
        this.IsView = 'IsView' in params ? params.IsView : null;
        this.Location = 'Location' in params ? params.Location : null;
        this.IsPartitionTable = 'IsPartitionTable' in params ? params.IsPartitionTable : null;
        this.PartitionColumns = 'PartitionColumns' in params ? params.PartitionColumns : null;
        this.PartitionExpireDays = 'PartitionExpireDays' in params ? params.PartitionExpireDays : null;

        if (params.TableProperties) {
            this.TableProperties = new Array();
            for (let z in params.TableProperties) {
                let obj = new TableMetaProperty();
                obj.deserialize(params.TableProperties[z]);
                this.TableProperties.push(obj);
            }
        }

    }
}

/**
 * CountOpsInstanceState response structure.
 * @class
 */
class CountOpsInstanceStateResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task Corresponding Instance Status Statistics
         * @type {TaskInstanceCountDto || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new TaskInstanceCountDto();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Subscription Recipient
 * @class
 */
class SubscribeReceiver extends  AbstractModel {
    constructor(){
        super();

        /**
         * Recipient Uin
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.ReceiverUserId = null;

        /**
         * Recipient Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ReceiverName = null;

        /**
         * Recipient UIN
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ReceiverUserIdStr = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ReceiverUserId = 'ReceiverUserId' in params ? params.ReceiverUserId : null;
        this.ReceiverName = 'ReceiverName' in params ? params.ReceiverName : null;
        this.ReceiverUserIdStr = 'ReceiverUserIdStr' in params ? params.ReceiverUserIdStr : null;

    }
}

/**
 * TriggerDsEvent request structure.
 * @class
 */
class TriggerDsEventRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Event Instance Information
         * @type {Array.<EventCaseDTO> || null}
         */
        this.EventCaseList = null;

        /**
         * Event Instance Information (Continuous Time)
         * @type {Array.<EventBatchCaseDTO> || null}
         */
        this.EventBatchCaseList = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

        if (params.EventCaseList) {
            this.EventCaseList = new Array();
            for (let z in params.EventCaseList) {
                let obj = new EventCaseDTO();
                obj.deserialize(params.EventCaseList[z]);
                this.EventCaseList.push(obj);
            }
        }

        if (params.EventBatchCaseList) {
            this.EventBatchCaseList = new Array();
            for (let z in params.EventBatchCaseList) {
                let obj = new EventBatchCaseDTO();
                obj.deserialize(params.EventBatchCaseList[z]);
                this.EventBatchCaseList.push(obj);
            }
        }

    }
}

/**
 * DescribeQualityScoreTrend request structure.
 * @class
 */
class DescribeQualityScoreTrendRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Start Date of Statistics
         * @type {number || null}
         */
        this.StatisticsStartDate = null;

        /**
         * Statistics End Date
         * @type {number || null}
         */
        this.StatisticsEndDate = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Data source ID
         * @type {string || null}
         */
        this.DatasourceId = null;

        /**
         * 1: Calculate by full dimension weight, 2: Calculate by configured dimension weight, 3: Do not calculate by dimension weight, default is 1
         * @type {string || null}
         */
        this.ScoreType = null;

        /**
         * Ignore Query String
         * @type {Array.<Filter> || null}
         */
        this.Filters = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.StatisticsStartDate = 'StatisticsStartDate' in params ? params.StatisticsStartDate : null;
        this.StatisticsEndDate = 'StatisticsEndDate' in params ? params.StatisticsEndDate : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.DatasourceId = 'DatasourceId' in params ? params.DatasourceId : null;
        this.ScoreType = 'ScoreType' in params ? params.ScoreType : null;

        if (params.Filters) {
            this.Filters = new Array();
            for (let z in params.Filters) {
                let obj = new Filter();
                obj.deserialize(params.Filters[z]);
                this.Filters.push(obj);
            }
        }

    }
}

/**
 * Lock Acquisition Status: Whether to Grab the Lock and Current Lock Holder
 * @class
 */
class RobLockState extends  AbstractModel {
    constructor(){
        super();

        /**
         * Whether to Grab the Lock
         * @type {boolean || null}
         */
        this.IsRob = null;

        /**
         * Current Lock Holder
         * @type {string || null}
         */
        this.Locker = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.IsRob = 'IsRob' in params ? params.IsRob : null;
        this.Locker = 'Locker' in params ? params.Locker : null;

    }
}

/**
 * SubmitTaskTestRun request structure.
 * @class
 */
class SubmitTaskTestRunRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * taskId list
         * @type {string || null}
         */
        this.TaskIds = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Workflow ID
         * @type {string || null}
         */
        this.WorkFlowId = null;

        /**
         * Workflow name
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Workflow Task List
         * @type {Array.<StageCloudApiRequest> || null}
         */
        this.Tasks = null;

        /**
         * Remarks
         * @type {string || null}
         */
        this.Description = null;

        /**
         * Runtime Parameters, JSON format of map
         * @type {string || null}
         */
        this.RunParams = null;

        /**
         * Script Content
         * @type {string || null}
         */
        this.ScriptContent = null;

        /**
         * Version number
         * @type {string || null}
         */
        this.VersionId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskIds = 'TaskIds' in params ? params.TaskIds : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.WorkFlowId = 'WorkFlowId' in params ? params.WorkFlowId : null;
        this.Name = 'Name' in params ? params.Name : null;

        if (params.Tasks) {
            this.Tasks = new Array();
            for (let z in params.Tasks) {
                let obj = new StageCloudApiRequest();
                obj.deserialize(params.Tasks[z]);
                this.Tasks.push(obj);
            }
        }
        this.Description = 'Description' in params ? params.Description : null;
        this.RunParams = 'RunParams' in params ? params.RunParams : null;
        this.ScriptContent = 'ScriptContent' in params ? params.ScriptContent : null;
        this.VersionId = 'VersionId' in params ? params.VersionId : null;

    }
}

/**
 * DescribeAlarmEvents request structure.
 * @class
 */
class DescribeAlarmEventsRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Current Page
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Number of records per page
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Filter criteria (key can be: AlarmLevel, AlarmIndicator, KeyWord)
         * @type {Array.<Filter> || null}
         */
        this.Filters = null;

        /**
         * Sort Fields (AlarmTime)
         * @type {Array.<OrderField> || null}
         */
        this.OrderFields = null;

        /**
         * Type (201 for real-time, 202 for offline)
         * @type {number || null}
         */
        this.TaskType = null;

        /**
         * Start Time
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * End time
         * @type {string || null}
         */
        this.EndTime = null;

        /**
         * Monitored Object Type (1: All Tasks, 2: Assigned Task, 3: Designated Responsible Person, 4: Specified Resource Group)
         * @type {number || null}
         */
        this.MonitorType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;

        if (params.Filters) {
            this.Filters = new Array();
            for (let z in params.Filters) {
                let obj = new Filter();
                obj.deserialize(params.Filters[z]);
                this.Filters.push(obj);
            }
        }

        if (params.OrderFields) {
            this.OrderFields = new Array();
            for (let z in params.OrderFields) {
                let obj = new OrderField();
                obj.deserialize(params.OrderFields[z]);
                this.OrderFields.push(obj);
            }
        }
        this.TaskType = 'TaskType' in params ? params.TaskType : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;
        this.MonitorType = 'MonitorType' in params ? params.MonitorType : null;

    }
}

/**
 * Quality Check Comparison Results
 * @class
 */
class CompareResult extends  AbstractModel {
    constructor(){
        super();

        /**
         * Comparison Result Item List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<CompareResultItem> || null}
         */
        this.Items = null;

        /**
         * Total Number of Rows Detected
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalRows = null;

        /**
         * Number of Rows Passed
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.PassRows = null;

        /**
         * Number of Rows Failed
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TriggerRows = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Items) {
            this.Items = new Array();
            for (let z in params.Items) {
                let obj = new CompareResultItem();
                obj.deserialize(params.Items[z]);
                this.Items.push(obj);
            }
        }
        this.TotalRows = 'TotalRows' in params ? params.TotalRows : null;
        this.PassRows = 'PassRows' in params ? params.PassRows : null;
        this.TriggerRows = 'TriggerRows' in params ? params.TriggerRows : null;

    }
}

/**
 * CheckAlarmRegularNameExist response structure.
 * @class
 */
class CheckAlarmRegularNameExistResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Whether there are duplicate names
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DeleteProjectParamDs request structure.
 * @class
 */
class DeleteProjectParamDsRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Parameter Name
         * @type {string || null}
         */
        this.ParamKey = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ParamKey = 'ParamKey' in params ? params.ParamKey : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * Content
 * @class
 */
class Content extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Task NameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskName = null;

        /**
         * Diagnosis
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Diagnose = null;

        /**
         * Reason
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Reason = null;

        /**
         * OperationNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Operation = null;

        /**
         * Link
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Url = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.TaskName = 'TaskName' in params ? params.TaskName : null;
        this.Diagnose = 'Diagnose' in params ? params.Diagnose : null;
        this.Reason = 'Reason' in params ? params.Reason : null;
        this.Operation = 'Operation' in params ? params.Operation : null;
        this.Url = 'Url' in params ? params.Url : null;

    }
}

/**
 * Speed Value Object
 * @class
 */
class SpeedValue extends  AbstractModel {
    constructor(){
        super();

        /**
         * Timestamp with MillisecondsNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Time = null;

        /**
         * NoNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Speed = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Time = 'Time' in params ? params.Time : null;
        this.Speed = 'Speed' in params ? params.Speed : null;

    }
}

/**
 * Function Submission Version Information
 * @class
 */
class FunctionVersion extends  AbstractModel {
    constructor(){
        super();

        /**
         * Version number: V0 V1 V2
         * @type {string || null}
         */
        this.Tag = null;

        /**
         * Submitter ID
         * @type {string || null}
         */
        this.UserId = null;

        /**
         * Change Type: ADD, MODIFY
         * @type {string || null}
         */
        this.Type = null;

        /**
         * Remarks
         * @type {string || null}
         */
        this.Comment = null;

        /**
         * Submission Time: UTC Seconds
         * @type {string || null}
         */
        this.Timestamp = null;

        /**
         * Submitter Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.UserName = null;

        /**
         * Version Information: json string format
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Content = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Tag = 'Tag' in params ? params.Tag : null;
        this.UserId = 'UserId' in params ? params.UserId : null;
        this.Type = 'Type' in params ? params.Type : null;
        this.Comment = 'Comment' in params ? params.Comment : null;
        this.Timestamp = 'Timestamp' in params ? params.Timestamp : null;
        this.UserName = 'UserName' in params ? params.UserName : null;
        this.Content = 'Content' in params ? params.Content : null;

    }
}

/**
 * Overview Trend Results
 * @class
 */
class RuleExecDateStat extends  AbstractModel {
    constructor(){
        super();

        /**
         * Statistics Date
         * @type {string || null}
         */
        this.StatDate = null;

        /**
         * Number of Alerts
         * @type {number || null}
         */
        this.AlarmCnt = null;

        /**
         * Number of blocked processes
         * @type {number || null}
         */
        this.PipelineCnt = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.StatDate = 'StatDate' in params ? params.StatDate : null;
        this.AlarmCnt = 'AlarmCnt' in params ? params.AlarmCnt : null;
        this.PipelineCnt = 'PipelineCnt' in params ? params.PipelineCnt : null;

    }
}

/**
 * DescribeThirdTaskRunLog response structure.
 * @class
 */
class DescribeThirdTaskRunLogResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Get third-party operation logsNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeTaskAlarmRegulations request structure.
 * @class
 */
class DescribeTaskAlarmRegulationsRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Current Page
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Number of records per page
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Filter criteria (name includes RegularStatus, AlarmLevel, AlarmIndicator, RegularName)
         * @type {Array.<Filter> || null}
         */
        this.Filters = null;

        /**
         * Sorting criteria (RegularId)
         * @type {Array.<OrderField> || null}
         */
        this.OrderFields = null;

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Task Type (201 for real-time task, 202 for offline task)
         * @type {number || null}
         */
        this.TaskType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;

        if (params.Filters) {
            this.Filters = new Array();
            for (let z in params.Filters) {
                let obj = new Filter();
                obj.deserialize(params.Filters[z]);
                this.Filters.push(obj);
            }
        }

        if (params.OrderFields) {
            this.OrderFields = new Array();
            for (let z in params.OrderFields) {
                let obj = new OrderField();
                obj.deserialize(params.OrderFields[z]);
                this.OrderFields.push(obj);
            }
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.TaskType = 'TaskType' in params ? params.TaskType : null;

    }
}

/**
 * CreateCustomFunction response structure.
 * @class
 */
class CreateCustomFunctionResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Function Unique IdentifierNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FunctionId = null;

        /**
         * NoNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ErrorMessage = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.FunctionId = 'FunctionId' in params ? params.FunctionId : null;
        this.ErrorMessage = 'ErrorMessage' in params ? params.ErrorMessage : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Instance Statistics Display
 * @class
 */
class ScreenInstanceInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Statistical Indicator 0: All Instances, 1: Current Day, 2: YesterdayNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.CountTag = null;

        /**
         * Total numberNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalNum = null;

        /**
         * RunningNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.RunningNum = null;

        /**
         * Pending Execution
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.WaitRunningNum = null;

        /**
         * Wait for Upstream
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.DependencyNum = null;

        /**
         * Waiting for Event
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.WaitEventNum = null;

        /**
         * Terminating
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.StoppingNum = null;

        /**
         * SuccessNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.SucceedNum = null;

        /**
         * Failed
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.FailedNum = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.CountTag = 'CountTag' in params ? params.CountTag : null;
        this.TotalNum = 'TotalNum' in params ? params.TotalNum : null;
        this.RunningNum = 'RunningNum' in params ? params.RunningNum : null;
        this.WaitRunningNum = 'WaitRunningNum' in params ? params.WaitRunningNum : null;
        this.DependencyNum = 'DependencyNum' in params ? params.DependencyNum : null;
        this.WaitEventNum = 'WaitEventNum' in params ? params.WaitEventNum : null;
        this.StoppingNum = 'StoppingNum' in params ? params.StoppingNum : null;
        this.SucceedNum = 'SucceedNum' in params ? params.SucceedNum : null;
        this.FailedNum = 'FailedNum' in params ? params.FailedNum : null;

    }
}

/**
 * ModifyTaskInfo request structure.
 * @class
 */
class ModifyTaskInfoRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Execution time, in minutes, applicable to daily/weekly/monthly/yearly scheduling. For example, with daily scheduling, executing once at 02:00 AM every day, delayTime is 120 minutes
         * @type {number || null}
         */
        this.DelayTime = null;

        /**
         * Start Time
         * @type {number || null}
         */
        this.StartupTime = null;

        /**
         * Self-Dependency Type  1: Sequential serial, one at a time, queued, 2: Unordered serial, one at a time, not queued, 3: Parallel, multiple at once
         * @type {number || null}
         */
        this.SelfDepend = null;

        /**
         * Effective Start Time, format yyyy-MM-dd HH:mm:ss
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * Effective End Time, format yyyy-MM-dd HH:mm:ss
         * @type {string || null}
         */
        this.EndTime = null;

        /**
         * Scheduling Configuration - Elastic Cycle Configuration, applicable to Hourly/Weekly/Monthly/Yearly schedules. For hourly tasks scheduled at 0, 3, 4 o'clock, it would be '0,3,4'.
         * @type {string || null}
         */
        this.TaskAction = null;

        /**
         * "Cycle Type  0:crontab, 1:Minute,2:Hour,3:Day,4:Week,5:Month,6:One-time,7:User driven,10:Flexible cycle Week,11:Flexible cycle Month,12:Year,13:Immediate Trigger Instant type, isolated from normal cycle scheduling task logic
         * @type {number || null}
         */
        this.CycleType = null;

        /**
         * Step Length, Interval Time, minimum of 1
         * @type {number || null}
         */
        this.CycleStep = null;

        /**
         * Cron Expression is required only for Cron Tab Scheduling
         * @type {string || null}
         */
        this.CrontabExpression = null;

        /**
         * Execution Time Left Closed Interval, format: HH:mm. Applicable only to hourly scheduling. For example, for hourly tasks, it specifies the effective interval every day
         * @type {string || null}
         */
        this.ExecutionStartTime = null;

        /**
         * Execution Time Right Closed Interval, format: HH:mm. Applicable only to hourly scheduling. For example, for hourly tasks, it specifies the effective interval every day
         * @type {string || null}
         */
        this.ExecutionEndTime = null;

        /**
         * New Task Name
         * @type {string || null}
         */
        this.TaskName = null;

        /**
         * Failure Retry Interval, in minutes, a default value has already been provided during task creation
         * @type {number || null}
         */
        this.RetryWait = null;

        /**
         * Number of Retry Attempts on Failure, a default value has already been provided during task creation
         * @type {number || null}
         */
        this.TryLimit = null;

        /**
         * Whether to Retry, 1 for yes
         * @type {number || null}
         */
        this.Retriable = null;

        /**
         * Running Priority, 4 for High, 5 for Medium, 6 for Low
         * @type {number || null}
         */
        this.RunPriority = null;

        /**
         * Extended Task Configuration
         * @type {Array.<TaskExtInfo> || null}
         */
        this.TaskExt = null;

        /**
         * Execution Resource Group ID, needs to be created on the Resource Management Service and bind to a CVM machine
         * @type {string || null}
         */
        this.ResourceGroup = null;

        /**
         * Resource Pool Queue Name
         * @type {string || null}
         */
        this.YarnQueue = null;

        /**
         * Specific Execution Machine under Resource Group, 'any' means it can run on any machine.
         * @type {string || null}
         */
        this.BrokerIp = null;

        /**
         * Person in Charge
         * @type {string || null}
         */
        this.InCharge = null;

        /**
         * Task notes
         * @type {string || null}
         */
        this.Notes = null;

        /**
         * Task Parameters
         * @type {Array.<ParamInfo> || null}
         */
        this.TaskParamInfos = null;

        /**
         * Source Data Source
         * @type {string || null}
         */
        this.SourceServer = null;

        /**
         * Target Data Source
         * @type {string || null}
         */
        this.TargetServer = null;

        /**
         * Supports Workflow Dependencies yes/no, default no
         * @type {string || null}
         */
        this.DependencyWorkflow = null;

        /**
         * Dependency Configuration
         * @type {Array.<DependencyConfig> || null}
         */
        this.DependencyConfigDTOs = null;

        /**
         * Execution Duration
         * @type {number || null}
         */
        this.ExecutionTTL = null;

        /**
         * Whether the Script has Changed
         * @type {boolean || null}
         */
        this.ScriptChange = null;

        /**
         * Responsible Person ID
         * @type {Array.<string> || null}
         */
        this.InChargeIds = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.DelayTime = 'DelayTime' in params ? params.DelayTime : null;
        this.StartupTime = 'StartupTime' in params ? params.StartupTime : null;
        this.SelfDepend = 'SelfDepend' in params ? params.SelfDepend : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;
        this.TaskAction = 'TaskAction' in params ? params.TaskAction : null;
        this.CycleType = 'CycleType' in params ? params.CycleType : null;
        this.CycleStep = 'CycleStep' in params ? params.CycleStep : null;
        this.CrontabExpression = 'CrontabExpression' in params ? params.CrontabExpression : null;
        this.ExecutionStartTime = 'ExecutionStartTime' in params ? params.ExecutionStartTime : null;
        this.ExecutionEndTime = 'ExecutionEndTime' in params ? params.ExecutionEndTime : null;
        this.TaskName = 'TaskName' in params ? params.TaskName : null;
        this.RetryWait = 'RetryWait' in params ? params.RetryWait : null;
        this.TryLimit = 'TryLimit' in params ? params.TryLimit : null;
        this.Retriable = 'Retriable' in params ? params.Retriable : null;
        this.RunPriority = 'RunPriority' in params ? params.RunPriority : null;

        if (params.TaskExt) {
            this.TaskExt = new Array();
            for (let z in params.TaskExt) {
                let obj = new TaskExtInfo();
                obj.deserialize(params.TaskExt[z]);
                this.TaskExt.push(obj);
            }
        }
        this.ResourceGroup = 'ResourceGroup' in params ? params.ResourceGroup : null;
        this.YarnQueue = 'YarnQueue' in params ? params.YarnQueue : null;
        this.BrokerIp = 'BrokerIp' in params ? params.BrokerIp : null;
        this.InCharge = 'InCharge' in params ? params.InCharge : null;
        this.Notes = 'Notes' in params ? params.Notes : null;

        if (params.TaskParamInfos) {
            this.TaskParamInfos = new Array();
            for (let z in params.TaskParamInfos) {
                let obj = new ParamInfo();
                obj.deserialize(params.TaskParamInfos[z]);
                this.TaskParamInfos.push(obj);
            }
        }
        this.SourceServer = 'SourceServer' in params ? params.SourceServer : null;
        this.TargetServer = 'TargetServer' in params ? params.TargetServer : null;
        this.DependencyWorkflow = 'DependencyWorkflow' in params ? params.DependencyWorkflow : null;

        if (params.DependencyConfigDTOs) {
            this.DependencyConfigDTOs = new Array();
            for (let z in params.DependencyConfigDTOs) {
                let obj = new DependencyConfig();
                obj.deserialize(params.DependencyConfigDTOs[z]);
                this.DependencyConfigDTOs.push(obj);
            }
        }
        this.ExecutionTTL = 'ExecutionTTL' in params ? params.ExecutionTTL : null;
        this.ScriptChange = 'ScriptChange' in params ? params.ScriptChange : null;
        this.InChargeIds = 'InChargeIds' in params ? params.InChargeIds : null;

    }
}

/**
 * DescribeOperateOpsTasks request structure.
 * @class
 */
class DescribeOperateOpsTasksRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Folder ID, multiple folders separated by commas
         * @type {string || null}
         */
        this.FolderIdList = null;

        /**
         * Workflow ID, multiple Workflow IDs separated by English commas
         * @type {string || null}
         */
        this.WorkFlowIdList = null;

        /**
         * Workflow name, multiple Workflow names separated by English commas
         * @type {string || null}
         */
        this.WorkFlowNameList = null;

        /**
         * Task Name, multiple Task Names separated by English commas
         * @type {string || null}
         */
        this.TaskNameList = null;

        /**
         * Task ID, multiple Task IDs separated by English commas
         * @type {string || null}
         */
        this.TaskIdList = null;

        /**
         * Page Number
         * @type {string || null}
         */
        this.PageNumber = null;

        /**
         * Page size
         * @type {string || null}
         */
        this.PageSize = null;

        /**
         * Sort Fields, supported fields are FirstSubmitTime and FirstRunTime, indicating the most recent submission and the first execution event
         * @type {string || null}
         */
        this.SortItem = null;

        /**
         * Sort Type. Two values DESC,ASC
         * @type {string || null}
         */
        this.SortType = null;

        /**
         * Person in Charge, multiple Persons in Charge separated by English commas
         * @type {string || null}
         */
        this.InChargeList = null;

        /**
         * Task Type ID String, multiple Task Type IDs separated by English commas
         * @type {string || null}
         */
        this.TaskTypeIdList = null;

        /**
         * Task Status String, multiple Task Statuses separated by English commas
         * @type {string || null}
         */
        this.StatusList = null;

        /**
         * Task Cycle Type String, multiple Task Cycles separated by English commas
         * @type {string || null}
         */
        this.TaskCycleUnitList = null;

        /**
         * Task Belonging Product Type
         * @type {string || null}
         */
        this.ProductNameList = null;

        /**
         * Data Source ID or (only for offline sync tasks) Source Data Source ID
         * @type {string || null}
         */
        this.SourceServiceId = null;

        /**
         * Data Source Type or (only for offline sync tasks) Source Data Source Type
         * @type {string || null}
         */
        this.SourceServiceType = null;

        /**
         * (Only for offline sync tasks) Target Data Source ID
         * @type {string || null}
         */
        this.TargetServiceId = null;

        /**
         * (Only for offline sync tasks) Target Data Source Type
         * @type {string || null}
         */
        this.TargetServiceType = null;

        /**
         * Alarm Type, multiple types separated by commas
         * @type {string || null}
         */
        this.AlarmType = null;

        /**
         * Resource Group ID, multiple Resource Group IDs separated by English commas
         * @type {string || null}
         */
        this.ExecutorGroupIdList = null;

        /**
         * Task tag
         * @type {Array.<TaskTag> || null}
         */
        this.TaskTags = null;

        /**
         * Query Keyword
         * @type {string || null}
         */
        this.KeyWord = null;

        /**
         * Instance Generation Method
         * @type {string || null}
         */
        this.InitStrategy = null;

        /**
         * Additional Requested Resource Types
         * @type {Array.<string> || null}
         */
        this.RequestResourceTypes = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.FolderIdList = 'FolderIdList' in params ? params.FolderIdList : null;
        this.WorkFlowIdList = 'WorkFlowIdList' in params ? params.WorkFlowIdList : null;
        this.WorkFlowNameList = 'WorkFlowNameList' in params ? params.WorkFlowNameList : null;
        this.TaskNameList = 'TaskNameList' in params ? params.TaskNameList : null;
        this.TaskIdList = 'TaskIdList' in params ? params.TaskIdList : null;
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;
        this.SortItem = 'SortItem' in params ? params.SortItem : null;
        this.SortType = 'SortType' in params ? params.SortType : null;
        this.InChargeList = 'InChargeList' in params ? params.InChargeList : null;
        this.TaskTypeIdList = 'TaskTypeIdList' in params ? params.TaskTypeIdList : null;
        this.StatusList = 'StatusList' in params ? params.StatusList : null;
        this.TaskCycleUnitList = 'TaskCycleUnitList' in params ? params.TaskCycleUnitList : null;
        this.ProductNameList = 'ProductNameList' in params ? params.ProductNameList : null;
        this.SourceServiceId = 'SourceServiceId' in params ? params.SourceServiceId : null;
        this.SourceServiceType = 'SourceServiceType' in params ? params.SourceServiceType : null;
        this.TargetServiceId = 'TargetServiceId' in params ? params.TargetServiceId : null;
        this.TargetServiceType = 'TargetServiceType' in params ? params.TargetServiceType : null;
        this.AlarmType = 'AlarmType' in params ? params.AlarmType : null;
        this.ExecutorGroupIdList = 'ExecutorGroupIdList' in params ? params.ExecutorGroupIdList : null;

        if (params.TaskTags) {
            this.TaskTags = new Array();
            for (let z in params.TaskTags) {
                let obj = new TaskTag();
                obj.deserialize(params.TaskTags[z]);
                this.TaskTags.push(obj);
            }
        }
        this.KeyWord = 'KeyWord' in params ? params.KeyWord : null;
        this.InitStrategy = 'InitStrategy' in params ? params.InitStrategy : null;
        this.RequestResourceTypes = 'RequestResourceTypes' in params ? params.RequestResourceTypes : null;

    }
}

/**
 * Data Source Object
 * @class
 */
class DataSourceInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * If the data source list is bound to a database, then it is the database nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatabaseName = null;

        /**
         * Data source description informationNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Description = null;

        /**
         * Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.ID = null;

        /**
         * Instance ID of the data source engine, e.g., CDB Instance IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Instance = null;

        /**
         * Data Source Name, cannot be empty under the same SpaceNameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Region to which the data source engine belongs
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Region = null;

        /**
         * Data Source Type: enumerated valuesNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Type = null;

        /**
         * Cluster ID to which the data source belongs
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ClusterId = null;

        /**
         * Application ID AppId
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.AppId = null;

        /**
         * Configuration Information Extension of Business Data SourceNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.BizParams = null;

        /**
         * Data Source Category: Binding Engine, Binding DatabaseNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Category = null;

        /**
         * Data Source Display Name, for visual inspectionNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Display = null;

        /**
         * Data Source Responsible Person Account ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.OwnerAccount = null;

        /**
         * Data source configuration information, stored as JSON KV. The KV storage information varies according to the data source typeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Params = null;

        /**
         * Visibility of the data source, where 1 is visible and 0 is not visible. Default is 1Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Status = null;

        /**
         * Data source owner account name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.OwnerAccountName = null;

        /**
         * Cluster NameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ClusterName = null;

        /**
         * Project IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.OwnerProjectId = null;

        /**
         * Project NameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.OwnerProjectName = null;

        /**
         * Belonging project identifier
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.OwnerProjectIdent = null;

        /**
         * Authorized project
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.AuthorityProjectName = null;

        /**
         * Authorized user
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.AuthorityUserName = null;

        /**
         * Edit permissions available
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.Edit = null;

        /**
         * Authorization permissions available
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.Author = null;

        /**
         * Transfer permissions available
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.Deliver = null;

        /**
         * Data source status
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DataSourceStatus = null;

        /**
         * TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.CreateTime = null;

        /**
         * Params JSON string
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ParamsString = null;

        /**
         * BizParams JSON string
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.BizParamsString = null;

        /**
         * Modification TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.ModifiedTime = null;

        /**
         * Data source display type, corresponding to Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ShowType = null;

        /**
         * Current data source production source Id
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.ProductId = null;

        /**
         * Current data source development source Id
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.DevelopmentId = null;

        /**
         * Same as params, content is the data for the development data source
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DevelopmentParams = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.DatabaseName = 'DatabaseName' in params ? params.DatabaseName : null;
        this.Description = 'Description' in params ? params.Description : null;
        this.ID = 'ID' in params ? params.ID : null;
        this.Instance = 'Instance' in params ? params.Instance : null;
        this.Name = 'Name' in params ? params.Name : null;
        this.Region = 'Region' in params ? params.Region : null;
        this.Type = 'Type' in params ? params.Type : null;
        this.ClusterId = 'ClusterId' in params ? params.ClusterId : null;
        this.AppId = 'AppId' in params ? params.AppId : null;
        this.BizParams = 'BizParams' in params ? params.BizParams : null;
        this.Category = 'Category' in params ? params.Category : null;
        this.Display = 'Display' in params ? params.Display : null;
        this.OwnerAccount = 'OwnerAccount' in params ? params.OwnerAccount : null;
        this.Params = 'Params' in params ? params.Params : null;
        this.Status = 'Status' in params ? params.Status : null;
        this.OwnerAccountName = 'OwnerAccountName' in params ? params.OwnerAccountName : null;
        this.ClusterName = 'ClusterName' in params ? params.ClusterName : null;
        this.OwnerProjectId = 'OwnerProjectId' in params ? params.OwnerProjectId : null;
        this.OwnerProjectName = 'OwnerProjectName' in params ? params.OwnerProjectName : null;
        this.OwnerProjectIdent = 'OwnerProjectIdent' in params ? params.OwnerProjectIdent : null;
        this.AuthorityProjectName = 'AuthorityProjectName' in params ? params.AuthorityProjectName : null;
        this.AuthorityUserName = 'AuthorityUserName' in params ? params.AuthorityUserName : null;
        this.Edit = 'Edit' in params ? params.Edit : null;
        this.Author = 'Author' in params ? params.Author : null;
        this.Deliver = 'Deliver' in params ? params.Deliver : null;
        this.DataSourceStatus = 'DataSourceStatus' in params ? params.DataSourceStatus : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;
        this.ParamsString = 'ParamsString' in params ? params.ParamsString : null;
        this.BizParamsString = 'BizParamsString' in params ? params.BizParamsString : null;
        this.ModifiedTime = 'ModifiedTime' in params ? params.ModifiedTime : null;
        this.ShowType = 'ShowType' in params ? params.ShowType : null;
        this.ProductId = 'ProductId' in params ? params.ProductId : null;
        this.DevelopmentId = 'DevelopmentId' in params ? params.DevelopmentId : null;
        this.DevelopmentParams = 'DevelopmentParams' in params ? params.DevelopmentParams : null;

    }
}

/**
 * DescribeTableMeta response structure.
 * @class
 */
class DescribeTableMetaResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Table Metadata InformationNote: This field may return null, indicating that no valid value can be obtained.
         * @type {TableMeta || null}
         */
        this.TableMeta = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.TableMeta) {
            let obj = new TableMeta();
            obj.deserialize(params.TableMeta)
            this.TableMeta = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Task Operation Details
 * @class
 */
class TaskOpsDto extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Virtual Task ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.VirtualTaskId = null;

        /**
         * Virtual Task Marker
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.VirtualFlag = null;

        /**
         * Task NameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskName = null;

        /**
         * Workflow IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.WorkflowId = null;

        /**
         * Actual Workflow ID when the task is a virtual task
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.RealWorkflowId = null;

        /**
         * Workflow nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.WorkflowName = null;

        /**
         * Folder ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FolderId = null;

        /**
         * Folder Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FolderName = null;

        /**
         * Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreateTime = null;

        /**
         * Latest Update Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.LastUpdate = null;

        /**
         * Task StatusNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Status = null;

        /**
         * Person in ChargeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InCharge = null;

        /**
         * Responsible User ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InChargeId = null;

        /**
         * Scheduling Effective Date
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * Scheduling End Date
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EndTime = null;

        /**
         * Execution Time Left Closed Interval
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ExecutionStartTime = null;

        /**
         * Execution Time Right Closed Interval
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ExecutionEndTime = null;

        /**
         * Cycle Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CycleType = null;

        /**
         * Step Length
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.CycleStep = null;

        /**
         * Scheduling Cron Expression
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CrontabExpression = null;

        /**
         * Delayed Execution Time, unit=minutes
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.DelayTime = null;

        /**
         * Start Execution Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.StartupTime = null;

        /**
         * Retry Wait Time, unit=minutes
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.RetryWait = null;

        /**
         * Whether to Retry, 1 represents retryable
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.RetryAble = null;

        /**
         * Scheduling Configuration - Elastic Cycle Configuration, available for Hour/Weekly/Month/Year schedules. For hourly tasks scheduled at 0, 3, 4 o'clock, it would be '0,3,4'
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskAction = null;

        /**
         * Limit on Number of Runs
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TryLimit = null;

        /**
         * Running Priority
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.RunPriority = null;

        /**
         * Task TypeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {TaskTypeOpsDto || null}
         */
        this.TaskType = null;

        /**
         * Specified Running Nodes
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.BrokerIp = null;

        /**
         * Cluster Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ClusterId = null;

        /**
         * Minimum Data Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.MinDateTime = null;

        /**
         * Maximum Data Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.MaxDateTime = null;

        /**
         * Runtime Timeout
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.ExecutionTTL = null;

        /**
         * Self-Dependency Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.SelfDepend = null;

        /**
         * Left Coordinate
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.LeftCoordinate = null;

        /**
         * Top Coordinate
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TopCoordinate = null;

        /**
         * Task Remark
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Notes = null;

        /**
         * Task Initialization Strategy
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InstanceInitStrategy = null;

        /**
         * Compute Queue
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.YarnQueue = null;

        /**
         * Latest Schedule Submission Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.LastSchedulerCommitTime = null;

        /**
         * Task Start Time Calculated by cron Expression
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.NormalizedJobStartTime = null;

        /**
         * Scheduling Plan Description
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.SchedulerDesc = null;

        /**
         * Compute Resource Group
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ResourceGroup = null;

        /**
         * Task Creator
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Creator = null;

        /**
         * Task Dependency Type: and, or
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DependencyRel = null;

        /**
         * Task Workflow Dependency: yes, no
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DependencyWorkflow = null;

        /**
         * Event Listening Configuration
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EventListenerConfig = null;

        /**
         * Event-driven Configuration
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EventPublisherConfig = null;

        /**
         * Virtual Task Status
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.VirtualTaskStatus = null;

        /**
         * Task Dependency Edge Details
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {LinkOpsDto || null}
         */
        this.TaskLinkInfo = null;

        /**
         * Task Product TypeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProductName = null;

        /**
         * Project IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Project IdentifierNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectIdent = null;

        /**
         * Project nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectName = null;

        /**
         * Main Account userId
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.OwnId = null;

        /**
         * User userId
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.UserId = null;

        /**
         * Tenant ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TenantId = null;

        /**
         * Updater's Nickname
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.UpdateUser = null;

        /**
         * Update timeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.UpdateTime = null;

        /**
         * Updater's userId
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.UpdateUserId = null;

        /**
         * Task Type ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TaskTypeId = null;

        /**
         * Task Type Description
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskTypeDesc = null;

        /**
         * Whether to Display Workflow
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.ShowWorkflow = null;

        /**
         * First Submission Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FirstSubmitTime = null;

        /**
         * First Execution Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FirstRunTime = null;

        /**
         * Scheduling Description
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ScheduleDesc = null;

        /**
         * CycleNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.CycleNum = null;

        /**
         * ExpressionsNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Crontab = null;

        /**
         * Start Date
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.StartDate = null;

        /**
         * End Date
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EndDate = null;

        /**
         * Cycle Unit
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CycleUnit = null;

        /**
         * Initialization Strategy
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InitStrategy = null;

        /**
         * Hierarchy
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Layer = null;

        /**
         * Source Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.SourceServiceId = null;

        /**
         * Source Data Source Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.SourceServiceType = null;

        /**
         * Target Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TargetServiceId = null;

        /**
         * Target Data Source Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TargetServiceType = null;

        /**
         * Subtask List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TasksStr = null;

        /**
         * Whether the Task Version Has Been Submitted
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.Submit = null;

        /**
         * Resource Group IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ExecutorGroupId = null;

        /**
         * Resource Group NameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ExecutorGroupName = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.VirtualTaskId = 'VirtualTaskId' in params ? params.VirtualTaskId : null;
        this.VirtualFlag = 'VirtualFlag' in params ? params.VirtualFlag : null;
        this.TaskName = 'TaskName' in params ? params.TaskName : null;
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;
        this.RealWorkflowId = 'RealWorkflowId' in params ? params.RealWorkflowId : null;
        this.WorkflowName = 'WorkflowName' in params ? params.WorkflowName : null;
        this.FolderId = 'FolderId' in params ? params.FolderId : null;
        this.FolderName = 'FolderName' in params ? params.FolderName : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;
        this.LastUpdate = 'LastUpdate' in params ? params.LastUpdate : null;
        this.Status = 'Status' in params ? params.Status : null;
        this.InCharge = 'InCharge' in params ? params.InCharge : null;
        this.InChargeId = 'InChargeId' in params ? params.InChargeId : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;
        this.ExecutionStartTime = 'ExecutionStartTime' in params ? params.ExecutionStartTime : null;
        this.ExecutionEndTime = 'ExecutionEndTime' in params ? params.ExecutionEndTime : null;
        this.CycleType = 'CycleType' in params ? params.CycleType : null;
        this.CycleStep = 'CycleStep' in params ? params.CycleStep : null;
        this.CrontabExpression = 'CrontabExpression' in params ? params.CrontabExpression : null;
        this.DelayTime = 'DelayTime' in params ? params.DelayTime : null;
        this.StartupTime = 'StartupTime' in params ? params.StartupTime : null;
        this.RetryWait = 'RetryWait' in params ? params.RetryWait : null;
        this.RetryAble = 'RetryAble' in params ? params.RetryAble : null;
        this.TaskAction = 'TaskAction' in params ? params.TaskAction : null;
        this.TryLimit = 'TryLimit' in params ? params.TryLimit : null;
        this.RunPriority = 'RunPriority' in params ? params.RunPriority : null;

        if (params.TaskType) {
            let obj = new TaskTypeOpsDto();
            obj.deserialize(params.TaskType)
            this.TaskType = obj;
        }
        this.BrokerIp = 'BrokerIp' in params ? params.BrokerIp : null;
        this.ClusterId = 'ClusterId' in params ? params.ClusterId : null;
        this.MinDateTime = 'MinDateTime' in params ? params.MinDateTime : null;
        this.MaxDateTime = 'MaxDateTime' in params ? params.MaxDateTime : null;
        this.ExecutionTTL = 'ExecutionTTL' in params ? params.ExecutionTTL : null;
        this.SelfDepend = 'SelfDepend' in params ? params.SelfDepend : null;
        this.LeftCoordinate = 'LeftCoordinate' in params ? params.LeftCoordinate : null;
        this.TopCoordinate = 'TopCoordinate' in params ? params.TopCoordinate : null;
        this.Notes = 'Notes' in params ? params.Notes : null;
        this.InstanceInitStrategy = 'InstanceInitStrategy' in params ? params.InstanceInitStrategy : null;
        this.YarnQueue = 'YarnQueue' in params ? params.YarnQueue : null;
        this.LastSchedulerCommitTime = 'LastSchedulerCommitTime' in params ? params.LastSchedulerCommitTime : null;
        this.NormalizedJobStartTime = 'NormalizedJobStartTime' in params ? params.NormalizedJobStartTime : null;
        this.SchedulerDesc = 'SchedulerDesc' in params ? params.SchedulerDesc : null;
        this.ResourceGroup = 'ResourceGroup' in params ? params.ResourceGroup : null;
        this.Creator = 'Creator' in params ? params.Creator : null;
        this.DependencyRel = 'DependencyRel' in params ? params.DependencyRel : null;
        this.DependencyWorkflow = 'DependencyWorkflow' in params ? params.DependencyWorkflow : null;
        this.EventListenerConfig = 'EventListenerConfig' in params ? params.EventListenerConfig : null;
        this.EventPublisherConfig = 'EventPublisherConfig' in params ? params.EventPublisherConfig : null;
        this.VirtualTaskStatus = 'VirtualTaskStatus' in params ? params.VirtualTaskStatus : null;

        if (params.TaskLinkInfo) {
            let obj = new LinkOpsDto();
            obj.deserialize(params.TaskLinkInfo)
            this.TaskLinkInfo = obj;
        }
        this.ProductName = 'ProductName' in params ? params.ProductName : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.ProjectIdent = 'ProjectIdent' in params ? params.ProjectIdent : null;
        this.ProjectName = 'ProjectName' in params ? params.ProjectName : null;
        this.OwnId = 'OwnId' in params ? params.OwnId : null;
        this.UserId = 'UserId' in params ? params.UserId : null;
        this.TenantId = 'TenantId' in params ? params.TenantId : null;
        this.UpdateUser = 'UpdateUser' in params ? params.UpdateUser : null;
        this.UpdateTime = 'UpdateTime' in params ? params.UpdateTime : null;
        this.UpdateUserId = 'UpdateUserId' in params ? params.UpdateUserId : null;
        this.TaskTypeId = 'TaskTypeId' in params ? params.TaskTypeId : null;
        this.TaskTypeDesc = 'TaskTypeDesc' in params ? params.TaskTypeDesc : null;
        this.ShowWorkflow = 'ShowWorkflow' in params ? params.ShowWorkflow : null;
        this.FirstSubmitTime = 'FirstSubmitTime' in params ? params.FirstSubmitTime : null;
        this.FirstRunTime = 'FirstRunTime' in params ? params.FirstRunTime : null;
        this.ScheduleDesc = 'ScheduleDesc' in params ? params.ScheduleDesc : null;
        this.CycleNum = 'CycleNum' in params ? params.CycleNum : null;
        this.Crontab = 'Crontab' in params ? params.Crontab : null;
        this.StartDate = 'StartDate' in params ? params.StartDate : null;
        this.EndDate = 'EndDate' in params ? params.EndDate : null;
        this.CycleUnit = 'CycleUnit' in params ? params.CycleUnit : null;
        this.InitStrategy = 'InitStrategy' in params ? params.InitStrategy : null;
        this.Layer = 'Layer' in params ? params.Layer : null;
        this.SourceServiceId = 'SourceServiceId' in params ? params.SourceServiceId : null;
        this.SourceServiceType = 'SourceServiceType' in params ? params.SourceServiceType : null;
        this.TargetServiceId = 'TargetServiceId' in params ? params.TargetServiceId : null;
        this.TargetServiceType = 'TargetServiceType' in params ? params.TargetServiceType : null;
        this.TasksStr = 'TasksStr' in params ? params.TasksStr : null;
        this.Submit = 'Submit' in params ? params.Submit : null;
        this.ExecutorGroupId = 'ExecutorGroupId' in params ? params.ExecutorGroupId : null;
        this.ExecutorGroupName = 'ExecutorGroupName' in params ? params.ExecutorGroupName : null;

    }
}

/**
 * DescribeOfflineTaskToken request structure.
 * @class
 */
class DescribeOfflineTaskTokenRequest extends  AbstractModel {
    constructor(){
        super();

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

    }
}

/**
 * DescribeRuleExecDetail request structure.
 * @class
 */
class DescribeRuleExecDetailRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Rule Execution ID
         * @type {number || null}
         */
        this.RuleExecId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.RuleExecId = 'RuleExecId' in params ? params.RuleExecId : null;

    }
}

/**
 * DeleteResource request structure.
 * @class
 */
class DeleteResourceRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Resource ID
         * @type {string || null}
         */
        this.ResourceId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.ResourceId = 'ResourceId' in params ? params.ResourceId : null;

    }
}

/**
 * Data Quality Rule Group Subscription Information
 * @class
 */
class RuleGroupSubscribe extends  AbstractModel {
    constructor(){
        super();

        /**
         * Rule Group ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.RuleGroupId = null;

        /**
         * Subscription Recipient List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<SubscribeReceiver> || null}
         */
        this.Receivers = null;

        /**
         * Subscription Method 1. Email  2. SMS
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<number> || null}
         */
        this.SubscribeType = null;

        /**
         * Group Robot Configuration's Webhook Information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<SubscribeWebHook> || null}
         */
        this.WebHooks = null;

        /**
         * Rule ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.RuleId = null;

        /**
         * Rule nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.RuleName = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.RuleGroupId = 'RuleGroupId' in params ? params.RuleGroupId : null;

        if (params.Receivers) {
            this.Receivers = new Array();
            for (let z in params.Receivers) {
                let obj = new SubscribeReceiver();
                obj.deserialize(params.Receivers[z]);
                this.Receivers.push(obj);
            }
        }
        this.SubscribeType = 'SubscribeType' in params ? params.SubscribeType : null;

        if (params.WebHooks) {
            this.WebHooks = new Array();
            for (let z in params.WebHooks) {
                let obj = new SubscribeWebHook();
                obj.deserialize(params.WebHooks[z]);
                this.WebHooks.push(obj);
            }
        }
        this.RuleId = 'RuleId' in params ? params.RuleId : null;
        this.RuleName = 'RuleName' in params ? params.RuleName : null;

    }
}

/**
 * RegisterEventListener request structure.
 * @class
 */
class RegisterEventListenerRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Keyword, if it refers to a task, then pass the Task ID
         * @type {string || null}
         */
        this.Key = null;

        /**
         * Event name
         * @type {string || null}
         */
        this.EventName = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Event type, default REST_API
         * @type {string || null}
         */
        this.Type = null;

        /**
         * Configuration information, for example, maximum waiting time 1 day configuration in json: {"maxWaitEventTime":1,"maxWaitEventTimeUnit":"DAYS"}
         * @type {string || null}
         */
        this.Properties = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Key = 'Key' in params ? params.Key : null;
        this.EventName = 'EventName' in params ? params.EventName : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.Type = 'Type' in params ? params.Type : null;
        this.Properties = 'Properties' in params ? params.Properties : null;

    }
}

/**
 * BatchRunOpsTask response structure.
 * @class
 */
class BatchRunOpsTaskResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Operation resultNote: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * CheckIntegrationNodeNameExists response structure.
 * @class
 */
class CheckIntegrationNodeNameExistsResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Return true means it exists, return false means it does not exist
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * RobAndLockIntegrationTask response structure.
 * @class
 */
class RobAndLockIntegrationTaskResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Lock Acquisition Status
         * @type {RobLockState || null}
         */
        this.RobLockState = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.RobLockState) {
            let obj = new RobLockState();
            obj.deserialize(params.RobLockState)
            this.RobLockState = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Supplementary Plan Instance Collection
 * @class
 */
class MakePlanInstanceOpsDtoCollection extends  AbstractModel {
    constructor(){
        super();

        /**
         * Total Record Count
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * Total Number of Pages
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalPage = null;

        /**
         * Number of Records on Current Page
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.PageCount = null;

        /**
         * Page NumberNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Page SizeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Record List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<InstanceOpsDto> || null}
         */
        this.Items = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.TotalPage = 'TotalPage' in params ? params.TotalPage : null;
        this.PageCount = 'PageCount' in params ? params.PageCount : null;
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;

        if (params.Items) {
            this.Items = new Array();
            for (let z in params.Items) {
                let obj = new InstanceOpsDto();
                obj.deserialize(params.Items[z]);
                this.Items.push(obj);
            }
        }

    }
}

/**
 * DeleteTaskAlarmRegular request structure.
 * @class
 */
class DeleteTaskAlarmRegularRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Primary key ID
         * @type {string || null}
         */
        this.Id = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Task Type (201 represents Real-time task, 202 represents Offline task)
         * @type {number || null}
         */
        this.TaskType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Id = 'Id' in params ? params.Id : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.TaskType = 'TaskType' in params ? params.TaskType : null;

    }
}

/**
 * Comparison Rules
 * @class
 */
class CompareRule extends  AbstractModel {
    constructor(){
        super();

        /**
         * Comparison Criteria List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<CompareRuleItem> || null}
         */
        this.Items = null;

        /**
         * Default cycle of the periodic template, Unit: seconds
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.CycleStep = null;

        /**
         * o represents OR, a represents AND, numbers represent items' indices
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ComputeExpression = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Items) {
            this.Items = new Array();
            for (let z in params.Items) {
                let obj = new CompareRuleItem();
                obj.deserialize(params.Items[z]);
                this.Items.push(obj);
            }
        }
        this.CycleStep = 'CycleStep' in params ? params.CycleStep : null;
        this.ComputeExpression = 'ComputeExpression' in params ? params.ComputeExpression : null;

    }
}

/**
 * Comparison Criterion
 * @class
 */
class CompareRuleItem extends  AbstractModel {
    constructor(){
        super();

        /**
         * Comparison Type 1. Fixed value  2. Fluctuation Value  3. Numeric Range Comparison  4. Enumeration Range Comparison  5. No Comparison
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.CompareType = null;

        /**
         * Comparison Operation Type
<  <=  ==  =>  > !=
IRLCRO: Within the interval (left closed, right open)
IRLORC: Within the interval (left open, right closed)
IRLCRC: Within the interval (left closed, right closed)
IRLORO: Within the interval (left open, right open)
NRLCRO: Not within the range (left-closed, right-open)
NRLORC: Not within the range (left-open, right-closed)
NRLCRC: Not within the range (left-closed, right-closed)
NRLORO: Not within the range (left-open, right-open)
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Operator = null;

        /**
         * Quality statistical value types 1. Absolute Value 2. Increase 3. Decline 4. _C includes 5. N_C does not include
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.ValueComputeType = null;

        /**
         * Comparison threshold list
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<ThresholdValue> || null}
         */
        this.ValueList = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.CompareType = 'CompareType' in params ? params.CompareType : null;
        this.Operator = 'Operator' in params ? params.Operator : null;
        this.ValueComputeType = 'ValueComputeType' in params ? params.ValueComputeType : null;

        if (params.ValueList) {
            this.ValueList = new Array();
            for (let z in params.ValueList) {
                let obj = new ThresholdValue();
                obj.deserialize(params.ValueList[z]);
                this.ValueList.push(obj);
            }
        }

    }
}

/**
 * DescribeInstanceLogFile request structure.
 * @class
 */
class DescribeInstanceLogFileRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Instance data time
         * @type {string || null}
         */
        this.CurRunDate = null;

        /**
         * Executor IP
         * @type {string || null}
         */
        this.BrokerIp = null;

        /**
         * Log file name
         * @type {string || null}
         */
        this.OriginFileName = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.CurRunDate = 'CurRunDate' in params ? params.CurRunDate : null;
        this.BrokerIp = 'BrokerIp' in params ? params.BrokerIp : null;
        this.OriginFileName = 'OriginFileName' in params ? params.OriginFileName : null;

    }
}

/**
 * DeleteOfflineTask response structure.
 * @class
 */
class DeleteOfflineTaskResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Result
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Instance log information
 * @class
 */
class IntegrationInstanceLog extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task log information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.LogInfo = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.LogInfo = 'LogInfo' in params ? params.LogInfo : null;

    }
}

/**
 * Task execution script
 * @class
 */
class TaskScriptContent extends  AbstractModel {
    constructor(){
        super();

        /**
         * Script content Base64 encoded
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ScriptContent = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ScriptContent = 'ScriptContent' in params ? params.ScriptContent : null;

    }
}

/**
 * DataInLong Dashboard trend chart statistical results
 * @class
 */
class IntegrationStatisticsTrendResult extends  AbstractModel {
    constructor(){
        super();

        /**
         * Statistical Attribute Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<string> || null}
         */
        this.StatisticName = null;

        /**
         * Statistical Value
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<number> || null}
         */
        this.StatisticValue = null;

        /**
         * Statistical Item
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.StatisticType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.StatisticName = 'StatisticName' in params ? params.StatisticName : null;
        this.StatisticValue = 'StatisticValue' in params ? params.StatisticValue : null;
        this.StatisticType = 'StatisticType' in params ? params.StatisticType : null;

    }
}

/**
 * DescribeDrInstancePage request structure.
 * @class
 */
class DescribeDrInstancePageRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Task Source ADHOC || WORKFLOW
         * @type {string || null}
         */
        this.TaskSource = null;

        /**
         * Index Page Number
         * @type {number || null}
         */
        this.PageIndex = null;

        /**
         * Page size
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Task Name
         * @type {string || null}
         */
        this.TaskName = null;

        /**
         * Submission Start Time yyyy-MM-dd HH:mm:ss
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * Submission End Time yyyy-MM-dd HH:mm:ss
         * @type {string || null}
         */
        this.EndTime = null;

        /**
         * Folder ID
         * @type {Array.<string> || null}
         */
        this.FolderIds = null;

        /**
         * Workflow ID
         * @type {Array.<string> || null}
         */
        this.WorkflowIds = null;

        /**
         * View Only Mine
         * @type {boolean || null}
         */
        this.JustMe = null;

        /**
         * Task Type
         * @type {Array.<string> || null}
         */
        this.TaskTypes = null;

        /**
         * Trial Run Submitter userId List
         * @type {Array.<string> || null}
         */
        this.SubmitUsers = null;

        /**
         * Trial Run Status
         * @type {Array.<string> || null}
         */
        this.StatusList = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.TaskSource = 'TaskSource' in params ? params.TaskSource : null;
        this.PageIndex = 'PageIndex' in params ? params.PageIndex : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;
        this.TaskName = 'TaskName' in params ? params.TaskName : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;
        this.FolderIds = 'FolderIds' in params ? params.FolderIds : null;
        this.WorkflowIds = 'WorkflowIds' in params ? params.WorkflowIds : null;
        this.JustMe = 'JustMe' in params ? params.JustMe : null;
        this.TaskTypes = 'TaskTypes' in params ? params.TaskTypes : null;
        this.SubmitUsers = 'SubmitUsers' in params ? params.SubmitUsers : null;
        this.StatusList = 'StatusList' in params ? params.StatusList : null;

    }
}

/**
 * Specify Time Window Instance Duration Ranking
 * @class
 */
class RuntimeInstanceCntTop extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * 1
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskName = null;

        /**
         * Person in ChargeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InCharge = null;

        /**
         * Task Cycle Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CycleUnit = null;

        /**
         * Instance StatusNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.State = null;

        /**
         * Time Consumption
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.RunTime = null;

        /**
         * Instance Running TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CurRunTime = null;

        /**
         * Waiting for Scheduling Duration
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.WaitScheduleTime = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.TaskName = 'TaskName' in params ? params.TaskName : null;
        this.InCharge = 'InCharge' in params ? params.InCharge : null;
        this.CycleUnit = 'CycleUnit' in params ? params.CycleUnit : null;
        this.State = 'State' in params ? params.State : null;
        this.RunTime = 'RunTime' in params ? params.RunTime : null;
        this.CurRunTime = 'CurRunTime' in params ? params.CurRunTime : null;
        this.WaitScheduleTime = 'WaitScheduleTime' in params ? params.WaitScheduleTime : null;

    }
}

/**
 * Column Metadata
 * @class
 */
class ColumnMeta extends  AbstractModel {
    constructor(){
        super();

        /**
         * Field English Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.NameEn = null;

        /**
         * Field Chinese Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.NameCn = null;

        /**
         * Field TypeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Type = null;

        /**
         * Field DescriptionNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Description = null;

        /**
         * Field Sequence Number
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Position = null;

        /**
         * Is Partition Field
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.IsPartition = null;

        /**
         * Field nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Name = null;

        /**
         * HBase Column Family Attribute Set
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<Pair> || null}
         */
        this.ColumnFamiliesFieldSet = null;

        /**
         * Corresponding Code Table Dictionary ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DictionaryId = null;

        /**
         * Corresponding Code Table Dictionary Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DictionaryName = null;

        /**
         * Security Level: Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.LevelName = null;

        /**
         * Security Level: Value Range 1-10
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.LevelRank = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.NameEn = 'NameEn' in params ? params.NameEn : null;
        this.NameCn = 'NameCn' in params ? params.NameCn : null;
        this.Type = 'Type' in params ? params.Type : null;
        this.Description = 'Description' in params ? params.Description : null;
        this.Position = 'Position' in params ? params.Position : null;
        this.IsPartition = 'IsPartition' in params ? params.IsPartition : null;
        this.Name = 'Name' in params ? params.Name : null;

        if (params.ColumnFamiliesFieldSet) {
            this.ColumnFamiliesFieldSet = new Array();
            for (let z in params.ColumnFamiliesFieldSet) {
                let obj = new Pair();
                obj.deserialize(params.ColumnFamiliesFieldSet[z]);
                this.ColumnFamiliesFieldSet.push(obj);
            }
        }
        this.DictionaryId = 'DictionaryId' in params ? params.DictionaryId : null;
        this.DictionaryName = 'DictionaryName' in params ? params.DictionaryName : null;
        this.LevelName = 'LevelName' in params ? params.LevelName : null;
        this.LevelRank = 'LevelRank' in params ? params.LevelRank : null;

    }
}

/**
 * GenHiveTableDDLSql response structure.
 * @class
 */
class GenHiveTableDDLSqlResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Generated DDL Statement
         * @type {string || null}
         */
        this.DDLSql = null;

        /**
         * Generated DDL Statement. Same meaning as DDLSql, prioritizing Data. If Data is null, then DDLSql is taken.
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.DDLSql = 'DDLSql' in params ? params.DDLSql : null;
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeRuleGroupTable request structure.
 * @class
 */
class DescribeRuleGroupTableRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Table ID
         * @type {string || null}
         */
        this.TableId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TableId = 'TableId' in params ? params.TableId : null;

    }
}

/**
 * CheckAlarmRegularNameExist request structure.
 * @class
 */
class CheckAlarmRegularNameExistRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project name
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Rule name
         * @type {string || null}
         */
        this.AlarmRegularName = null;

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Primary key ID
         * @type {string || null}
         */
        this.Id = null;

        /**
         * Task type: 201.Real-time, 202.Offline
         * @type {number || null}
         */
        this.TaskType = null;

        /**
         * Monitored Object Type (1: All Tasks, 2: Assigned Task, 3: Designated Responsible Person, 4: Specified Resource Group)
         * @type {number || null}
         */
        this.MonitorType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.AlarmRegularName = 'AlarmRegularName' in params ? params.AlarmRegularName : null;
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.Id = 'Id' in params ? params.Id : null;
        this.TaskType = 'TaskType' in params ? params.TaskType : null;
        this.MonitorType = 'MonitorType' in params ? params.MonitorType : null;

    }
}

/**
 * ColumnItem
 * @class
 */
class ColumnData extends  AbstractModel {
    constructor(){
        super();

        /**
         * ColumnName1
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EventName = null;

        /**
         * ColumnName1
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EventProjectName = null;

        /**
         * 1
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Type = null;

        /**
         * 1
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CurRunDate = null;

        /**
         * 1
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * 1
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.State = null;

        /**
         * 1
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EventType = null;

        /**
         * Task NameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskName = null;

        /**
         * Project nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectName = null;

        /**
         * Project IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.EventName = 'EventName' in params ? params.EventName : null;
        this.EventProjectName = 'EventProjectName' in params ? params.EventProjectName : null;
        this.Type = 'Type' in params ? params.Type : null;
        this.CurRunDate = 'CurRunDate' in params ? params.CurRunDate : null;
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.State = 'State' in params ? params.State : null;
        this.EventType = 'EventType' in params ? params.EventType : null;
        this.TaskName = 'TaskName' in params ? params.TaskName : null;
        this.ProjectName = 'ProjectName' in params ? params.ProjectName : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * Rule Execution Result
 * @class
 */
class RuleExecResult extends  AbstractModel {
    constructor(){
        super();

        /**
         * Rule Execution ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.RuleExecId = null;

        /**
         * Rule Group Execution ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.RuleGroupExecId = null;

        /**
         * Rule Group IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.RuleGroupId = null;

        /**
         * Rule IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.RuleId = null;

        /**
         * Rule nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.RuleName = null;

        /**
         * Rule type 1.System Template, 2.Custom Definition Template, 3.Custom Definition SQLNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.RuleType = null;

        /**
         * Source Field Detailed Type, int string
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.SourceObjectDataTypeName = null;

        /**
         * Source Field NameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.SourceObjectValue = null;

        /**
         * Conditional Scan WHERE Condition ExpressionNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ConditionExpression = null;

        /**
         * Test Results (1: Detection passed, 2: Trigger Rules, 3: Detection failed)
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.ExecResultStatus = null;

        /**
         * Trigger Result, Alert Sent Successfully, Block Task Successful
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TriggerResult = null;

        /**
         * Comparison Result
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {CompareResult || null}
         */
        this.CompareResult = null;

        /**
         * Template name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TemplateName = null;

        /**
         * Quality Dimension
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.QualityDim = null;

        /**
         * Target Table - Database Table Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TargetDBTableName = null;

        /**
         * Target Table - Field Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TargetObjectValue = null;

        /**
         * Target Table - Field Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TargetObjectDataType = null;

        /**
         * Custom Definition Template SQL Expression Parameters
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {RuleFieldConfig || null}
         */
        this.FieldConfig = null;

        /**
         * Source Field and Target Field Association Condition ON ExpressionNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.RelConditionExpr = null;

        /**
         * Execution timeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * 1/2/3: Low/Medium/High
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.AlarmLevel = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.RuleExecId = 'RuleExecId' in params ? params.RuleExecId : null;
        this.RuleGroupExecId = 'RuleGroupExecId' in params ? params.RuleGroupExecId : null;
        this.RuleGroupId = 'RuleGroupId' in params ? params.RuleGroupId : null;
        this.RuleId = 'RuleId' in params ? params.RuleId : null;
        this.RuleName = 'RuleName' in params ? params.RuleName : null;
        this.RuleType = 'RuleType' in params ? params.RuleType : null;
        this.SourceObjectDataTypeName = 'SourceObjectDataTypeName' in params ? params.SourceObjectDataTypeName : null;
        this.SourceObjectValue = 'SourceObjectValue' in params ? params.SourceObjectValue : null;
        this.ConditionExpression = 'ConditionExpression' in params ? params.ConditionExpression : null;
        this.ExecResultStatus = 'ExecResultStatus' in params ? params.ExecResultStatus : null;
        this.TriggerResult = 'TriggerResult' in params ? params.TriggerResult : null;

        if (params.CompareResult) {
            let obj = new CompareResult();
            obj.deserialize(params.CompareResult)
            this.CompareResult = obj;
        }
        this.TemplateName = 'TemplateName' in params ? params.TemplateName : null;
        this.QualityDim = 'QualityDim' in params ? params.QualityDim : null;
        this.TargetDBTableName = 'TargetDBTableName' in params ? params.TargetDBTableName : null;
        this.TargetObjectValue = 'TargetObjectValue' in params ? params.TargetObjectValue : null;
        this.TargetObjectDataType = 'TargetObjectDataType' in params ? params.TargetObjectDataType : null;

        if (params.FieldConfig) {
            let obj = new RuleFieldConfig();
            obj.deserialize(params.FieldConfig)
            this.FieldConfig = obj;
        }
        this.RelConditionExpr = 'RelConditionExpr' in params ? params.RelConditionExpr : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.AlarmLevel = 'AlarmLevel' in params ? params.AlarmLevel : null;

    }
}

/**
 * Table
 * @class
 */
class Table extends  AbstractModel {
    constructor(){
        super();

        /**
         * 1
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<ColumnItem> || null}
         */
        this.Column = null;

        /**
         * 1
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<ColumnData> || null}
         */
        this.Data = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Column) {
            this.Column = new Array();
            for (let z in params.Column) {
                let obj = new ColumnItem();
                obj.deserialize(params.Column[z]);
                this.Column.push(obj);
            }
        }

        if (params.Data) {
            this.Data = new Array();
            for (let z in params.Data) {
                let obj = new ColumnData();
                obj.deserialize(params.Data[z]);
                this.Data.push(obj);
            }
        }

    }
}

/**
 * DescribeWorkflowExecuteById response structure.
 * @class
 */
class DescribeWorkflowExecuteByIdResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Workflow Runtime Information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {WorkFlowExecuteDtoByPage || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new WorkFlowExecuteDtoByPage();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * CreateIntegrationTask request structure.
 * @class
 */
class CreateIntegrationTaskRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task Information
         * @type {IntegrationTaskInfo || null}
         */
        this.TaskInfo = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.TaskInfo) {
            let obj = new IntegrationTaskInfo();
            obj.deserialize(params.TaskInfo)
            this.TaskInfo = obj;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * BatchRunOpsTask request structure.
 * @class
 */
class BatchRunOpsTaskRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Whether to Supplement Intermediate Instances, 0 for not supplementing; 1 for supplementing
         * @type {number || null}
         */
        this.EnableMakeUp = null;

        /**
         * Task ID list
         * @type {Array.<string> || null}
         */
        this.Tasks = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.EnableMakeUp = 'EnableMakeUp' in params ? params.EnableMakeUp : null;
        this.Tasks = 'Tasks' in params ? params.Tasks : null;

    }
}

/**
 * Field Variable
 * @class
 */
class FieldConfig extends  AbstractModel {
    constructor(){
        super();

        /**
         * Field key
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FieldKey = null;

        /**
         * Field valueNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FieldValue = null;

        /**
         * Field Value Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FieldDataType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.FieldKey = 'FieldKey' in params ? params.FieldKey : null;
        this.FieldValue = 'FieldValue' in params ? params.FieldValue : null;
        this.FieldDataType = 'FieldDataType' in params ? params.FieldDataType : null;

    }
}

/**
 * DescribeRealTimeTaskMetricOverview request structure.
 * @class
 */
class DescribeRealTimeTaskMetricOverviewRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID of the real-time task to be viewed, which can be obtained from the task list page
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Project ID to be viewed
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Start Time
         * @type {number || null}
         */
        this.StartTime = null;

        /**
         * End time
         * @type {number || null}
         */
        this.EndTime = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;

    }
}

/**
 * DescribeDatabaseMetas response structure.
 * @class
 */
class DescribeDatabaseMetasResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * NoNote: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<DatabaseMeta> || null}
         */
        this.DatabaseMeta = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.DatabaseMeta) {
            this.DatabaseMeta = new Array();
            for (let z in params.DatabaseMeta) {
                let obj = new DatabaseMeta();
                obj.deserialize(params.DatabaseMeta[z]);
                this.DatabaseMeta.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * New Parameter for Offline Task
 * @class
 */
class OfflineTaskAddParam extends  AbstractModel {
    constructor(){
        super();

        /**
         * Name
         * @type {string || null}
         */
        this.WorkflowName = null;

        /**
         * Dependencies: yes, no
         * @type {string || null}
         */
        this.DependencyWorkflow = null;

        /**
         * Task Start Data Time. Not Empty. Default to Current Time
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * Task End Data Time. Not Empty. Default to Current Time
         * @type {string || null}
         */
        this.EndTime = null;

        /**
         * Cycle Type. One-time task: 6, Minute Task: 1, Hourly task: 2, Daily Task: 3, Weekly Task: 4, Monthly Task: 5, Cron task: 0
         * @type {number || null}
         */
        this.CycleType = null;

        /**
         * Interval, optional, default is 1. Not null. Default is 1
         * @type {number || null}
         */
        this.CycleStep = null;

        /**
         * Delayed Execution Time, in minutes
         * @type {number || null}
         */
        this.DelayTime = null;

        /**
         * Task cron expression, used only for cron tasks, else defaults to empty
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CrontabExpression = null;

        /**
         * Retry Wait
         * @type {number || null}
         */
        this.RetryWait = null;

        /**
         * Is Retry Allowed
         * @type {number || null}
         */
        this.Retriable = null;

        /**
         * Retry Limit
         * @type {number || null}
         */
        this.TryLimit = null;

        /**
         * Priority
         * @type {number || null}
         */
        this.RunPriority = null;

        /**
         * Product
         * @type {string || null}
         */
        this.ProductName = null;

        /**
         * 1 Ordered Serialization, one at a time, queued orderly
2 Unordered Serial, one at a time, not queued serial
3 Parallel, multiple at a time parallel
         * @type {number || null}
         */
        this.SelfDepend = null;

        /**
         * Time Specification, such as 1,3 for monthly tasks, enter 1,3. Not empty. Default ""
Monthly Task: for specific days like "1,3", specifying end of month as "L" alone, cannot be mixed with specific dates
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskAction = null;

        /**
         * Scheduled Execution End Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ExecutionEndTime = null;

        /**
         * Scheduled Execution Start Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ExecutionStartTime = null;

        /**
         * Is Auto-submit
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.TaskAutoSubmit = null;

        /**
         * Instance Generation Method, T_PLUS_0 schedule task on the same day / T_PLUS_1 schedule task the next day
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InstanceInitStrategy = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.WorkflowName = 'WorkflowName' in params ? params.WorkflowName : null;
        this.DependencyWorkflow = 'DependencyWorkflow' in params ? params.DependencyWorkflow : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;
        this.CycleType = 'CycleType' in params ? params.CycleType : null;
        this.CycleStep = 'CycleStep' in params ? params.CycleStep : null;
        this.DelayTime = 'DelayTime' in params ? params.DelayTime : null;
        this.CrontabExpression = 'CrontabExpression' in params ? params.CrontabExpression : null;
        this.RetryWait = 'RetryWait' in params ? params.RetryWait : null;
        this.Retriable = 'Retriable' in params ? params.Retriable : null;
        this.TryLimit = 'TryLimit' in params ? params.TryLimit : null;
        this.RunPriority = 'RunPriority' in params ? params.RunPriority : null;
        this.ProductName = 'ProductName' in params ? params.ProductName : null;
        this.SelfDepend = 'SelfDepend' in params ? params.SelfDepend : null;
        this.TaskAction = 'TaskAction' in params ? params.TaskAction : null;
        this.ExecutionEndTime = 'ExecutionEndTime' in params ? params.ExecutionEndTime : null;
        this.ExecutionStartTime = 'ExecutionStartTime' in params ? params.ExecutionStartTime : null;
        this.TaskAutoSubmit = 'TaskAutoSubmit' in params ? params.TaskAutoSubmit : null;
        this.InstanceInitStrategy = 'InstanceInitStrategy' in params ? params.InstanceInitStrategy : null;

    }
}

/**
 * FreezeTasksByWorkflowIds response structure.
 * @class
 */
class FreezeTasksByWorkflowIdsResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Operation ResultNote: This field may return null, indicating that no valid value can be obtained.
         * @type {OperationOpsDto || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new OperationOpsDto();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * SubmitWorkflow request structure.
 * @class
 */
class SubmitWorkflowRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Workflow ID
         * @type {string || null}
         */
        this.WorkflowId = null;

        /**
         * Submitted Version Notes
         * @type {string || null}
         */
        this.VersionRemark = null;

        /**
         * Whether to Enable Scheduling
         * @type {boolean || null}
         */
        this.StartScheduling = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;
        this.VersionRemark = 'VersionRemark' in params ? params.VersionRemark : null;
        this.StartScheduling = 'StartScheduling' in params ? params.StartScheduling : null;

    }
}

/**
 * DescribeResourceManagePathTrees response structure.
 * @class
 */
class DescribeResourceManagePathTreesResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Response Data
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<ResourcePathTree> || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            this.Data = new Array();
            for (let z in params.Data) {
                let obj = new ResourcePathTree();
                obj.deserialize(params.Data[z]);
                this.Data.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * RunRerunScheduleInstances request structure.
 * @class
 */
class RunRerunScheduleInstancesRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Instance List
         * @type {Array.<InstanceOpsDto> || null}
         */
        this.Instances = null;

        /**
         * Check Parent Task Type, true: Check parent task; false: Do not check parent task
         * @type {boolean || null}
         */
        this.CheckFather = null;

        /**
         * Rerun Type, 1: Self; 3: Child; 2: Self and Child
         * @type {string || null}
         */
        this.RerunType = null;

        /**
         * Instance Dependency Mode, 1: Self-dependent; 2: Task-dependent; 3: Self and Parent-Child dependent
         * @type {string || null}
         */
        this.DependentWay = null;

        /**
         * Rerun Ignore Event Listening or Not
         * @type {boolean || null}
         */
        this.SkipEventListening = null;

        /**
         * Downstream Instance Range 1: Within the workflow 2: Within the project 3: Across all workflows dependent on the project
         * @type {string || null}
         */
        this.SonInstanceType = null;

        /**
         * Query conditions
         * @type {InstanceApiOpsRequest || null}
         */
        this.SearchCondition = null;

        /**
         * Access type
         * @type {string || null}
         */
        this.OptType = null;

        /**
         * Operator Name
         * @type {string || null}
         */
        this.OperatorName = null;

        /**
         * Operator ID
         * @type {string || null}
         */
        this.OperatorId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Project Identifier
         * @type {string || null}
         */
        this.ProjectIdent = null;

        /**
         * Project name
         * @type {string || null}
         */
        this.ProjectName = null;

        /**
         * Index Page Number
         * @type {number || null}
         */
        this.PageIndex = null;

        /**
         * Page size
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Total Data
         * @type {number || null}
         */
        this.Count = null;

        /**
         * Basic Request Information
         * @type {ProjectBaseInfoOpsRequest || null}
         */
        this.RequestBaseInfo = null;

        /**
         * Whether to Calculate Total
         * @type {boolean || null}
         */
        this.IsCount = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Instances) {
            this.Instances = new Array();
            for (let z in params.Instances) {
                let obj = new InstanceOpsDto();
                obj.deserialize(params.Instances[z]);
                this.Instances.push(obj);
            }
        }
        this.CheckFather = 'CheckFather' in params ? params.CheckFather : null;
        this.RerunType = 'RerunType' in params ? params.RerunType : null;
        this.DependentWay = 'DependentWay' in params ? params.DependentWay : null;
        this.SkipEventListening = 'SkipEventListening' in params ? params.SkipEventListening : null;
        this.SonInstanceType = 'SonInstanceType' in params ? params.SonInstanceType : null;

        if (params.SearchCondition) {
            let obj = new InstanceApiOpsRequest();
            obj.deserialize(params.SearchCondition)
            this.SearchCondition = obj;
        }
        this.OptType = 'OptType' in params ? params.OptType : null;
        this.OperatorName = 'OperatorName' in params ? params.OperatorName : null;
        this.OperatorId = 'OperatorId' in params ? params.OperatorId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.ProjectIdent = 'ProjectIdent' in params ? params.ProjectIdent : null;
        this.ProjectName = 'ProjectName' in params ? params.ProjectName : null;
        this.PageIndex = 'PageIndex' in params ? params.PageIndex : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;
        this.Count = 'Count' in params ? params.Count : null;

        if (params.RequestBaseInfo) {
            let obj = new ProjectBaseInfoOpsRequest();
            obj.deserialize(params.RequestBaseInfo)
            this.RequestBaseInfo = obj;
        }
        this.IsCount = 'IsCount' in params ? params.IsCount : null;

    }
}

/**
 * Rule Group Association Table Information
 * @class
 */
class RuleGroupTableInnerInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Table IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableId = null;

        /**
         * Table NameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableName = null;

        /**
         * Instance IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InstanceId = null;

        /**
         * Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatasourceId = null;

        /**
         * Data Source Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatasourceName = null;

        /**
         * Data source typeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.DatasourceType = null;

        /**
         * Database ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatabaseId = null;

        /**
         * Database nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatabaseName = null;

        /**
         * Project IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.ProjectId = null;

        /**
         * Responsible Person ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.UserId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TableId = 'TableId' in params ? params.TableId : null;
        this.TableName = 'TableName' in params ? params.TableName : null;
        this.InstanceId = 'InstanceId' in params ? params.InstanceId : null;
        this.DatasourceId = 'DatasourceId' in params ? params.DatasourceId : null;
        this.DatasourceName = 'DatasourceName' in params ? params.DatasourceName : null;
        this.DatasourceType = 'DatasourceType' in params ? params.DatasourceType : null;
        this.DatabaseId = 'DatabaseId' in params ? params.DatabaseId : null;
        this.DatabaseName = 'DatabaseName' in params ? params.DatabaseName : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.UserId = 'UserId' in params ? params.UserId : null;

    }
}

/**
 * DeleteIntegrationTask request structure.
 * @class
 */
class DeleteIntegrationTaskRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * Comparison Result Item
 * @class
 */
class CompareResultItem extends  AbstractModel {
    constructor(){
        super();

        /**
         * Comparison Result, 1 is true, 2 is false
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.FixResult = null;

        /**
         * Quality SQL Execution Result
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ResultValue = null;

        /**
         * Threshold List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<ThresholdValue> || null}
         */
        this.Values = null;

        /**
         * Comparison Operation Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Operator = null;

        /**
         * Comparison Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.CompareType = null;

        /**
         * Value Comparison Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.ValueComputeType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.FixResult = 'FixResult' in params ? params.FixResult : null;
        this.ResultValue = 'ResultValue' in params ? params.ResultValue : null;

        if (params.Values) {
            this.Values = new Array();
            for (let z in params.Values) {
                let obj = new ThresholdValue();
                obj.deserialize(params.Values[z]);
                this.Values.push(obj);
            }
        }
        this.Operator = 'Operator' in params ? params.Operator : null;
        this.CompareType = 'CompareType' in params ? params.CompareType : null;
        this.ValueComputeType = 'ValueComputeType' in params ? params.ValueComputeType : null;

    }
}

/**
 * ModifyTaskScript request structure.
 * @class
 */
class ModifyTaskScriptRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Script content Base64 encoded
         * @type {string || null}
         */
        this.ScriptContent = null;

        /**
         * Integrated Task Script Configuration
         * @type {Array.<IntegrationNodeDetail> || null}
         */
        this.IntegrationNodeDetails = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.ScriptContent = 'ScriptContent' in params ? params.ScriptContent : null;

        if (params.IntegrationNodeDetails) {
            this.IntegrationNodeDetails = new Array();
            for (let z in params.IntegrationNodeDetails) {
                let obj = new IntegrationNodeDetail();
                obj.deserialize(params.IntegrationNodeDetails[z]);
                this.IntegrationNodeDetails.push(obj);
            }
        }

    }
}

/**
 * CreateIntegrationNode request structure.
 * @class
 */
class CreateIntegrationNodeRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Integrated Node Information
         * @type {IntegrationNodeInfo || null}
         */
        this.NodeInfo = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Task Type, 201 for real-time tasks, 202 for offline tasks
         * @type {number || null}
         */
        this.TaskType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.NodeInfo) {
            let obj = new IntegrationNodeInfo();
            obj.deserialize(params.NodeInfo)
            this.NodeInfo = obj;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.TaskType = 'TaskType' in params ? params.TaskType : null;

    }
}

/**
 * DescribeTableSchemaInfo request structure.
 * @class
 */
class DescribeTableSchemaInfoRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Table Name
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Database name
         * @type {string || null}
         */
        this.DatabaseName = null;

        /**
         * Data Source Types (e.g., MYSQL, HIVE, KAFKA, etc.)
         * @type {string || null}
         */
        this.MsType = null;

        /**
         * Data source ID
         * @type {string || null}
         */
        this.DatasourceId = null;

        /**
         * Connection Type (example value: rpc)
         * @type {string || null}
         */
        this.ConnectionType = null;

        /**
         * Schema Name under Metadata Database
         * @type {string || null}
         */
        this.SchemaName = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Name = 'Name' in params ? params.Name : null;
        this.DatabaseName = 'DatabaseName' in params ? params.DatabaseName : null;
        this.MsType = 'MsType' in params ? params.MsType : null;
        this.DatasourceId = 'DatasourceId' in params ? params.DatasourceId : null;
        this.ConnectionType = 'ConnectionType' in params ? params.ConnectionType : null;
        this.SchemaName = 'SchemaName' in params ? params.SchemaName : null;

    }
}

/**
 * DescribeTableScoreTrend request structure.
 * @class
 */
class DescribeTableScoreTrendRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Start time Second-level Timestamp
         * @type {number || null}
         */
        this.StatisticsStartDate = null;

        /**
         * End time Second-level Timestamp
         * @type {number || null}
         */
        this.StatisticsEndDate = null;

        /**
         * Table ID
         * @type {string || null}
         */
        this.TableId = null;

        /**
         * 1: Calculate by full dimension weight, 2: Calculate by configured dimension weight, 3: Do not calculate by dimension weight, default is 1
         * @type {string || null}
         */
        this.ScoreType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.StatisticsStartDate = 'StatisticsStartDate' in params ? params.StatisticsStartDate : null;
        this.StatisticsEndDate = 'StatisticsEndDate' in params ? params.StatisticsEndDate : null;
        this.TableId = 'TableId' in params ? params.TableId : null;
        this.ScoreType = 'ScoreType' in params ? params.ScoreType : null;

    }
}

/**
 * Rule Execution Result Pagination
 * @class
 */
class RuleExecResultPage extends  AbstractModel {
    constructor(){
        super();

        /**
         * Record Count
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * Rule Execution Result
         * @type {Array.<RuleExecResult> || null}
         */
        this.Items = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;

        if (params.Items) {
            this.Items = new Array();
            for (let z in params.Items) {
                let obj = new RuleExecResult();
                obj.deserialize(params.Items[z]);
                this.Items.push(obj);
            }
        }

    }
}

/**
 * DescribeTaskByStatusReport request structure.
 * @class
 */
class DescribeTaskByStatusReportRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Time Type
         * @type {string || null}
         */
        this.Type = null;

        /**
         * Type
         * @type {string || null}
         */
        this.TaskType = null;

        /**
         * Type Name
         * @type {string || null}
         */
        this.TypeName = null;

        /**
         * Start Time
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * End time
         * @type {string || null}
         */
        this.EndTime = null;

        /**
         * Aggregation Unit, H Hours
         * @type {string || null}
         */
        this.AggregationUnit = null;

        /**
         * Cycle
         * @type {string || null}
         */
        this.CycleUnit = null;

        /**
         * Status
         * @type {string || null}
         */
        this.Status = null;

        /**
         * Person in Charge
         * @type {string || null}
         */
        this.InCharge = null;

        /**
         * Workflow ID
         * @type {string || null}
         */
        this.WorkflowId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.Type = 'Type' in params ? params.Type : null;
        this.TaskType = 'TaskType' in params ? params.TaskType : null;
        this.TypeName = 'TypeName' in params ? params.TypeName : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;
        this.AggregationUnit = 'AggregationUnit' in params ? params.AggregationUnit : null;
        this.CycleUnit = 'CycleUnit' in params ? params.CycleUnit : null;
        this.Status = 'Status' in params ? params.Status : null;
        this.InCharge = 'InCharge' in params ? params.InCharge : null;
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;

    }
}

/**
 * ModifyExecStrategy request structure.
 * @class
 */
class ModifyExecStrategyRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Rule Group ID
         * @type {number || null}
         */
        this.RuleGroupId = null;

        /**
         * Monitoring Type 1. Not Configured, 2. Associated Production Scheduling, 3. Offline Cycle Detection
         * @type {number || null}
         */
        this.MonitorType = null;

        /**
         * Compute Queue
         * @type {string || null}
         */
        this.ExecQueue = null;

        /**
         * Execution Resource Group ID
         * @type {string || null}
         */
        this.ExecutorGroupId = null;

        /**
         * Execution Resource Group Name
         * @type {string || null}
         */
        this.ExecutorGroupName = null;

        /**
         * Associated Production Scheduling Task List
         * @type {Array.<ProdSchedulerTask> || null}
         */
        this.Tasks = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Offline Cycle Mode, Effective Date - Start Time
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * Offline Cycle Mode, Effective Date - End Time
         * @type {string || null}
         */
        this.EndTime = null;

        /**
         * Offline Cycle Mode, Scheduling Period 
MINUTE_CYCLE:I,
HOUR_CYCLE:H,
DAY_CYCLE:D,
WEEK_CYCLE:W,
MONTH_CYCLE:M
         * @type {string || null}
         */
        this.CycleType = null;

        /**
         * Offline Cycle Mode, Scheduling Step
         * @type {number || null}
         */
        this.CycleStep = null;

        /**
         * Offline Cycle Mode, Specified Time
         * @type {string || null}
         */
        this.TaskAction = null;

        /**
         * Delayed Execution Time, Unit: Minute, Optional: <0-1439
         * @type {number || null}
         */
        this.DelayTime = null;

        /**
         * Database ID
         * @type {string || null}
         */
        this.DatabaseId = null;

        /**
         * Data Source ID
         * @type {string || null}
         */
        this.DatasourceId = null;

        /**
         * Data Table ID
         * @type {string || null}
         */
        this.TableId = null;

        /**
         * Running Execution Engine, Requests Default Execution Engine of the Data Source if Not Specified
         * @type {string || null}
         */
        this.ExecEngineType = null;

        /**
         * Trigger scenario
         * @type {Array.<string> || null}
         */
        this.TriggerTypes = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.RuleGroupId = 'RuleGroupId' in params ? params.RuleGroupId : null;
        this.MonitorType = 'MonitorType' in params ? params.MonitorType : null;
        this.ExecQueue = 'ExecQueue' in params ? params.ExecQueue : null;
        this.ExecutorGroupId = 'ExecutorGroupId' in params ? params.ExecutorGroupId : null;
        this.ExecutorGroupName = 'ExecutorGroupName' in params ? params.ExecutorGroupName : null;

        if (params.Tasks) {
            this.Tasks = new Array();
            for (let z in params.Tasks) {
                let obj = new ProdSchedulerTask();
                obj.deserialize(params.Tasks[z]);
                this.Tasks.push(obj);
            }
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;
        this.CycleType = 'CycleType' in params ? params.CycleType : null;
        this.CycleStep = 'CycleStep' in params ? params.CycleStep : null;
        this.TaskAction = 'TaskAction' in params ? params.TaskAction : null;
        this.DelayTime = 'DelayTime' in params ? params.DelayTime : null;
        this.DatabaseId = 'DatabaseId' in params ? params.DatabaseId : null;
        this.DatasourceId = 'DatasourceId' in params ? params.DatasourceId : null;
        this.TableId = 'TableId' in params ? params.TableId : null;
        this.ExecEngineType = 'ExecEngineType' in params ? params.ExecEngineType : null;
        this.TriggerTypes = 'TriggerTypes' in params ? params.TriggerTypes : null;

    }
}

/**
 * BatchForceSuccessIntegrationTaskInstances request structure.
 * @class
 */
class BatchForceSuccessIntegrationTaskInstancesRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Instance Information
         * @type {Array.<SchedulerTaskInstanceInfo> || null}
         */
        this.Instances = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Instances) {
            this.Instances = new Array();
            for (let z in params.Instances) {
                let obj = new SchedulerTaskInstanceInfo();
                obj.deserialize(params.Instances[z]);
                this.Instances.push(obj);
            }
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * DescribeRealTimeTaskInstanceNodeInfo response structure.
 * @class
 */
class DescribeRealTimeTaskInstanceNodeInfoResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Real-time task instance node related information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {RealTimeTaskInstanceNodeInfo || null}
         */
        this.RealTimeTaskInstanceNodeInfo = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.RealTimeTaskInstanceNodeInfo) {
            let obj = new RealTimeTaskInstanceNodeInfo();
            obj.deserialize(params.RealTimeTaskInstanceNodeInfo)
            this.RealTimeTaskInstanceNodeInfo = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeTaskByCycleReport request structure.
 * @class
 */
class DescribeTaskByCycleReportRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Task Cycle Type
         * @type {string || null}
         */
        this.Type = null;

        /**
         * Start Time
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * End time
         * @type {string || null}
         */
        this.EndTime = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.Type = 'Type' in params ? params.Type : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;

    }
}

/**
 * DescribeInstanceLogDetail response structure.
 * @class
 */
class DescribeInstanceLogDetailResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Log results
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {InstanceLogInfoOpsDto || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new InstanceLogInfoOpsDto();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeApproveList request structure.
 * @class
 */
class DescribeApproveListRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Approval Category Key
         * @type {string || null}
         */
        this.ApproveClassification = null;

        /**
         * Page size
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Pagination Number
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Custom Definition condition query
         * @type {Array.<FilterOptional> || null}
         */
        this.Filters = null;

        /**
         * Sort Fields
         * @type {Array.<OrderFieldOptional> || null}
         */
        this.OrderFields = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ApproveClassification = 'ApproveClassification' in params ? params.ApproveClassification : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;

        if (params.Filters) {
            this.Filters = new Array();
            for (let z in params.Filters) {
                let obj = new FilterOptional();
                obj.deserialize(params.Filters[z]);
                this.Filters.push(obj);
            }
        }

        if (params.OrderFields) {
            this.OrderFields = new Array();
            for (let z in params.OrderFields) {
                let obj = new OrderFieldOptional();
                obj.deserialize(params.OrderFields[z]);
                this.OrderFields.push(obj);
            }
        }

    }
}

/**
 * DescribeBatchOperateTask request structure.
 * @class
 */
class DescribeBatchOperateTaskRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Page Number
         * @type {string || null}
         */
        this.Page = null;

        /**
         * Page Number
         * @type {string || null}
         */
        this.Size = null;

        /**
         * Status ListDraft: 'NS','N','P','R'
Running: 'Y'
Stopped: 'F'
Frozen: 'O'
Stopping: 'T'
         * @type {Array.<string> || null}
         */
        this.StatusList = null;

        /**
         * List of Responsible Persons
         * @type {Array.<string> || null}
         */
        this.OwnerNameList = null;

        /**
         * Workflow List
         * @type {Array.<string> || null}
         */
        this.WorkflowIdList = null;

        /**
         * Task Name Search
         * @type {string || null}
         */
        this.TaskNameFilter = null;

        /**
         * Task Type List
         * @type {Array.<string> || null}
         */
        this.TaskTypeList = null;

        /**
         * Folder List
         * @type {Array.<string> || null}
         */
        this.FordIdList = null;

        /**
         * Task ID Search
         * @type {string || null}
         */
        this.TaskIdFilter = null;

        /**
         * Responsible Person Search
         * @type {string || null}
         */
        this.OwnerNameFilter = null;

        /**
         * Sort Fields:
UpdateTime
CreateTime
         * @type {string || null}
         */
        this.SortItem = null;

        /**
         * asc: Ascending
desc: Descending
         * @type {string || null}
         */
        this.SortType = null;

        /**
         * Engine Type List: Three Types
SparkJob
SparkSql
presto
         * @type {Array.<string> || null}
         */
        this.DataEngineList = null;

        /**
         * Operator Name
         * @type {string || null}
         */
        this.UserId = null;

        /**
         * 1
         * @type {string || null}
         */
        this.OwnerId = null;

        /**
         * 1
         * @type {string || null}
         */
        this.TenantId = null;

        /**
         * Data Source ID List
         * @type {Array.<string> || null}
         */
        this.DatasourceIdList = null;

        /**
         * Data Source Type List
         * @type {Array.<string> || null}
         */
        this.DatasourceTypeList = null;

        /**
         * Scheduling Unit Type List
         * @type {Array.<string> || null}
         */
        this.CycleUnitList = null;

        /**
         * Filter out tasks that can be submitted?
         * @type {boolean || null}
         */
        this.CanSubmit = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.Page = 'Page' in params ? params.Page : null;
        this.Size = 'Size' in params ? params.Size : null;
        this.StatusList = 'StatusList' in params ? params.StatusList : null;
        this.OwnerNameList = 'OwnerNameList' in params ? params.OwnerNameList : null;
        this.WorkflowIdList = 'WorkflowIdList' in params ? params.WorkflowIdList : null;
        this.TaskNameFilter = 'TaskNameFilter' in params ? params.TaskNameFilter : null;
        this.TaskTypeList = 'TaskTypeList' in params ? params.TaskTypeList : null;
        this.FordIdList = 'FordIdList' in params ? params.FordIdList : null;
        this.TaskIdFilter = 'TaskIdFilter' in params ? params.TaskIdFilter : null;
        this.OwnerNameFilter = 'OwnerNameFilter' in params ? params.OwnerNameFilter : null;
        this.SortItem = 'SortItem' in params ? params.SortItem : null;
        this.SortType = 'SortType' in params ? params.SortType : null;
        this.DataEngineList = 'DataEngineList' in params ? params.DataEngineList : null;
        this.UserId = 'UserId' in params ? params.UserId : null;
        this.OwnerId = 'OwnerId' in params ? params.OwnerId : null;
        this.TenantId = 'TenantId' in params ? params.TenantId : null;
        this.DatasourceIdList = 'DatasourceIdList' in params ? params.DatasourceIdList : null;
        this.DatasourceTypeList = 'DatasourceTypeList' in params ? params.DatasourceTypeList : null;
        this.CycleUnitList = 'CycleUnitList' in params ? params.CycleUnitList : null;
        this.CanSubmit = 'CanSubmit' in params ? params.CanSubmit : null;

    }
}

/**
 * StartIntegrationTask response structure.
 * @class
 */
class StartIntegrationTaskResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Operation Success or Failure Indicator
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * CommitRuleGroupTask response structure.
 * @class
 */
class CommitRuleGroupTaskResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Rule Group Execution ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {RuleGroupExecResult || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new RuleGroupExecResult();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Project Information
 * @class
 */
class Project extends  AbstractModel {
    constructor(){
        super();

        /**
         * Tenant ID of the project
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TenantId = null;

        /**
         * Project IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Project Identifier, English Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectName = null;

        /**
         * Project Display Name, can be Chinese Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DisplayName = null;

        /**
         * RegionNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Region = null;

        /**
         * RemarksNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Description = null;

        /**
         * Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreateTime = null;

        /**
         * Creator
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {BaseUser || null}
         */
        this.Creator = null;

        /**
         * Tenant Information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {BaseTenant || null}
         */
        this.Tenant = null;

        /**
         * Project Administrator
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<BaseUser> || null}
         */
        this.AdminUsers = null;

        /**
         * Project-related cluster information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<BaseClusterInfo> || null}
         */
        this.Clusters = null;

        /**
         * Additional configuration parameters for the project
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Params = null;

        /**
         * Project Status: 0: disabled, 1: enabled, -3: disabling, 2: enabling
         * @type {number || null}
         */
        this.Status = null;

        /**
         * Project Type, SIMPLE: simple mode STANDARD: standard mode
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Model = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TenantId = 'TenantId' in params ? params.TenantId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.ProjectName = 'ProjectName' in params ? params.ProjectName : null;
        this.DisplayName = 'DisplayName' in params ? params.DisplayName : null;
        this.Region = 'Region' in params ? params.Region : null;
        this.Description = 'Description' in params ? params.Description : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;

        if (params.Creator) {
            let obj = new BaseUser();
            obj.deserialize(params.Creator)
            this.Creator = obj;
        }

        if (params.Tenant) {
            let obj = new BaseTenant();
            obj.deserialize(params.Tenant)
            this.Tenant = obj;
        }

        if (params.AdminUsers) {
            this.AdminUsers = new Array();
            for (let z in params.AdminUsers) {
                let obj = new BaseUser();
                obj.deserialize(params.AdminUsers[z]);
                this.AdminUsers.push(obj);
            }
        }

        if (params.Clusters) {
            this.Clusters = new Array();
            for (let z in params.Clusters) {
                let obj = new BaseClusterInfo();
                obj.deserialize(params.Clusters[z]);
                this.Clusters.push(obj);
            }
        }
        this.Params = 'Params' in params ? params.Params : null;
        this.Status = 'Status' in params ? params.Status : null;
        this.Model = 'Model' in params ? params.Model : null;

    }
}

/**
 * DescribeRealTimeTaskMetricOverview response structure.
 * @class
 */
class DescribeRealTimeTaskMetricOverviewResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Total Read Records
         * @type {number || null}
         */
        this.TotalRecordNumOfRead = null;

        /**
         * Total Read Bytes
         * @type {number || null}
         */
        this.TotalRecordByteNumOfRead = null;

        /**
         * Total Write Records
         * @type {number || null}
         */
        this.TotalRecordNumOfWrite = null;

        /**
         * Total Write Bytes Unit: bytes
         * @type {number || null}
         */
        this.TotalRecordByteNumOfWrite = null;

        /**
         * Total Dirty Record Data
         * @type {number || null}
         */
        this.TotalDirtyRecordNum = null;

        /**
         * Total Dirty Bytes Unit: bytes
         * @type {number || null}
         */
        this.TotalDirtyRecordByte = null;

        /**
         * Execution Duration Unit: s
         * @type {number || null}
         */
        this.TotalDuration = null;

        /**
         * Start Running Time
         * @type {string || null}
         */
        this.BeginRunTime = null;

        /**
         * Current Running Time
         * @type {string || null}
         */
        this.EndRunTime = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TotalRecordNumOfRead = 'TotalRecordNumOfRead' in params ? params.TotalRecordNumOfRead : null;
        this.TotalRecordByteNumOfRead = 'TotalRecordByteNumOfRead' in params ? params.TotalRecordByteNumOfRead : null;
        this.TotalRecordNumOfWrite = 'TotalRecordNumOfWrite' in params ? params.TotalRecordNumOfWrite : null;
        this.TotalRecordByteNumOfWrite = 'TotalRecordByteNumOfWrite' in params ? params.TotalRecordByteNumOfWrite : null;
        this.TotalDirtyRecordNum = 'TotalDirtyRecordNum' in params ? params.TotalDirtyRecordNum : null;
        this.TotalDirtyRecordByte = 'TotalDirtyRecordByte' in params ? params.TotalDirtyRecordByte : null;
        this.TotalDuration = 'TotalDuration' in params ? params.TotalDuration : null;
        this.BeginRunTime = 'BeginRunTime' in params ? params.BeginRunTime : null;
        this.EndRunTime = 'EndRunTime' in params ? params.EndRunTime : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeOfflineTaskToken response structure.
 * @class
 */
class DescribeOfflineTaskTokenResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Long Connection Temporary Token
         * @type {string || null}
         */
        this.Token = null;

        /**
         * Long Connection Temporary Token. Same meaning as Token, prioritize Data, if Data is null, then use Token.
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Token = 'Token' in params ? params.Token : null;
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeTableInfoList response structure.
 * @class
 */
class DescribeTableInfoListResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Table informationNote: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<TableInfo> || null}
         */
        this.TableInfo = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.TableInfo) {
            this.TableInfo = new Array();
            for (let z in params.TableInfo) {
                let obj = new TableInfo();
                obj.deserialize(params.TableInfo[z]);
                this.TableInfo.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * RemoveWorkflowDs response structure.
 * @class
 */
class RemoveWorkflowDsResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Whether deletion was successful
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * GetOfflineDIInstanceList request structure.
 * @class
 */
class GetOfflineDIInstanceListRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Which Page
         * @type {number || null}
         */
        this.PageIndex = null;

        /**
         * Number of Items per Page
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * No
         * @type {SearchConditionNew || null}
         */
        this.SearchCondition = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.PageIndex = 'PageIndex' in params ? params.PageIndex : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

        if (params.SearchCondition) {
            let obj = new SearchConditionNew();
            obj.deserialize(params.SearchCondition)
            this.SearchCondition = obj;
        }

    }
}

/**
 * ModifyExecStrategy response structure.
 * @class
 */
class ModifyExecStrategyResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Rule Group IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * BatchStartIntegrationTasks request structure.
 * @class
 */
class BatchStartIntegrationTasksRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task Type, 201 for real-time tasks, 202 for offline tasks
         * @type {number || null}
         */
        this.TaskType = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Task ID
         * @type {Array.<string> || null}
         */
        this.TaskIds = null;

        /**
         * Batch run integration tasks, currently only used in real-time integration
         * @type {Array.<StartTaskInfo> || null}
         */
        this.StartTaskInfoSet = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskType = 'TaskType' in params ? params.TaskType : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.TaskIds = 'TaskIds' in params ? params.TaskIds : null;

        if (params.StartTaskInfoSet) {
            this.StartTaskInfoSet = new Array();
            for (let z in params.StartTaskInfoSet) {
                let obj = new StartTaskInfo();
                obj.deserialize(params.StartTaskInfoSet[z]);
                this.StartTaskInfoSet.push(obj);
            }
        }

    }
}

/**
 * CreateCustomFunction request structure.
 * @class
 */
class CreateCustomFunctionRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Enumerated values: HIVE, SPARK, DLC
         * @type {string || null}
         */
        this.Type = null;

        /**
         * Enumerated values: ANALYSIS (function), ENCRYPTION (encryption function), AGGREGATE (aggregate function), LOGIC (logic function), DATE_AND_TIME (date and time function), MATH (math function), CONVERSION (conversion function), STRING (string function), IP_AND_DOMAIN (IP and domain function), WINDOW (window function), OTHER (other function)
         * @type {string || null}
         */
        this.Kind = null;

        /**
         * Function Name
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Cluster Instance Engine ID
         * @type {string || null}
         */
        this.ClusterIdentifier = null;

        /**
         * Database name
         * @type {string || null}
         */
        this.DbName = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Type = 'Type' in params ? params.Type : null;
        this.Kind = 'Kind' in params ? params.Kind : null;
        this.Name = 'Name' in params ? params.Name : null;
        this.ClusterIdentifier = 'ClusterIdentifier' in params ? params.ClusterIdentifier : null;
        this.DbName = 'DbName' in params ? params.DbName : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * DescribeTableBasicInfo request structure.
 * @class
 */
class DescribeTableBasicInfoRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Page number
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Page size
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Filter field
         * @type {Array.<Filter> || null}
         */
        this.Filters = null;

        /**
         * Sort Fields
         * @type {Array.<OrderField> || null}
         */
        this.OrderFields = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;

        if (params.Filters) {
            this.Filters = new Array();
            for (let z in params.Filters) {
                let obj = new Filter();
                obj.deserialize(params.Filters[z]);
                this.Filters.push(obj);
            }
        }

        if (params.OrderFields) {
            this.OrderFields = new Array();
            for (let z in params.OrderFields) {
                let obj = new OrderField();
                obj.deserialize(params.OrderFields[z]);
                this.OrderFields.push(obj);
            }
        }

    }
}

/**
 * DescribeDatasource request structure.
 * @class
 */
class DescribeDatasourceRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Unique Object ID
         * @type {number || null}
         */
        this.Id = null;

        /**
         * production: production, development: development
         * @type {string || null}
         */
        this.Env = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Id = 'Id' in params ? params.Id : null;
        this.Env = 'Env' in params ? params.Env : null;

    }
}

/**
 * Rule Execution Result
 * @class
 */
class RuleExecStat extends  AbstractModel {
    constructor(){
        super();

        /**
         * Total Rule Executions
         * @type {number || null}
         */
        this.TotalCnt = null;

        /**
         * Quarter-over-quarter total rule executions
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.LastTotalCnt = null;

        /**
         * Percentage of total rule executions
         * @type {number || null}
         */
        this.TotalCntRatio = null;

        /**
         * Quarter-over-quarter change in total rule executions
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.LastTotalCntRatio = null;

        /**
         * Number of rule triggers
         * @type {number || null}
         */
        this.TriggerCnt = null;

        /**
         * Quarter-over-quarter number of rule triggers
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.LastTriggerCnt = null;

        /**
         * Percentage of triggers in total
         * @type {number || null}
         */
        this.TriggerCntRatio = null;

        /**
         * Quarter-over-quarter change in rule triggers
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.LastTriggerCntRatio = null;

        /**
         * Number of rule alerts
         * @type {number || null}
         */
        this.AlarmCnt = null;

        /**
         * Quarter-over-quarter number of rule alerts
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.LastAlarmCnt = null;

        /**
         * Percentage of alerts in total
         * @type {number || null}
         */
        this.AlarmCntRatio = null;

        /**
         * Quarter-over-quarter change in alert numbers
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.LastAlarmCntRatio = null;

        /**
         * Number of block occurrences
         * @type {number || null}
         */
        this.PipelineCnt = null;

        /**
         * Quarter-over-quarter number of block occurrences
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.LastPipelineCnt = null;

        /**
         * Percentage of blocks in total
         * @type {number || null}
         */
        this.PipelineCntRatio = null;

        /**
         * Quarter-over-quarter change in block occurrences
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.LastPipelineCntRatio = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TotalCnt = 'TotalCnt' in params ? params.TotalCnt : null;
        this.LastTotalCnt = 'LastTotalCnt' in params ? params.LastTotalCnt : null;
        this.TotalCntRatio = 'TotalCntRatio' in params ? params.TotalCntRatio : null;
        this.LastTotalCntRatio = 'LastTotalCntRatio' in params ? params.LastTotalCntRatio : null;
        this.TriggerCnt = 'TriggerCnt' in params ? params.TriggerCnt : null;
        this.LastTriggerCnt = 'LastTriggerCnt' in params ? params.LastTriggerCnt : null;
        this.TriggerCntRatio = 'TriggerCntRatio' in params ? params.TriggerCntRatio : null;
        this.LastTriggerCntRatio = 'LastTriggerCntRatio' in params ? params.LastTriggerCntRatio : null;
        this.AlarmCnt = 'AlarmCnt' in params ? params.AlarmCnt : null;
        this.LastAlarmCnt = 'LastAlarmCnt' in params ? params.LastAlarmCnt : null;
        this.AlarmCntRatio = 'AlarmCntRatio' in params ? params.AlarmCntRatio : null;
        this.LastAlarmCntRatio = 'LastAlarmCntRatio' in params ? params.LastAlarmCntRatio : null;
        this.PipelineCnt = 'PipelineCnt' in params ? params.PipelineCnt : null;
        this.LastPipelineCnt = 'LastPipelineCnt' in params ? params.LastPipelineCnt : null;
        this.PipelineCntRatio = 'PipelineCntRatio' in params ? params.PipelineCntRatio : null;
        this.LastPipelineCntRatio = 'LastPipelineCntRatio' in params ? params.LastPipelineCntRatio : null;

    }
}

/**
 * Batch operation result return
 * @class
 */
class BatchOperationOpsDto extends  AbstractModel {
    constructor(){
        super();

        /**
         * Number of successful batch operations
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.SuccessCount = null;

        /**
         * Number of failed batch operations
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.FailedCount = null;

        /**
         * Total number of batch operations
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalCount = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.SuccessCount = 'SuccessCount' in params ? params.SuccessCount : null;
        this.FailedCount = 'FailedCount' in params ? params.FailedCount : null;
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;

    }
}

/**
 * DescribeEventCases response structure.
 * @class
 */
class DescribeEventCasesResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Event Instance Pagination Query Results
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {EventCaseAuditLogVOCollection || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new EventCaseAuditLogVOCollection();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeTableSchemaInfo response structure.
 * @class
 */
class DescribeTableSchemaInfoResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Retrieved SchemaInfo Information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<SchemaDetail> || null}
         */
        this.SchemaInfoList = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.SchemaInfoList) {
            this.SchemaInfoList = new Array();
            for (let z in params.SchemaInfoList) {
                let obj = new SchemaDetail();
                obj.deserialize(params.SchemaInfoList[z]);
                this.SchemaInfoList.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DiagnosePro response structure.
 * @class
 */
class DiagnoseProResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Result
         * @type {DiagnoseRep || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new DiagnoseRep();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeReportTaskDetail response structure.
 * @class
 */
class DescribeReportTaskDetailResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * 1
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {ReportTaskDetail || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new ReportTaskDetail();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * UpdateWorkflowOwner response structure.
 * @class
 */
class UpdateWorkflowOwnerResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Response Data
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {BatchOperationOpsDto || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new BatchOperationOpsDto();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * SetTaskAlarmNew request structure.
 * @class
 */
class SetTaskAlarmNewRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Setting Task Timeout Alert and Failure Alert Information
         * @type {Array.<AlarmInfo> || null}
         */
        this.AlarmInfoList = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.AlarmInfoList) {
            this.AlarmInfoList = new Array();
            for (let z in params.AlarmInfoList) {
                let obj = new AlarmInfo();
                obj.deserialize(params.AlarmInfoList[z]);
                this.AlarmInfoList.push(obj);
            }
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * DescribeInstanceList response structure.
 * @class
 */
class DescribeInstanceListResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Result
         * @type {string || null}
         */
        this.Data = null;

        /**
         * Instance ListNote: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<InstanceList> || null}
         */
        this.InstanceList = null;

        /**
         * Total number of itemsNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;

        if (params.InstanceList) {
            this.InstanceList = new Array();
            for (let z in params.InstanceList) {
                let obj = new InstanceList();
                obj.deserialize(params.InstanceList[z]);
                this.InstanceList.push(obj);
            }
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeOpsInstanceLogList request structure.
 * @class
 */
class DescribeOpsInstanceLogListRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Data Timestamp
         * @type {string || null}
         */
        this.CurRunDate = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.CurRunDate = 'CurRunDate' in params ? params.CurRunDate : null;

    }
}

/**
 * UploadContent request structure.
 * @class
 */
class UploadContentRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Script Upload Information
         * @type {ScriptRequestInfo || null}
         */
        this.ScriptRequestInfo = null;

        /**
         * Request Source, WEB frontend; CLIENT client
         * @type {string || null}
         */
        this.RequestFromSource = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.ScriptRequestInfo) {
            let obj = new ScriptRequestInfo();
            obj.deserialize(params.ScriptRequestInfo)
            this.ScriptRequestInfo = obj;
        }
        this.RequestFromSource = 'RequestFromSource' in params ? params.RequestFromSource : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * StartIntegrationTask request structure.
 * @class
 */
class StartIntegrationTaskRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Event type (START, STOP, SUSPEND, RESUME, COMMIT, TIMESTAMP)
         * @type {string || null}
         */
        this.Event = null;

        /**
         * Additional parameters
         * @type {Array.<RecordField> || null}
         */
        this.ExtConfig = null;

        /**
         * Operation Type Description
         * @type {string || null}
         */
        this.EventDesc = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.Event = 'Event' in params ? params.Event : null;

        if (params.ExtConfig) {
            this.ExtConfig = new Array();
            for (let z in params.ExtConfig) {
                let obj = new RecordField();
                obj.deserialize(params.ExtConfig[z]);
                this.ExtConfig.push(obj);
            }
        }
        this.EventDesc = 'EventDesc' in params ? params.EventDesc : null;

    }
}

/**
 * DescribeProject response structure.
 * @class
 */
class DescribeProjectResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project Information
         * @type {Project || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new Project();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * StopIntegrationTask request structure.
 * @class
 */
class StopIntegrationTaskRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * Function Type or Function Classification
 * @class
 */
class FunctionTypeOrKind extends  AbstractModel {
    constructor(){
        super();

        /**
         * Name
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Function Classification English Name
         * @type {string || null}
         */
        this.ZhName = null;

        /**
         * Function Classification Chinese Name
         * @type {string || null}
         */
        this.EnName = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Name = 'Name' in params ? params.Name : null;
        this.ZhName = 'ZhName' in params ? params.ZhName : null;
        this.EnName = 'EnName' in params ? params.EnName : null;

    }
}

/**
 * Application List
 * @class
 */
class DescribeApply extends  AbstractModel {
    constructor(){
        super();

        /**
         * Application List Details
         * @type {Array.<Apply> || null}
         */
        this.Rows = null;

        /**
         * Total Pagination Pages
         * @type {number || null}
         */
        this.TotalPageNumber = null;

        /**
         * Total Count
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * Page number
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Page size
         * @type {number || null}
         */
        this.PageSize = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Rows) {
            this.Rows = new Array();
            for (let z in params.Rows) {
                let obj = new Apply();
                obj.deserialize(params.Rows[z]);
                this.Rows.push(obj);
            }
        }
        this.TotalPageNumber = 'TotalPageNumber' in params ? params.TotalPageNumber : null;
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;

    }
}

/**
 * CreateDataSource response structure.
 * @class
 */
class CreateDataSourceResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Primary Key ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Status Trend Statistics
 * @class
 */
class TaskByStatus extends  AbstractModel {
    constructor(){
        super();

        /**
         * Statistical Value
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CountGroup = null;

        /**
         * DateNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ShowTimeGroup = null;

        /**
         * StatusNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Status = null;

        /**
         * Cycle Unit
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CycleUnit = null;

        /**
         * 1
         * @type {string || null}
         */
        this.ReportTime = null;

        /**
         * 1
         * @type {number || null}
         */
        this.Count = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.CountGroup = 'CountGroup' in params ? params.CountGroup : null;
        this.ShowTimeGroup = 'ShowTimeGroup' in params ? params.ShowTimeGroup : null;
        this.Status = 'Status' in params ? params.Status : null;
        this.CycleUnit = 'CycleUnit' in params ? params.CycleUnit : null;
        this.ReportTime = 'ReportTime' in params ? params.ReportTime : null;
        this.Count = 'Count' in params ? params.Count : null;

    }
}

/**
 * DescribeFolderWorkflowList response structure.
 * @class
 */
class DescribeFolderWorkflowListResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * NoNote: This field may return null, indicating that no valid value can be obtained.
         * @type {DescribeFolderWorkflowListData || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new DescribeFolderWorkflowListData();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Common Record Fields, agreed with the server to pass in legitimate key-value pairs
 * @class
 */
class RecordField extends  AbstractModel {
    constructor(){
        super();

        /**
         * Field Name, Extended Field Name
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Field Value, Extended Field Value
         * @type {string || null}
         */
        this.Value = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Name = 'Name' in params ? params.Name : null;
        this.Value = 'Value' in params ? params.Value : null;

    }
}

/**
 * DescribeIntegrationVersionNodesInfo response structure.
 * @class
 */
class DescribeIntegrationVersionNodesInfoResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task Node Information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<IntegrationNodeInfo> || null}
         */
        this.Nodes = null;

        /**
         * Task Mapping Information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<IntegrationNodeMapping> || null}
         */
        this.Mappings = null;

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Nodes) {
            this.Nodes = new Array();
            for (let z in params.Nodes) {
                let obj = new IntegrationNodeInfo();
                obj.deserialize(params.Nodes[z]);
                this.Nodes.push(obj);
            }
        }

        if (params.Mappings) {
            this.Mappings = new Array();
            for (let z in params.Mappings) {
                let obj = new IntegrationNodeMapping();
                obj.deserialize(params.Mappings[z]);
                this.Mappings.push(obj);
            }
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeRules request structure.
 * @class
 */
class DescribeRulesRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Rule Group ID
         * @type {number || null}
         */
        this.RuleGroupId = null;

        /**
         * The running execution engine, if not specified, the default execution engine under this data source will be requested
         * @type {string || null}
         */
        this.EngineType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.RuleGroupId = 'RuleGroupId' in params ? params.RuleGroupId : null;
        this.EngineType = 'EngineType' in params ? params.EngineType : null;

    }
}

/**
 * DescribeRule response structure.
 * @class
 */
class DescribeRuleResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Rule Details
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Rule || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new Rule();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeTaskScript request structure.
 * @class
 */
class DescribeTaskScriptRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.TaskId = 'TaskId' in params ? params.TaskId : null;

    }
}

/**
 * Metadata Field Information
 * @class
 */
class SchemaDetail extends  AbstractModel {
    constructor(){
        super();

        /**
         * Column
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ColumnKey = null;

        /**
         * DescriptionNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Description = null;

        /**
         * NameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Name = null;

        /**
         * TypeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Type = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ColumnKey = 'ColumnKey' in params ? params.ColumnKey : null;
        this.Description = 'Description' in params ? params.Description : null;
        this.Name = 'Name' in params ? params.Name : null;
        this.Type = 'Type' in params ? params.Type : null;

    }
}

/**
 * DescribeRule request structure.
 * @class
 */
class DescribeRuleRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Quality Rule ID
         * @type {number || null}
         */
        this.RuleId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.RuleId = 'RuleId' in params ? params.RuleId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * Batch Operation Result, with Failure Reason
 * @class
 */
class BatchOpsDTO extends  AbstractModel {
    constructor(){
        super();

        /**
         * Total Quantity
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * Success count
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.SuccessCount = null;

        /**
         * Failure count
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.FailCount = null;

        /**
         * Failure reason
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<FailMessage> || null}
         */
        this.FailMessageList = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.SuccessCount = 'SuccessCount' in params ? params.SuccessCount : null;
        this.FailCount = 'FailCount' in params ? params.FailCount : null;

        if (params.FailMessageList) {
            this.FailMessageList = new Array();
            for (let z in params.FailMessageList) {
                let obj = new FailMessage();
                obj.deserialize(params.FailMessageList[z]);
                this.FailMessageList.push(obj);
            }
        }

    }
}

/**
 * DescribeAlarmReceiver response structure.
 * @class
 */
class DescribeAlarmReceiverResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Alert Recipient List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<AlarmReceiverInfo> || null}
         */
        this.AlarmReceiverInfoList = null;

        /**
         * Number of records
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.AlarmReceiverInfoList) {
            this.AlarmReceiverInfoList = new Array();
            for (let z in params.AlarmReceiverInfoList) {
                let obj = new AlarmReceiverInfo();
                obj.deserialize(params.AlarmReceiverInfoList[z]);
                this.AlarmReceiverInfoList.push(obj);
            }
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeTableLineageInfo response structure.
 * @class
 */
class DescribeTableLineageInfoResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Table Lineage Information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {TableLineageBaseInfo || null}
         */
        this.TableLineageBasicInfo = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.TableLineageBasicInfo) {
            let obj = new TableLineageBaseInfo();
            obj.deserialize(params.TableLineageBasicInfo)
            this.TableLineageBasicInfo = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Snapshot Expiration Governance Item
 * @class
 */
class DlcExpiredSnapshotsInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Whether to enable snapshot expiration governance: enable, none
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ExpiredSnapshotsEnable = null;

        /**
         * Name of the engine used to run snapshot expiration governance
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Engine = null;

        /**
         * Number of recent snapshots to retain
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.RetainLast = null;

        /**
         * Snapshots expired before specified days
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.BeforeDays = null;

        /**
         * Number of parallel processes for cleaning up expired snapshots
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.MaxConcurrentDeletes = null;

        /**
         * Snapshot expiration governance run cycle, unit: minutes
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.IntervalMin = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ExpiredSnapshotsEnable = 'ExpiredSnapshotsEnable' in params ? params.ExpiredSnapshotsEnable : null;
        this.Engine = 'Engine' in params ? params.Engine : null;
        this.RetainLast = 'RetainLast' in params ? params.RetainLast : null;
        this.BeforeDays = 'BeforeDays' in params ? params.BeforeDays : null;
        this.MaxConcurrentDeletes = 'MaxConcurrentDeletes' in params ? params.MaxConcurrentDeletes : null;
        this.IntervalMin = 'IntervalMin' in params ? params.IntervalMin : null;

    }
}

/**
 * DescribeWorkflowCanvasInfo response structure.
 * @class
 */
class DescribeWorkflowCanvasInfoResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Workflow Scheduling Details
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {WorkflowCanvasOpsDto || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new WorkflowCanvasOpsDto();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Partition Parameter
 * @class
 */
class Partition extends  AbstractModel {
    constructor(){
        super();

        /**
         * Partition Conversion Strategy
         * @type {string || null}
         */
        this.Transform = null;

        /**
         * Partition Field Name
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Policy Parameter
         * @type {Array.<string> || null}
         */
        this.TransformArgs = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Transform = 'Transform' in params ? params.Transform : null;
        this.Name = 'Name' in params ? params.Name : null;
        this.TransformArgs = 'TransformArgs' in params ? params.TransformArgs : null;

    }
}

/**
 * RuleDimCnt Rule Dimension Statistics
 * @class
 */
class RuleDimCnt extends  AbstractModel {
    constructor(){
        super();

        /**
         * 1: Accuracy, 2: Uniqueness, 3: Integrity, 4: Consistency, 5: Timeliness, 6: Validity
         * @type {number || null}
         */
        this.Dim = null;

        /**
         * count Number
         * @type {number || null}
         */
        this.Cnt = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Dim = 'Dim' in params ? params.Dim : null;
        this.Cnt = 'Cnt' in params ? params.Cnt : null;

    }
}

/**
 * Batch operation result return
 * @class
 */
class BatchOperateResult extends  AbstractModel {
    constructor(){
        super();

        /**
         * Number of Batch Operations Succeeded
         * @type {number || null}
         */
        this.SuccessCount = null;

        /**
         * Number of Batch Operations Failed
         * @type {number || null}
         */
        this.FailedCount = null;

        /**
         * Total Number of Batch Operations
         * @type {number || null}
         */
        this.TotalCount = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.SuccessCount = 'SuccessCount' in params ? params.SuccessCount : null;
        this.FailedCount = 'FailedCount' in params ? params.FailedCount : null;
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;

    }
}

/**
 * ModifyTaskScript response structure.
 * @class
 */
class ModifyTaskScriptResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Details
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {CommonContent || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new CommonContent();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeDimensionScore request structure.
 * @class
 */
class DescribeDimensionScoreRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Statistics Date Timestamp
         * @type {number || null}
         */
        this.StatisticsDate = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Data source ID
         * @type {string || null}
         */
        this.DatasourceId = null;

        /**
         * Ignore Query String
         * @type {Array.<Filter> || null}
         */
        this.Filters = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.StatisticsDate = 'StatisticsDate' in params ? params.StatisticsDate : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.DatasourceId = 'DatasourceId' in params ? params.DatasourceId : null;

        if (params.Filters) {
            this.Filters = new Array();
            for (let z in params.Filters) {
                let obj = new Filter();
                obj.deserialize(params.Filters[z]);
                this.Filters.push(obj);
            }
        }

    }
}

/**
 * FindAllFolder request structure.
 * @class
 */
class FindAllFolderRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * Folder Attributes
 * @class
 */
class FolderDsDto extends  AbstractModel {
    constructor(){
        super();

        /**
         * Folder ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Id = null;

        /**
         * Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreateTime = null;

        /**
         * Folder NameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Project ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Update timeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.UpdateTime = null;

        /**
         * Parent Folder ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ParentsFolderId = null;

        /**
         * Total Workflows
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Total = null;

        /**
         * Workflow ListNote: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<WorkflowCanvasOpsDto> || null}
         */
        this.Workflows = null;

        /**
         * Total Subfolders
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalFolders = null;

        /**
         * Subfolder List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<FolderDsDto> || null}
         */
        this.Folders = null;

        /**
         * Search typeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FindType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Id = 'Id' in params ? params.Id : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;
        this.Name = 'Name' in params ? params.Name : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.UpdateTime = 'UpdateTime' in params ? params.UpdateTime : null;
        this.ParentsFolderId = 'ParentsFolderId' in params ? params.ParentsFolderId : null;
        this.Total = 'Total' in params ? params.Total : null;

        if (params.Workflows) {
            this.Workflows = new Array();
            for (let z in params.Workflows) {
                let obj = new WorkflowCanvasOpsDto();
                obj.deserialize(params.Workflows[z]);
                this.Workflows.push(obj);
            }
        }
        this.TotalFolders = 'TotalFolders' in params ? params.TotalFolders : null;

        if (params.Folders) {
            this.Folders = new Array();
            for (let z in params.Folders) {
                let obj = new FolderDsDto();
                obj.deserialize(params.Folders[z]);
                this.Folders.push(obj);
            }
        }
        this.FindType = 'FindType' in params ? params.FindType : null;

    }
}

/**
 * BatchStartIntegrationTasks response structure.
 * @class
 */
class BatchStartIntegrationTasksResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Number of Successfully Operated Tasks
         * @type {number || null}
         */
        this.SuccessCount = null;

        /**
         * Number of Failed Tasks
         * @type {number || null}
         */
        this.FailedCount = null;

        /**
         * Total Number of Tasks
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * Batch operation successful task IDs for audit
         * @type {Array.<string> || null}
         */
        this.TaskNames = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.SuccessCount = 'SuccessCount' in params ? params.SuccessCount : null;
        this.FailedCount = 'FailedCount' in params ? params.FailedCount : null;
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.TaskNames = 'TaskNames' in params ? params.TaskNames : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeIntegrationVersionNodesInfo request structure.
 * @class
 */
class DescribeIntegrationVersionNodesInfoRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * The selected version's storage path for the task:
The value of Base64.encode($region | $bucket | $ftp.file.name) under TaskInfo.TaskExt.Properties returned by DescribeDsTaskVersionList or DescribeDsTaskVersionInfo
         * @type {string || null}
         */
        this.TaskVersionPath = null;

        /**
         * The selected version ID for the task:
The value of VersionId returned by DescribeDsTaskVersionList or DescribeDsTaskVersionInfo
         * @type {string || null}
         */
        this.TaskVersion = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.TaskVersionPath = 'TaskVersionPath' in params ? params.TaskVersionPath : null;
        this.TaskVersion = 'TaskVersion' in params ? params.TaskVersion : null;

    }
}

/**
 * DescribeSuccessorOpsTaskInfos request structure.
 * @class
 */
class DescribeSuccessorOpsTaskInfosRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * DescribeSchedulerInstanceStatus request structure.
 * @class
 */
class DescribeSchedulerInstanceStatusRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Task Type ID
         * @type {string || null}
         */
        this.TaskTypeId = null;

        /**
         * Execution Resource Group ID
         * @type {string || null}
         */
        this.ExecutionGroupId = null;

        /**
         * Execution Resource Group Name
         * @type {string || null}
         */
        this.ExecutionGroupName = null;

        /**
         * Start Time
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * End time
         * @type {string || null}
         */
        this.EndTime = null;

        /**
         * Person in Charge
         * @type {string || null}
         */
        this.InCharge = null;

        /**
         * Workflow ID
         * @type {string || null}
         */
        this.WorkflowId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.TaskTypeId = 'TaskTypeId' in params ? params.TaskTypeId : null;
        this.ExecutionGroupId = 'ExecutionGroupId' in params ? params.ExecutionGroupId : null;
        this.ExecutionGroupName = 'ExecutionGroupName' in params ? params.ExecutionGroupName : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;
        this.InCharge = 'InCharge' in params ? params.InCharge : null;
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;

    }
}

/**
 * DescribeScheduleInstances request structure.
 * @class
 */
class DescribeScheduleInstancesRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Instance List
         * @type {Array.<InstanceOpsDto> || null}
         */
        this.Instances = null;

        /**
         * Check Parent Task Type, true: Check parent task; false: Do not check parent task
         * @type {boolean || null}
         */
        this.CheckFather = null;

        /**
         * Rerun Type, 1: Self; 3: Child; 2: Self and Child
         * @type {string || null}
         */
        this.RerunType = null;

        /**
         * Instance Dependency Mode, 1: Self-dependent; 2: Task-dependent; 3: Self and Parent-Child dependent
         * @type {string || null}
         */
        this.DependentWay = null;

        /**
         * Rerun Ignore Event Listening or Not
         * @type {boolean || null}
         */
        this.SkipEventListening = null;

        /**
         * Downstream Instance Range 1: Within the workflow 2: Within the project 3: Across all workflows dependent on the project
         * @type {string || null}
         */
        this.SonInstanceType = null;

        /**
         * Query conditions
         * @type {InstanceApiOpsRequest || null}
         */
        this.SearchCondition = null;

        /**
         * Access type
         * @type {string || null}
         */
        this.OptType = null;

        /**
         * Operator Name
         * @type {string || null}
         */
        this.OperatorName = null;

        /**
         * Operator ID
         * @type {string || null}
         */
        this.OperatorId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Project Identifier
         * @type {string || null}
         */
        this.ProjectIdent = null;

        /**
         * Project name
         * @type {string || null}
         */
        this.ProjectName = null;

        /**
         * Index Page Number
         * @type {number || null}
         */
        this.PageIndex = null;

        /**
         * Page size
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Total Data
         * @type {number || null}
         */
        this.Count = null;

        /**
         * Basic Request Information
         * @type {ProjectBaseInfoOpsRequest || null}
         */
        this.RequestBaseInfo = null;

        /**
         * Whether to Calculate Total
         * @type {boolean || null}
         */
        this.IsCount = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Instances) {
            this.Instances = new Array();
            for (let z in params.Instances) {
                let obj = new InstanceOpsDto();
                obj.deserialize(params.Instances[z]);
                this.Instances.push(obj);
            }
        }
        this.CheckFather = 'CheckFather' in params ? params.CheckFather : null;
        this.RerunType = 'RerunType' in params ? params.RerunType : null;
        this.DependentWay = 'DependentWay' in params ? params.DependentWay : null;
        this.SkipEventListening = 'SkipEventListening' in params ? params.SkipEventListening : null;
        this.SonInstanceType = 'SonInstanceType' in params ? params.SonInstanceType : null;

        if (params.SearchCondition) {
            let obj = new InstanceApiOpsRequest();
            obj.deserialize(params.SearchCondition)
            this.SearchCondition = obj;
        }
        this.OptType = 'OptType' in params ? params.OptType : null;
        this.OperatorName = 'OperatorName' in params ? params.OperatorName : null;
        this.OperatorId = 'OperatorId' in params ? params.OperatorId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.ProjectIdent = 'ProjectIdent' in params ? params.ProjectIdent : null;
        this.ProjectName = 'ProjectName' in params ? params.ProjectName : null;
        this.PageIndex = 'PageIndex' in params ? params.PageIndex : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;
        this.Count = 'Count' in params ? params.Count : null;

        if (params.RequestBaseInfo) {
            let obj = new ProjectBaseInfoOpsRequest();
            obj.deserialize(params.RequestBaseInfo)
            this.RequestBaseInfo = obj;
        }
        this.IsCount = 'IsCount' in params ? params.IsCount : null;

    }
}

/**
 * DescribeRealTimeTaskSpeed response structure.
 * @class
 */
class DescribeRealTimeTaskSpeedResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Synchronous Speed Bar/s List
         * @type {Array.<RecordsSpeed> || null}
         */
        this.RecordsSpeedList = null;

        /**
         * Synchronous Speed Bytes/s List
         * @type {Array.<BytesSpeed> || null}
         */
        this.BytesSpeedList = null;

        /**
         * Synchronous Speed, including RecordsSpeedList and BytesSpeedList
         * @type {RealTimeTaskSpeed || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.RecordsSpeedList) {
            this.RecordsSpeedList = new Array();
            for (let z in params.RecordsSpeedList) {
                let obj = new RecordsSpeed();
                obj.deserialize(params.RecordsSpeedList[z]);
                this.RecordsSpeedList.push(obj);
            }
        }

        if (params.BytesSpeedList) {
            this.BytesSpeedList = new Array();
            for (let z in params.BytesSpeedList) {
                let obj = new BytesSpeed();
                obj.deserialize(params.BytesSpeedList[z]);
                this.BytesSpeedList.push(obj);
            }
        }

        if (params.Data) {
            let obj = new RealTimeTaskSpeed();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * ModifyWorkflowInfo response structure.
 * @class
 */
class ModifyWorkflowInfoResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * true indicates success, false indicates failure
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeFolderWorkflowList request structure.
 * @class
 */
class DescribeFolderWorkflowListRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Parent Folder ID
         * @type {string || null}
         */
        this.ParentsFolderId = null;

        /**
         * Keyword
         * @type {string || null}
         */
        this.KeyWords = null;

        /**
         * Page number, default is 1
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Page size, default is 10
         * @type {number || null}
         */
        this.PageSize = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.ParentsFolderId = 'ParentsFolderId' in params ? params.ParentsFolderId : null;
        this.KeyWords = 'KeyWords' in params ? params.KeyWords : null;
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;

    }
}

/**
 * Rule Variable Replacement
 * @class
 */
class RuleFieldConfig extends  AbstractModel {
    constructor(){
        super();

        /**
         * Where Variable
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<FieldConfig> || null}
         */
        this.WhereConfig = null;

        /**
         * Database Table Variable
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<TableConfig> || null}
         */
        this.TableConfig = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.WhereConfig) {
            this.WhereConfig = new Array();
            for (let z in params.WhereConfig) {
                let obj = new FieldConfig();
                obj.deserialize(params.WhereConfig[z]);
                this.WhereConfig.push(obj);
            }
        }

        if (params.TableConfig) {
            this.TableConfig = new Array();
            for (let z in params.TableConfig) {
                let obj = new TableConfig();
                obj.deserialize(params.TableConfig[z]);
                this.TableConfig.push(obj);
            }
        }

    }
}

/**
 * CheckTaskNameExist response structure.
 * @class
 */
class CheckTaskNameExistResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Result
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeSchedulerRunTimeInstanceCntByStatus request structure.
 * @class
 */
class DescribeSchedulerRunTimeInstanceCntByStatusRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Cycle Type
         * @type {string || null}
         */
        this.CycleUnit = null;

        /**
         * Time Unit e.g.: 12h
         * @type {string || null}
         */
        this.TimeUnit = null;

        /**
         * Start Date: 2023-03-02
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * Before End Date: 2023-03-20
         * @type {string || null}
         */
        this.EndTime = null;

        /**
         * Task Type
         * @type {number || null}
         */
        this.TaskType = null;

        /**
         * Person in Charge
         * @type {string || null}
         */
        this.InCharge = null;

        /**
         * Workflow ID
         * @type {string || null}
         */
        this.WorkflowId = null;

        /**
         * Sort Fields
         * @type {string || null}
         */
        this.SortItem = null;

        /**
         * Ascending/Descending Order
         * @type {string || null}
         */
        this.SortType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.CycleUnit = 'CycleUnit' in params ? params.CycleUnit : null;
        this.TimeUnit = 'TimeUnit' in params ? params.TimeUnit : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;
        this.TaskType = 'TaskType' in params ? params.TaskType : null;
        this.InCharge = 'InCharge' in params ? params.InCharge : null;
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;
        this.SortItem = 'SortItem' in params ? params.SortItem : null;
        this.SortType = 'SortType' in params ? params.SortType : null;

    }
}

/**
 * map
 * @class
 */
class StrToStrMap extends  AbstractModel {
    constructor(){
        super();

        /**
         * k
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.K = null;

        /**
         * v
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.V = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.K = 'K' in params ? params.K : null;
        this.V = 'V' in params ? params.V : null;

    }
}

/**
 * Workflow Canvas Details
 * @class
 */
class WorkflowCanvasOpsDto extends  AbstractModel {
    constructor(){
        super();

        /**
         * Workflow IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.WorkflowId = null;

        /**
         * Workflow Detail Description
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.WorkflowDesc = null;

        /**
         * Workflow nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.WorkflowName = null;

        /**
         * Parent Folder IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FolderId = null;

        /**
         * Associated Folder IDs
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<string> || null}
         */
        this.FolderIds = null;

        /**
         * Task ListNote: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<TaskOpsDto> || null}
         */
        this.Tasks = null;

        /**
         * Task Dependency Edge List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<LinkOpsDto> || null}
         */
        this.Links = null;

        /**
         * Workflow User Group ID, if multiple, separated by semicolons: a;b;c
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.UserGroupId = null;

        /**
         * Workflow User Group Name, if multiple, separated by semicolons: a;b;c
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.UserGroupName = null;

        /**
         * Project IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Project IdentifierNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectIdent = null;

        /**
         * Project nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectName = null;

        /**
         * Person in ChargeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Owner = null;

        /**
         * Responsible User ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.OwnerId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;
        this.WorkflowDesc = 'WorkflowDesc' in params ? params.WorkflowDesc : null;
        this.WorkflowName = 'WorkflowName' in params ? params.WorkflowName : null;
        this.FolderId = 'FolderId' in params ? params.FolderId : null;
        this.FolderIds = 'FolderIds' in params ? params.FolderIds : null;

        if (params.Tasks) {
            this.Tasks = new Array();
            for (let z in params.Tasks) {
                let obj = new TaskOpsDto();
                obj.deserialize(params.Tasks[z]);
                this.Tasks.push(obj);
            }
        }

        if (params.Links) {
            this.Links = new Array();
            for (let z in params.Links) {
                let obj = new LinkOpsDto();
                obj.deserialize(params.Links[z]);
                this.Links.push(obj);
            }
        }
        this.UserGroupId = 'UserGroupId' in params ? params.UserGroupId : null;
        this.UserGroupName = 'UserGroupName' in params ? params.UserGroupName : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.ProjectIdent = 'ProjectIdent' in params ? params.ProjectIdent : null;
        this.ProjectName = 'ProjectName' in params ? params.ProjectName : null;
        this.Owner = 'Owner' in params ? params.Owner : null;
        this.OwnerId = 'OwnerId' in params ? params.OwnerId : null;

    }
}

/**
 * Remove Isolated Files Governance Item
 * @class
 */
class DlcRemoveOrphanFilesInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Enable Removal of Isolated Files Governance Item: enable, none
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.RemoveOrphanFilesEnable = null;

        /**
         * Engine Name for Running Removal of Isolated Files Governance Item
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Engine = null;

        /**
         * Remove Isolated Files Older Than Specified Days
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.BeforeDays = null;

        /**
         * Number of Concurrent Processes for Removing Isolated Files
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.MaxConcurrentDeletes = null;

        /**
         * Isolated Files Governance Run Cycle, in minutes
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.IntervalMin = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.RemoveOrphanFilesEnable = 'RemoveOrphanFilesEnable' in params ? params.RemoveOrphanFilesEnable : null;
        this.Engine = 'Engine' in params ? params.Engine : null;
        this.BeforeDays = 'BeforeDays' in params ? params.BeforeDays : null;
        this.MaxConcurrentDeletes = 'MaxConcurrentDeletes' in params ? params.MaxConcurrentDeletes : null;
        this.IntervalMin = 'IntervalMin' in params ? params.IntervalMin : null;

    }
}

/**
 * LockIntegrationTask request structure.
 * @class
 */
class LockIntegrationTaskRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * BatchStopIntegrationTasks request structure.
 * @class
 */
class BatchStopIntegrationTasksRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {Array.<string> || null}
         */
        this.TaskIds = null;

        /**
         * Task Type, 201 for real-time tasks, 202 for offline tasks
         * @type {number || null}
         */
        this.TaskType = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskIds = 'TaskIds' in params ? params.TaskIds : null;
        this.TaskType = 'TaskType' in params ? params.TaskType : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * DescribeRuleTemplatesByPage request structure.
 * @class
 */
class DescribeRuleTemplatesByPageRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Current Page
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Number of records per page
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Workspace ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Universal Sort Field
         * @type {Array.<OrderField> || null}
         */
        this.OrderFields = null;

        /**
         * Universal Filter Criteria
         * @type {Array.<Filter> || null}
         */
        this.Filters = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

        if (params.OrderFields) {
            this.OrderFields = new Array();
            for (let z in params.OrderFields) {
                let obj = new OrderField();
                obj.deserialize(params.OrderFields[z]);
                this.OrderFields.push(obj);
            }
        }

        if (params.Filters) {
            this.Filters = new Array();
            for (let z in params.Filters) {
                let obj = new Filter();
                obj.deserialize(params.Filters[z]);
                this.Filters.push(obj);
            }
        }

    }
}

/**
 * RunTasksByMultiWorkflow response structure.
 * @class
 */
class RunTasksByMultiWorkflowResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Operation ResultNote: This field may return null, indicating that no valid value can be obtained.
         * @type {OperationOpsDto || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new OperationOpsDto();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeInstanceLastLog response structure.
 * @class
 */
class DescribeInstanceLastLogResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Log
         * @type {string || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Heat value of the table in the past seven days (excluding today)
 * @class
 */
class TableHeat extends  AbstractModel {
    constructor(){
        super();

        /**
         * Table IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableId = null;

        /**
         * Statistics DateNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DayTime = null;

        /**
         * Popularity
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Heat = null;

        /**
         * Maximum Popularity
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.MaxHeat = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TableId = 'TableId' in params ? params.TableId : null;
        this.DayTime = 'DayTime' in params ? params.DayTime : null;
        this.Heat = 'Heat' in params ? params.Heat : null;
        this.MaxHeat = 'MaxHeat' in params ? params.MaxHeat : null;

    }
}

/**
 * DescribeExecStrategy request structure.
 * @class
 */
class DescribeExecStrategyRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Rule Group ID
         * @type {number || null}
         */
        this.RuleGroupId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.RuleGroupId = 'RuleGroupId' in params ? params.RuleGroupId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * Development Space - Script-related Response
 * @class
 */
class ScriptInfoResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Resource IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ResourceId = null;

        /**
         * Script Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FileName = null;

        /**
         * File Extension Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FileExtensionType = null;

        /**
         * File TypeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Type = null;

        /**
         * md5 Value
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Md5Value = null;

        /**
         * Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreateTime = null;

        /**
         * Update timeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.UpdateTime = null;

        /**
         * File sizeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Size = null;

        /**
         * Local Path
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.LocalPath = null;

        /**
         * Remote Path
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.RemotePath = null;

        /**
         * UsernameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.OwnerName = null;

        /**
         * User ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Owner = null;

        /**
         * Path Depth
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.PathDepth = null;

        /**
         * Project IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Additional Information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ExtraInfo = null;

        /**
         * Local Temporary File Path
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.LocalTempPath = null;

        /**
         * Local Compressed File Path
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ZipPath = null;

        /**
         * COS Bucket Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Bucket = null;

        /**
         * COS Region
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Region = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ResourceId = 'ResourceId' in params ? params.ResourceId : null;
        this.FileName = 'FileName' in params ? params.FileName : null;
        this.FileExtensionType = 'FileExtensionType' in params ? params.FileExtensionType : null;
        this.Type = 'Type' in params ? params.Type : null;
        this.Md5Value = 'Md5Value' in params ? params.Md5Value : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;
        this.UpdateTime = 'UpdateTime' in params ? params.UpdateTime : null;
        this.Size = 'Size' in params ? params.Size : null;
        this.LocalPath = 'LocalPath' in params ? params.LocalPath : null;
        this.RemotePath = 'RemotePath' in params ? params.RemotePath : null;
        this.OwnerName = 'OwnerName' in params ? params.OwnerName : null;
        this.Owner = 'Owner' in params ? params.Owner : null;
        this.PathDepth = 'PathDepth' in params ? params.PathDepth : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.ExtraInfo = 'ExtraInfo' in params ? params.ExtraInfo : null;
        this.LocalTempPath = 'LocalTempPath' in params ? params.LocalTempPath : null;
        this.ZipPath = 'ZipPath' in params ? params.ZipPath : null;
        this.Bucket = 'Bucket' in params ? params.Bucket : null;
        this.Region = 'Region' in params ? params.Region : null;

    }
}

/**
 * CreateHiveTable request structure.
 * @class
 */
class CreateHiveTableRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Data source ID
         * @type {string || null}
         */
        this.DatasourceId = null;

        /**
         * Database name
         * @type {string || null}
         */
        this.Database = null;

        /**
         * Base64-encoded Table Creation Statement
         * @type {string || null}
         */
        this.DDLSql = null;

        /**
         * Table permissions, default is 0: Project share; 1: Individual and administrator only
         * @type {number || null}
         */
        this.Privilege = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Person in Charge
         * @type {string || null}
         */
        this.Incharge = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.DatasourceId = 'DatasourceId' in params ? params.DatasourceId : null;
        this.Database = 'Database' in params ? params.Database : null;
        this.DDLSql = 'DDLSql' in params ? params.DDLSql : null;
        this.Privilege = 'Privilege' in params ? params.Privilege : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.Incharge = 'Incharge' in params ? params.Incharge : null;

    }
}

/**
 * BatchKillIntegrationTaskInstances response structure.
 * @class
 */
class BatchKillIntegrationTaskInstancesResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Number of Successfully Operated Tasks
         * @type {number || null}
         */
        this.SuccessCount = null;

        /**
         * Number of Failed Tasks
         * @type {number || null}
         */
        this.FailedCount = null;

        /**
         * Total Number of Tasks
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * What is actually passed is taskId
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<string> || null}
         */
        this.TaskNames = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.SuccessCount = 'SuccessCount' in params ? params.SuccessCount : null;
        this.FailedCount = 'FailedCount' in params ? params.FailedCount : null;
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.TaskNames = 'TaskNames' in params ? params.TaskNames : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * RunTasksByMultiWorkflow request structure.
 * @class
 */
class RunTasksByMultiWorkflowRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Workflow ID List
         * @type {Array.<string> || null}
         */
        this.WorkflowIds = null;

        /**
         * Whether to supplement intermediate instances 0. Do not supplement 1. Supplement instance
         * @type {number || null}
         */
        this.EnableMakeUp = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.WorkflowIds = 'WorkflowIds' in params ? params.WorkflowIds : null;
        this.EnableMakeUp = 'EnableMakeUp' in params ? params.EnableMakeUp : null;

    }
}

/**
 * Event Listener
 * @class
 */
class EventListenerOpsDto extends  AbstractModel {
    constructor(){
        super();

        /**
         * Event nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EventName = null;

        /**
         * Keyword, if it is a task, then it is the Task ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Key = null;

        /**
         * Trigger methodNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Type = null;

        /**
         * Event Attributes
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Properties = null;

        /**
         * Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreationTimestamp = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.EventName = 'EventName' in params ? params.EventName : null;
        this.Key = 'Key' in params ? params.Key : null;
        this.Type = 'Type' in params ? params.Type : null;
        this.Properties = 'Properties' in params ? params.Properties : null;
        this.CreationTimestamp = 'CreationTimestamp' in params ? params.CreationTimestamp : null;

    }
}

/**
 * CheckIntegrationTaskNameExists request structure.
 * @class
 */
class CheckIntegrationTaskNameExistsRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task Name
         * @type {string || null}
         */
        this.TaskName = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Synchronization Type 1. Single Table Synchronization, 2. Solution
         * @type {number || null}
         */
        this.SyncType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskName = 'TaskName' in params ? params.TaskName : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.SyncType = 'SyncType' in params ? params.SyncType : null;

    }
}

/**
 * DescribeRuleGroupTable response structure.
 * @class
 */
class DescribeRuleGroupTableResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * DataNote: This field may return null, indicating that no valid value can be obtained.
         * @type {RuleGroupTable || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new RuleGroupTable();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Daily Rating Information
 * @class
 */
class DailyScoreInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Statistics Date TimestampNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.StatisticsDate = null;

        /**
         * ScoringNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Score = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.StatisticsDate = 'StatisticsDate' in params ? params.StatisticsDate : null;
        this.Score = 'Score' in params ? params.Score : null;

    }
}

/**
 * SuspendIntegrationTask request structure.
 * @class
 */
class SuspendIntegrationTaskRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Event Type (START, STOP, SUSPEND, SUSPEND_WITHOUT_SP, RESUME, COMMIT, TIMESTAMP)	
         * @type {string || null}
         */
        this.Event = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.Event = 'Event' in params ? params.Event : null;

    }
}

/**
 * DescribeDependOpsTasks response structure.
 * @class
 */
class DescribeDependOpsTasksResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Canvas Task and Link Information
         * @type {OpsTaskCanvasInfoList || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new OpsTaskCanvasInfoList();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DeleteRuleTemplate response structure.
 * @class
 */
class DeleteRuleTemplateResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Deleted successfully
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeRuleTemplate request structure.
 * @class
 */
class DescribeRuleTemplateRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Rule Template ID
         * @type {number || null}
         */
        this.TemplateId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.TemplateId = 'TemplateId' in params ? params.TemplateId : null;

    }
}

/**
 * Data Quality Custom Rule's SQL Expression Resolved Object
 * @class
 */
class SqlExpression extends  AbstractModel {
    constructor(){
        super();

        /**
         * SQL Expression Table Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<SqlExpressionTable> || null}
         */
        this.TableExpressions = null;

        /**
         * SQL Expression Column Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<string> || null}
         */
        this.ParamExpressions = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.TableExpressions) {
            this.TableExpressions = new Array();
            for (let z in params.TableExpressions) {
                let obj = new SqlExpressionTable();
                obj.deserialize(params.TableExpressions[z]);
                this.TableExpressions.push(obj);
            }
        }
        this.ParamExpressions = 'ParamExpressions' in params ? params.ParamExpressions : null;

    }
}

/**
 * DescribeTaskByCycle request structure.
 * @class
 */
class DescribeTaskByCycleRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * 1
         * @type {string || null}
         */
        this.InCharge = null;

        /**
         * Workflow ID
         * @type {string || null}
         */
        this.WorkflowId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.InCharge = 'InCharge' in params ? params.InCharge : null;
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;

    }
}

/**
 * ID Wrapper Object
 * @class
 */
class CommonId extends  AbstractModel {
    constructor(){
        super();

        /**
         * ID Value
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Id = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Id = 'Id' in params ? params.Id : null;

    }
}

/**
 * CreateRuleTemplate request structure.
 * @class
 */
class CreateRuleTemplateRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Template Type 1. System Template 2. Custom Definition Template
         * @type {number || null}
         */
        this.Type = null;

        /**
         * Template Name
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Quality Inspection Dimension 1. Accuracy 2. Uniqueness 3. Integrity 4. Consistency 5. Timeliness 6. Validity
         * @type {number || null}
         */
        this.QualityDim = null;

        /**
         * Source Data Object Type 1. Constant 2. Offline Table Level 2. Offline Field Level
         * @type {number || null}
         */
        this.SourceObjectType = null;

        /**
         * Template Description
         * @type {string || null}
         */
        this.Description = null;

        /**
         * Corresponding Engine Type of the Source
         * @type {Array.<number> || null}
         */
        this.SourceEngineTypes = null;

        /**
         * Whether to Associate with Other Databases and Tables
         * @type {boolean || null}
         */
        this.MultiSourceFlag = null;

        /**
         * SQL Expression
         * @type {string || null}
         */
        this.SqlExpression = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Whether to add where parameter
         * @type {boolean || null}
         */
        this.WhereFlag = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Type = 'Type' in params ? params.Type : null;
        this.Name = 'Name' in params ? params.Name : null;
        this.QualityDim = 'QualityDim' in params ? params.QualityDim : null;
        this.SourceObjectType = 'SourceObjectType' in params ? params.SourceObjectType : null;
        this.Description = 'Description' in params ? params.Description : null;
        this.SourceEngineTypes = 'SourceEngineTypes' in params ? params.SourceEngineTypes : null;
        this.MultiSourceFlag = 'MultiSourceFlag' in params ? params.MultiSourceFlag : null;
        this.SqlExpression = 'SqlExpression' in params ? params.SqlExpression : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.WhereFlag = 'WhereFlag' in params ? params.WhereFlag : null;

    }
}

/**
 * Data Layout Governance Item
 * @class
 */
class DlcRewriteDataInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Whether to enable data layout governance item: enable (start), disable (do not enable, default)
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.RewriteDataEnable = null;

        /**
         * Engine name used to run data layout governance item
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Engine = null;

        /**
         * Number of files executed by the rearrangement task
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.MinInputFiles = null;

        /**
         * Data file size after data rearrangement, in bytes
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TargetFileSizeBytes = null;

        /**
         * Data layout governance runtime cycle, in minutes
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.IntervalMin = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.RewriteDataEnable = 'RewriteDataEnable' in params ? params.RewriteDataEnable : null;
        this.Engine = 'Engine' in params ? params.Engine : null;
        this.MinInputFiles = 'MinInputFiles' in params ? params.MinInputFiles : null;
        this.TargetFileSizeBytes = 'TargetFileSizeBytes' in params ? params.TargetFileSizeBytes : null;
        this.IntervalMin = 'IntervalMin' in params ? params.IntervalMin : null;

    }
}

/**
 * Quality Overview Table Ranking Results
 * @class
 */
class TopTableStat extends  AbstractModel {
    constructor(){
        super();

        /**
         * Alarm Table List
         * @type {Array.<TopTableStatItem> || null}
         */
        this.AlarmTables = null;

        /**
         * Block Table List
         * @type {Array.<TopTableStatItem> || null}
         */
        this.PipelineTables = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.AlarmTables) {
            this.AlarmTables = new Array();
            for (let z in params.AlarmTables) {
                let obj = new TopTableStatItem();
                obj.deserialize(params.AlarmTables[z]);
                this.AlarmTables.push(obj);
            }
        }

        if (params.PipelineTables) {
            this.PipelineTables = new Array();
            for (let z in params.PipelineTables) {
                let obj = new TopTableStatItem();
                obj.deserialize(params.PipelineTables[z]);
                this.PipelineTables.push(obj);
            }
        }

    }
}

/**
 * Paging Query Workflow Canvas Run Start and End Time
 * @class
 */
class WorkFlowExecuteDtoByPage extends  AbstractModel {
    constructor(){
        super();

        /**
         * Total numberNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * data
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<WorkFlowExecuteDto> || null}
         */
        this.Items = null;

        /**
         * Page sizeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.PageSize = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;

        if (params.Items) {
            this.Items = new Array();
            for (let z in params.Items) {
                let obj = new WorkFlowExecuteDto();
                obj.deserialize(params.Items[z]);
                this.Items.push(obj);
            }
        }
        this.PageSize = 'PageSize' in params ? params.PageSize : null;

    }
}

/**
 * DescribeRuleExecDetail response structure.
 * @class
 */
class DescribeRuleExecDetailResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Rule Execution Result DetailsNote: This field may return null, indicating that no valid value can be obtained.
         * @type {RuleExecResultDetail || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new RuleExecResultDetail();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Universal Filter
 * @class
 */
class Filter extends  AbstractModel {
    constructor(){
        super();

        /**
         * Filter Field Name
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Filter Value List
         * @type {Array.<string> || null}
         */
        this.Values = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Name = 'Name' in params ? params.Name : null;
        this.Values = 'Values' in params ? params.Values : null;

    }
}

/**
 * Key-Value Pair
 * @class
 */
class Pair extends  AbstractModel {
    constructor(){
        super();

        /**
         * Key Name
         * @type {string || null}
         */
        this.Key = null;

        /**
         * Value
         * @type {string || null}
         */
        this.Value = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Key = 'Key' in params ? params.Key : null;
        this.Value = 'Value' in params ? params.Value : null;

    }
}

/**
 * DeleteIntegrationTask response structure.
 * @class
 */
class DeleteIntegrationTaskResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task Deletion Success or Failure Indicator
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * Task Deletion Success or Failure Indicator
0 indicates deletion was successful
1 indicates failure, see DeleteErrInfo for the reason
100 indicates running or suspend task can't be deleted, the reason will also be written in DeleteErrInfo
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.DeleteFlag = null;

        /**
         * Reason for Deletion Failure
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DeleteErrInfo = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.DeleteFlag = 'DeleteFlag' in params ? params.DeleteFlag : null;
        this.DeleteErrInfo = 'DeleteErrInfo' in params ? params.DeleteErrInfo : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Information Required for Creating DLC Table
 * @class
 */
class TableBaseInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Database nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatabaseName = null;

        /**
         * Table NameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableName = null;

        /**
         * Data Table's Data Source Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatasourceConnectionName = null;

        /**
         * Table Remarks
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableComment = null;

        /**
         * TypeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Type = null;

        /**
         * Data Format Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableFormat = null;

        /**
         * User Nickname
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.UserAlias = null;

        /**
         * Table Creation User ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.UserSubUin = null;

        /**
         * Data Governance Configuration ItemsNote: This field may return null, indicating that no valid value can be obtained.
         * @type {DlcDataGovernPolicy || null}
         */
        this.GovernPolicy = null;

        /**
         * Is Database Data Governance disabled, true for disabled, false for enabled
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DbGovernPolicyIsDisable = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.DatabaseName = 'DatabaseName' in params ? params.DatabaseName : null;
        this.TableName = 'TableName' in params ? params.TableName : null;
        this.DatasourceConnectionName = 'DatasourceConnectionName' in params ? params.DatasourceConnectionName : null;
        this.TableComment = 'TableComment' in params ? params.TableComment : null;
        this.Type = 'Type' in params ? params.Type : null;
        this.TableFormat = 'TableFormat' in params ? params.TableFormat : null;
        this.UserAlias = 'UserAlias' in params ? params.UserAlias : null;
        this.UserSubUin = 'UserSubUin' in params ? params.UserSubUin : null;

        if (params.GovernPolicy) {
            let obj = new DlcDataGovernPolicy();
            obj.deserialize(params.GovernPolicy)
            this.GovernPolicy = obj;
        }
        this.DbGovernPolicyIsDisable = 'DbGovernPolicyIsDisable' in params ? params.DbGovernPolicyIsDisable : null;

    }
}

/**
 * DescribeRuleGroupsByPage response structure.
 * @class
 */
class DescribeRuleGroupsByPageResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Rule Group List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {RuleGroupPage || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new RuleGroupPage();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Table Metadata Information
 * @class
 */
class TableBasicInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Global Unique ID of the Table
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableId = null;

        /**
         * Data Source Global Unique ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatasourceId = null;

        /**
         * Data Source Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatasourceName = null;

        /**
         * Database ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatabaseId = null;

        /**
         * Database nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatabaseName = null;

        /**
         * Table NameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableName = null;

        /**
         * Engine/Storage Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EngineType = null;

        /**
         * Table Types, such as View, External Table, etc.
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableType = null;

        /**
         * Project IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Project Name in English
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectName = null;

        /**
         * Project English and Chinese Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectDisplayName = null;

        /**
         * Responsible Person ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableOwnerId = null;

        /**
         * Person in Charge
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TableOwnerName = null;

        /**
         * Storage locationNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.StorageLocation = null;

        /**
         * Table Description
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Description = null;

        /**
         * Whether it is a partitioned table, 0-Full Table 1-Partition Table
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.IsPartitionTable = null;

        /**
         * Partition field list
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<string> || null}
         */
        this.PartitionColumns = null;

        /**
         * Storage Format
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.StorageFormat = null;

        /**
         * Storage Volume, Byte Count
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.StorageSize = null;

        /**
         * Storage Volume, Unit
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.StorageSizeWithUnit = null;

        /**
         * Cumulative storage [MB]
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalSizeMb = null;

        /**
         * Replica quantityNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.ReplicaCount = null;

        /**
         * Number of Files
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.FileCount = null;

        /**
         * Total Partitions (including hive, iceberg)
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.PartitionCount = null;

        /**
         * Number of partition fields (including hive, iceberg)
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.PartitionFieldCount = null;

        /**
         * Lifecycle - Partition Retention Days [Effective during Partition Retention Policy]
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.PartitionExpireDays = null;

        /**
         * Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreateTime = null;

        /**
         * Update timeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.UpdateTime = null;

        /**
         * Storage locationNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Location = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TableId = 'TableId' in params ? params.TableId : null;
        this.DatasourceId = 'DatasourceId' in params ? params.DatasourceId : null;
        this.DatasourceName = 'DatasourceName' in params ? params.DatasourceName : null;
        this.DatabaseId = 'DatabaseId' in params ? params.DatabaseId : null;
        this.DatabaseName = 'DatabaseName' in params ? params.DatabaseName : null;
        this.TableName = 'TableName' in params ? params.TableName : null;
        this.EngineType = 'EngineType' in params ? params.EngineType : null;
        this.TableType = 'TableType' in params ? params.TableType : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.ProjectName = 'ProjectName' in params ? params.ProjectName : null;
        this.ProjectDisplayName = 'ProjectDisplayName' in params ? params.ProjectDisplayName : null;
        this.TableOwnerId = 'TableOwnerId' in params ? params.TableOwnerId : null;
        this.TableOwnerName = 'TableOwnerName' in params ? params.TableOwnerName : null;
        this.StorageLocation = 'StorageLocation' in params ? params.StorageLocation : null;
        this.Description = 'Description' in params ? params.Description : null;
        this.IsPartitionTable = 'IsPartitionTable' in params ? params.IsPartitionTable : null;
        this.PartitionColumns = 'PartitionColumns' in params ? params.PartitionColumns : null;
        this.StorageFormat = 'StorageFormat' in params ? params.StorageFormat : null;
        this.StorageSize = 'StorageSize' in params ? params.StorageSize : null;
        this.StorageSizeWithUnit = 'StorageSizeWithUnit' in params ? params.StorageSizeWithUnit : null;
        this.TotalSizeMb = 'TotalSizeMb' in params ? params.TotalSizeMb : null;
        this.ReplicaCount = 'ReplicaCount' in params ? params.ReplicaCount : null;
        this.FileCount = 'FileCount' in params ? params.FileCount : null;
        this.PartitionCount = 'PartitionCount' in params ? params.PartitionCount : null;
        this.PartitionFieldCount = 'PartitionFieldCount' in params ? params.PartitionFieldCount : null;
        this.PartitionExpireDays = 'PartitionExpireDays' in params ? params.PartitionExpireDays : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;
        this.UpdateTime = 'UpdateTime' in params ? params.UpdateTime : null;
        this.Location = 'Location' in params ? params.Location : null;

    }
}

/**
 * DescribeIntegrationStatisticsTaskStatus response structure.
 * @class
 */
class DescribeIntegrationStatisticsTaskStatusResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Statistical ResultsNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.StatusData = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.StatusData = 'StatusData' in params ? params.StatusData : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeOpsMakePlanInstances response structure.
 * @class
 */
class DescribeOpsMakePlanInstancesResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Supplemental plan instance paged query results
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {MakePlanInstanceOpsDtoCollection || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new MakePlanInstanceOpsDtoCollection();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeDatabaseInfoList request structure.
 * @class
 */
class DescribeDatabaseInfoListRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Ignore Query String
         * @type {Array.<Filter> || null}
         */
        this.Filters = null;

        /**
         * Connection Type
         * @type {string || null}
         */
        this.ConnectionType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Filters) {
            this.Filters = new Array();
            for (let z in params.Filters) {
                let obj = new Filter();
                obj.deserialize(params.Filters[z]);
                this.Filters.push(obj);
            }
        }
        this.ConnectionType = 'ConnectionType' in params ? params.ConnectionType : null;

    }
}

/**
 * DescribeIntegrationTask response structure.
 * @class
 */
class DescribeIntegrationTaskResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task InformationNote: This field may return null, indicating that no valid value can be obtained.
         * @type {IntegrationTaskInfo || null}
         */
        this.TaskInfo = null;

        /**
         * Collector statistics
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {AgentStatus || null}
         */
        this.AgentStatus = null;

        /**
         * Task version information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {TaskVersionInstance || null}
         */
        this.TaskVersion = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.TaskInfo) {
            let obj = new IntegrationTaskInfo();
            obj.deserialize(params.TaskInfo)
            this.TaskInfo = obj;
        }

        if (params.AgentStatus) {
            let obj = new AgentStatus();
            obj.deserialize(params.AgentStatus)
            this.AgentStatus = obj;
        }

        if (params.TaskVersion) {
            let obj = new TaskVersionInstance();
            obj.deserialize(params.TaskVersion)
            this.TaskVersion = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Task information.
 * @class
 */
class TaskInfoVo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Tenant id.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.AppID = null;

        /**
         * Project ID.

Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Task ID

Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Task name.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.TaskName = null;

        /**
         * Task type id.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.TaskTypeId = null;

        /**
         * Main account id.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.OnwerUid = null;

        /**
         * Person in charge.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.InChargeId = null;

        /**
         * Instance ID

Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.InstanceId = null;

        /**
         * jobId
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.JobId = null;

        /**
         * Engine type, DLC, EMR.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.EngineType = null;

        /**
         * Engine name

Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.EngineName = null;

        /**
         * Engine sub-type.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.EngineSubType = null;

        /**
         * Engine taskId.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.EngineTaskId = null;

        /**
         * Engine execution status, enumerate.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.EngineExeStatus = null;

        /**
         * Engine execution user.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.EngineExeUser = null;

        /**
         * Engine execution start time.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.EngineExeStartTime = null;

        /**
         * Engine execution end time.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.EngineExeEndTime = null;

        /**
         * DATA source, such as DATA_INTEGRATION, DATA_EXPLORATION, DATA_QUALITY, OM_CENTER.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.ProductSource = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.AppID = 'AppID' in params ? params.AppID : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.TaskName = 'TaskName' in params ? params.TaskName : null;
        this.TaskTypeId = 'TaskTypeId' in params ? params.TaskTypeId : null;
        this.OnwerUid = 'OnwerUid' in params ? params.OnwerUid : null;
        this.InChargeId = 'InChargeId' in params ? params.InChargeId : null;
        this.InstanceId = 'InstanceId' in params ? params.InstanceId : null;
        this.JobId = 'JobId' in params ? params.JobId : null;
        this.EngineType = 'EngineType' in params ? params.EngineType : null;
        this.EngineName = 'EngineName' in params ? params.EngineName : null;
        this.EngineSubType = 'EngineSubType' in params ? params.EngineSubType : null;
        this.EngineTaskId = 'EngineTaskId' in params ? params.EngineTaskId : null;
        this.EngineExeStatus = 'EngineExeStatus' in params ? params.EngineExeStatus : null;
        this.EngineExeUser = 'EngineExeUser' in params ? params.EngineExeUser : null;
        this.EngineExeStartTime = 'EngineExeStartTime' in params ? params.EngineExeStartTime : null;
        this.EngineExeEndTime = 'EngineExeEndTime' in params ? params.EngineExeEndTime : null;
        this.ProductSource = 'ProductSource' in params ? params.ProductSource : null;

    }
}

/**
 * DescribeQualityScoreTrend response structure.
 * @class
 */
class DescribeQualityScoreTrendResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Quality score trend view
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {QualityScoreTrend || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new QualityScoreTrend();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Rule Dimension Count Statistics
 * @class
 */
class RuleDimStat extends  AbstractModel {
    constructor(){
        super();

        /**
         * Total number
         * @type {number || null}
         */
        this.TotalCnt = null;

        /**
         * Dimension Count Statistics
         * @type {Array.<RuleDimCnt> || null}
         */
        this.DimCntList = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TotalCnt = 'TotalCnt' in params ? params.TotalCnt : null;

        if (params.DimCntList) {
            this.DimCntList = new Array();
            for (let z in params.DimCntList) {
                let obj = new RuleDimCnt();
                obj.deserialize(params.DimCntList[z]);
                this.DimCntList.push(obj);
            }
        }

    }
}

/**
 * CreateHiveTableByDDL request structure.
 * @class
 */
class CreateHiveTableByDDLRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Data Source ID
         * @type {string || null}
         */
        this.DatasourceId = null;

        /**
         * Database
         * @type {string || null}
         */
        this.Database = null;

        /**
         * Create Hive Table DDL
         * @type {string || null}
         */
        this.DDLSql = null;

        /**
         * Table permissions, default is 0: Project share; 1: Individual and administrator only
         * @type {number || null}
         */
        this.Privilege = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Target Table Type (HIVE or GBASE)
         * @type {string || null}
         */
        this.Type = null;

        /**
         * Person in Charge
         * @type {string || null}
         */
        this.Incharge = null;

        /**
         * Schema Name
         * @type {string || null}
         */
        this.SchemaName = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.DatasourceId = 'DatasourceId' in params ? params.DatasourceId : null;
        this.Database = 'Database' in params ? params.Database : null;
        this.DDLSql = 'DDLSql' in params ? params.DDLSql : null;
        this.Privilege = 'Privilege' in params ? params.Privilege : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.Type = 'Type' in params ? params.Type : null;
        this.Incharge = 'Incharge' in params ? params.Incharge : null;
        this.SchemaName = 'SchemaName' in params ? params.SchemaName : null;

    }
}

/**
 * Data Quality Data Source Database
 * @class
 */
class DatabaseInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Data source name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatasourceName = null;

        /**
         * Data Source IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatasourceId = null;

        /**
         * Database nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatabaseName = null;

        /**
         * Database id
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DatabaseId = null;

        /**
         * Instance Id
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InstanceId = null;

        /**
         * Data source typeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.DatasourceType = null;

        /**
         * Database Original Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.OriginDatabaseName = null;

        /**
         * Schema NameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.OriginSchemaName = null;

        /**
         * 0 or Not Returned. Undefined, 1. generation 2. development
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.DsEnvType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.DatasourceName = 'DatasourceName' in params ? params.DatasourceName : null;
        this.DatasourceId = 'DatasourceId' in params ? params.DatasourceId : null;
        this.DatabaseName = 'DatabaseName' in params ? params.DatabaseName : null;
        this.DatabaseId = 'DatabaseId' in params ? params.DatabaseId : null;
        this.InstanceId = 'InstanceId' in params ? params.InstanceId : null;
        this.DatasourceType = 'DatasourceType' in params ? params.DatasourceType : null;
        this.OriginDatabaseName = 'OriginDatabaseName' in params ? params.OriginDatabaseName : null;
        this.OriginSchemaName = 'OriginSchemaName' in params ? params.OriginSchemaName : null;
        this.DsEnvType = 'DsEnvType' in params ? params.DsEnvType : null;

    }
}

/**
 * GetIntegrationNodeColumnSchema response structure.
 * @class
 */
class GetIntegrationNodeColumnSchemaResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Field List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<IntegrationNodeSchema> || null}
         */
        this.Schemas = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Schemas) {
            this.Schemas = new Array();
            for (let z in params.Schemas) {
                let obj = new IntegrationNodeSchema();
                obj.deserialize(params.Schemas[z]);
                this.Schemas.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * StopIntegrationTask response structure.
 * @class
 */
class StopIntegrationTaskResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Operation Success or Failure Indicator
         * @type {boolean || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Data = 'Data' in params ? params.Data : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeOpsWorkflows response structure.
 * @class
 */
class DescribeOpsWorkflowsResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Workflow ListNote: This field may return null, indicating that no valid value can be obtained.
         * @type {WorkflowExtOpsDtoPage || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new WorkflowExtOpsDtoPage();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Task Information
 * @class
 */
class OpsTaskCanvasDto extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Task NameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskName = null;

        /**
         * Workflow IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.WorkflowId = null;

        /**
         * Workflow nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.WorkflowName = null;

        /**
         * Project nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectName = null;

        /**
         * Project IdentifierNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectIdent = null;

        /**
         * Task status, 'Y', 'F', 'O', 'T', 'INVALID' respectively indicate Scheduling In Progress, Stopped, Paused, Stopping, Expired
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Status = null;

        /**
         * Task Type ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TaskTypeId = null;

        /**
         * Task Type Description, where the corresponding relationship between Task Type ID and Task Type Description is as follows
20	Universal Data Synchronization Task
21	JDBC SQL
22	Tbase
25	Data ETL
30	Python
31	PySpark
34	Hive SQL
35	Shell
36	Spark SQL
37	HDFS to HBase
38	SHELL
39	Spark
45	DATA_QUALITY
55	THIVE to MySQL
56	THIVE to PostgreSQL
66	HDFS to PostgreSQL
67	HDFS to Oracle
68	HDFS to MySQL
69	FTP to HDFS
70	HIVE SQL
72	HIVE to HDFS
75	HDFS to HIVE
81	Python SQL Script
82	Spark Scala Computation
83	Wormhole Task
84	Verify Reconciliation File
85	HDFS to THIVE
86	TDW to HDFS
87	HDFS to TDW
88	Verify Reconciliation File
91	FLINK Task
92	MapReduce
98	custom topology
99	kafkatoHDFS
100	kafkatoHbase
101	Import MYSQL to HIVE(DX)
104	MYSQL to HIVE
105	HIVE to MYSQL
106	SQL SERVER to HIVE
107	HIVE to SQL SERVER
108	ORACLE to HIVE
109	HIVE to ORACLE
111	HIVE to MYSQL (NEW)
112	HIVE to PG
113	HIVE to PHOENIX
118	MYSQL to HDFS
119	PG to HDFS
120	ORACLE to HDFS
121	Data Quality
10000	Custom Definition Business
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskTypeDesc = null;

        /**
         * Project IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Folder NameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FolderName = null;

        /**
         * Folder IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FolderId = null;

        /**
         * Latest Submission Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FirstSubmitTime = null;

        /**
         * First Execution Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FirstRunTime = null;

        /**
         * Scheduling Plan Display Description Information
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ScheduleDesc = null;

        /**
         * Owner
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.InCharge = null;

        /**
         * Scheduling Cycle Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CycleUnit = null;

        /**
         * Canvas X-axis Coordinate Point
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.LeftCoordinate = null;

        /**
         * Canvas Y-axis Coordinate Point
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TopCoordinate = null;

        /**
         * Cross-Workflow Virtual Task Identifier; true indicates a cross-workflow task; false indicates an in-workflow task
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.VirtualFlag = null;

        /**
         * Elastic Cycle Configuration
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TaskAction = null;

        /**
         * DelayNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.DelayTime = null;

        /**
         * Execution Start Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ExecutionStartTime = null;

        /**
         * Execution End Time
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ExecutionEndTime = null;

        /**
         * Hierarchy
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Layer = null;

        /**
         * Source Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.SourceServiceId = null;

        /**
         * Source Data Source Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.SourceServiceType = null;

        /**
         * Target Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TargetServiceId = null;

        /**
         * Target Data Source Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TargetServiceType = null;

        /**
         * Task Alert Types
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.AlarmType = null;

        /**
         * Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreateTime = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.TaskName = 'TaskName' in params ? params.TaskName : null;
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;
        this.WorkflowName = 'WorkflowName' in params ? params.WorkflowName : null;
        this.ProjectName = 'ProjectName' in params ? params.ProjectName : null;
        this.ProjectIdent = 'ProjectIdent' in params ? params.ProjectIdent : null;
        this.Status = 'Status' in params ? params.Status : null;
        this.TaskTypeId = 'TaskTypeId' in params ? params.TaskTypeId : null;
        this.TaskTypeDesc = 'TaskTypeDesc' in params ? params.TaskTypeDesc : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.FolderName = 'FolderName' in params ? params.FolderName : null;
        this.FolderId = 'FolderId' in params ? params.FolderId : null;
        this.FirstSubmitTime = 'FirstSubmitTime' in params ? params.FirstSubmitTime : null;
        this.FirstRunTime = 'FirstRunTime' in params ? params.FirstRunTime : null;
        this.ScheduleDesc = 'ScheduleDesc' in params ? params.ScheduleDesc : null;
        this.InCharge = 'InCharge' in params ? params.InCharge : null;
        this.CycleUnit = 'CycleUnit' in params ? params.CycleUnit : null;
        this.LeftCoordinate = 'LeftCoordinate' in params ? params.LeftCoordinate : null;
        this.TopCoordinate = 'TopCoordinate' in params ? params.TopCoordinate : null;
        this.VirtualFlag = 'VirtualFlag' in params ? params.VirtualFlag : null;
        this.TaskAction = 'TaskAction' in params ? params.TaskAction : null;
        this.DelayTime = 'DelayTime' in params ? params.DelayTime : null;
        this.ExecutionStartTime = 'ExecutionStartTime' in params ? params.ExecutionStartTime : null;
        this.ExecutionEndTime = 'ExecutionEndTime' in params ? params.ExecutionEndTime : null;
        this.Layer = 'Layer' in params ? params.Layer : null;
        this.SourceServiceId = 'SourceServiceId' in params ? params.SourceServiceId : null;
        this.SourceServiceType = 'SourceServiceType' in params ? params.SourceServiceType : null;
        this.TargetServiceId = 'TargetServiceId' in params ? params.TargetServiceId : null;
        this.TargetServiceType = 'TargetServiceType' in params ? params.TargetServiceType : null;
        this.AlarmType = 'AlarmType' in params ? params.AlarmType : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;

    }
}

/**
 * DescribeRuleTemplates request structure.
 * @class
 */
class DescribeRuleTemplatesRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Template Type 1. System Template 2. Custom Definition Template
         * @type {number || null}
         */
        this.Type = null;

        /**
         * 1. Constant 2. Offline Table Level 2. Offline Field Level
         * @type {number || null}
         */
        this.SourceObjectType = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Corresponding Engine Type of the Source
         * @type {Array.<number> || null}
         */
        this.SourceEngineTypes = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Type = 'Type' in params ? params.Type : null;
        this.SourceObjectType = 'SourceObjectType' in params ? params.SourceObjectType : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.SourceEngineTypes = 'SourceEngineTypes' in params ? params.SourceEngineTypes : null;

    }
}

/**
 * DescribeDataCheckStat response structure.
 * @class
 */
class DescribeDataCheckStatResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Result
         * @type {DataCheckStat || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new DataCheckStat();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeIntegrationStatisticsInstanceTrend request structure.
 * @class
 */
class DescribeIntegrationStatisticsInstanceTrendRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task Type (Real-time: 201, Offline: 202)
         * @type {number || null}
         */
        this.TaskType = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Query Date
         * @type {string || null}
         */
        this.QueryDate = null;

        /**
         * Resource Group ID
         * @type {string || null}
         */
        this.ExecutorGroupId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskType = 'TaskType' in params ? params.TaskType : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.QueryDate = 'QueryDate' in params ? params.QueryDate : null;
        this.ExecutorGroupId = 'ExecutorGroupId' in params ? params.ExecutorGroupId : null;

    }
}

/**
 * DescribeDsFolderTree response structure.
 * @class
 */
class DescribeDsFolderTreeResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Unified Tree Structure Return Attribute List
         * @type {Array.<PathNodeDsVO> || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            this.Data = new Array();
            for (let z in params.Data) {
                let obj = new PathNodeDsVO();
                obj.deserialize(params.Data[z]);
                this.Data.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Data Development - Unified Tree Structure Return Attributes
 * @class
 */
class PathNodeDsVO extends  AbstractModel {
    constructor(){
        super();

        /**
         * PathNode ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Id = null;

        /**
         * PathNode Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Title = null;

        /**
         * PathNode Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Type = null;

        /**
         * Unique Identifier of Parent Node
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ParentId = null;

        /**
         * Is Leaf Node
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {boolean || null}
         */
        this.IsLeaf = null;

        /**
         * Child Node List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<PathNodeDsVO> || null}
         */
        this.Children = null;

        /**
         * Business Parameters, base64 encoded JSON string, to obtain specific parameters, base64 decoding is required
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Params = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Id = 'Id' in params ? params.Id : null;
        this.Title = 'Title' in params ? params.Title : null;
        this.Type = 'Type' in params ? params.Type : null;
        this.ParentId = 'ParentId' in params ? params.ParentId : null;
        this.IsLeaf = 'IsLeaf' in params ? params.IsLeaf : null;

        if (params.Children) {
            this.Children = new Array();
            for (let z in params.Children) {
                let obj = new PathNodeDsVO();
                obj.deserialize(params.Children[z]);
                this.Children.push(obj);
            }
        }
        this.Params = 'Params' in params ? params.Params : null;

    }
}

/**
 * DescribeWorkflowCanvasInfo request structure.
 * @class
 */
class DescribeWorkflowCanvasInfoRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Workflow ID
         * @type {string || null}
         */
        this.WorkflowId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.WorkflowId = 'WorkflowId' in params ? params.WorkflowId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * DagInstances request structure.
 * @class
 */
class DagInstancesRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Instance List
         * @type {Array.<InstanceOpsDto> || null}
         */
        this.Instances = null;

        /**
         * Check Parent Task Type, true: Check parent task; false: Do not check parent task
         * @type {boolean || null}
         */
        this.CheckFather = null;

        /**
         * Rerun Type, 1: Self; 3: Child; 2: Self and Child
         * @type {string || null}
         */
        this.RerunType = null;

        /**
         * Instance Dependency Mode, 1: Self-dependent; 2: Task-dependent; 3: Self and Parent-Child dependent
         * @type {string || null}
         */
        this.DependentWay = null;

        /**
         * Rerun Ignore Event Listening or Not
         * @type {boolean || null}
         */
        this.SkipEventListening = null;

        /**
         * Downstream Instance Range 1: Within the workflow 2: Within the project 3: Across all workflows dependent on the project
         * @type {string || null}
         */
        this.SonInstanceType = null;

        /**
         * Query conditions, this interface requires the example information to be placed in this field
         * @type {InstanceApiOpsRequest || null}
         */
        this.SearchCondition = null;

        /**
         * Access type
         * @type {string || null}
         */
        this.OptType = null;

        /**
         * Operator Name
         * @type {string || null}
         */
        this.OperatorName = null;

        /**
         * Operator ID
         * @type {string || null}
         */
        this.OperatorId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Project Identifier
         * @type {string || null}
         */
        this.ProjectIdent = null;

        /**
         * Project name
         * @type {string || null}
         */
        this.ProjectName = null;

        /**
         * Index Page Number
         * @type {number || null}
         */
        this.PageIndex = null;

        /**
         * Page size
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Total Data
         * @type {number || null}
         */
        this.Count = null;

        /**
         * Basic Request Information
         * @type {ProjectBaseInfoOpsRequest || null}
         */
        this.RequestBaseInfo = null;

        /**
         * Whether to Calculate Total
         * @type {boolean || null}
         */
        this.IsCount = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Instances) {
            this.Instances = new Array();
            for (let z in params.Instances) {
                let obj = new InstanceOpsDto();
                obj.deserialize(params.Instances[z]);
                this.Instances.push(obj);
            }
        }
        this.CheckFather = 'CheckFather' in params ? params.CheckFather : null;
        this.RerunType = 'RerunType' in params ? params.RerunType : null;
        this.DependentWay = 'DependentWay' in params ? params.DependentWay : null;
        this.SkipEventListening = 'SkipEventListening' in params ? params.SkipEventListening : null;
        this.SonInstanceType = 'SonInstanceType' in params ? params.SonInstanceType : null;

        if (params.SearchCondition) {
            let obj = new InstanceApiOpsRequest();
            obj.deserialize(params.SearchCondition)
            this.SearchCondition = obj;
        }
        this.OptType = 'OptType' in params ? params.OptType : null;
        this.OperatorName = 'OperatorName' in params ? params.OperatorName : null;
        this.OperatorId = 'OperatorId' in params ? params.OperatorId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.ProjectIdent = 'ProjectIdent' in params ? params.ProjectIdent : null;
        this.ProjectName = 'ProjectName' in params ? params.ProjectName : null;
        this.PageIndex = 'PageIndex' in params ? params.PageIndex : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;
        this.Count = 'Count' in params ? params.Count : null;

        if (params.RequestBaseInfo) {
            let obj = new ProjectBaseInfoOpsRequest();
            obj.deserialize(params.RequestBaseInfo)
            this.RequestBaseInfo = obj;
        }
        this.IsCount = 'IsCount' in params ? params.IsCount : null;

    }
}

/**
 * DryRunDIOfflineTask response structure.
 * @class
 */
class DryRunDIOfflineTaskResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Data Timestamp
         * @type {string || null}
         */
        this.CurrentRunDate = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Task Status
         * @type {string || null}
         */
        this.Status = null;

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Unique Key for Task Instance
         * @type {string || null}
         */
        this.TaskInstanceKey = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.CurrentRunDate = 'CurrentRunDate' in params ? params.CurrentRunDate : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.Status = 'Status' in params ? params.Status : null;
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.TaskInstanceKey = 'TaskInstanceKey' in params ? params.TaskInstanceKey : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Folder Attributes
 * @class
 */
class FolderOpsDto extends  AbstractModel {
    constructor(){
        super();

        /**
         * Folder IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Id = null;

        /**
         * Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreateTime = null;

        /**
         * Folder NameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Project ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Update timeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.UpdateTime = null;

        /**
         * Parent Folder ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ParentsFolderId = null;

        /**
         * Total Workflows
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Total = null;

        /**
         * Workflow ListNote: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<WorkflowCanvasOpsDto> || null}
         */
        this.Workflows = null;

        /**
         * Total Subfolders
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalFolders = null;

        /**
         * Subfolder List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FoldersList = null;

        /**
         * Search typeNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FindType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Id = 'Id' in params ? params.Id : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;
        this.Name = 'Name' in params ? params.Name : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.UpdateTime = 'UpdateTime' in params ? params.UpdateTime : null;
        this.ParentsFolderId = 'ParentsFolderId' in params ? params.ParentsFolderId : null;
        this.Total = 'Total' in params ? params.Total : null;

        if (params.Workflows) {
            this.Workflows = new Array();
            for (let z in params.Workflows) {
                let obj = new WorkflowCanvasOpsDto();
                obj.deserialize(params.Workflows[z]);
                this.Workflows.push(obj);
            }
        }
        this.TotalFolders = 'TotalFolders' in params ? params.TotalFolders : null;
        this.FoldersList = 'FoldersList' in params ? params.FoldersList : null;
        this.FindType = 'FindType' in params ? params.FindType : null;

    }
}

/**
 * DescribeTaskLockStatus request structure.
 * @class
 */
class DescribeTaskLockStatusRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Task Type: 201. stream, 202. offline
         * @type {number || null}
         */
        this.TaskType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.TaskType = 'TaskType' in params ? params.TaskType : null;

    }
}

/**
 * DescribeRuleExecStat request structure.
 * @class
 */
class DescribeRuleExecStatRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Start time, timestamp to the second
         * @type {string || null}
         */
        this.BeginDate = null;

        /**
         * End time, timestamp to the second
         * @type {string || null}
         */
        this.EndDate = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.BeginDate = 'BeginDate' in params ? params.BeginDate : null;
        this.EndDate = 'EndDate' in params ? params.EndDate : null;

    }
}

/**
 * GetInstanceLog request structure.
 * @class
 */
class GetInstanceLogRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * **Project ID**.
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Unique identifier of an instance.
         * @type {string || null}
         */
        this.InstanceKey = null;

        /**
         * Lifecycle no.
         * @type {number || null}
         */
        this.LifeRoundNum = null;

        /**
         * Time zone.
Time zone. specifies the time zone. the default value is UTC+8.
         * @type {string || null}
         */
        this.ScheduleTimeZone = null;

        /**
         * Indicates the Ip address of the executor where the log is located.
         * @type {string || null}
         */
        this.BrokerIp = null;

        /**
         * Log file.
When executionJobId in instance details is empty but originFileName is not empty, originFileName and brokerIp must be included in the input parameters.
If both executionJobId and originFileName are empty, it indicates that the instance has not been dispatched for execution or has not generated logs. for example, branch node or merge node.
         * @type {string || null}
         */
        this.OriginFileName = null;

        /**
         * **Execution ID**.

When executionJobId in instance details is not empty, executionJobId needs to be included in the input parameters. originFileName and brokerIp are not required parameters.
         * @type {string || null}
         */
        this.ExecutionJobId = null;

        /**
         * Log level.
Default All.

- Info
- Debug
- Warn
- Error
- All
         * @type {string || null}
         */
        this.LogLevel = null;

        /**
         * Start row number for obtaining logs.
The default is 1.
         * @type {number || null}
         */
        this.StartLineNum = null;

        /**
         * End line number for obtaining logs.
The default value is 10000.
         * @type {number || null}
         */
        this.EndLineCount = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.InstanceKey = 'InstanceKey' in params ? params.InstanceKey : null;
        this.LifeRoundNum = 'LifeRoundNum' in params ? params.LifeRoundNum : null;
        this.ScheduleTimeZone = 'ScheduleTimeZone' in params ? params.ScheduleTimeZone : null;
        this.BrokerIp = 'BrokerIp' in params ? params.BrokerIp : null;
        this.OriginFileName = 'OriginFileName' in params ? params.OriginFileName : null;
        this.ExecutionJobId = 'ExecutionJobId' in params ? params.ExecutionJobId : null;
        this.LogLevel = 'LogLevel' in params ? params.LogLevel : null;
        this.StartLineNum = 'StartLineNum' in params ? params.StartLineNum : null;
        this.EndLineCount = 'EndLineCount' in params ? params.EndLineCount : null;

    }
}

/**
 * Rule Configuration
 * @class
 */
class RuleConfig extends  AbstractModel {
    constructor(){
        super();

        /**
         * Rule IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.RuleId = null;

        /**
         * Rule Detection Range Type 1. Whole Table  2. Conditional Scan
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.ConditionType = null;

        /**
         * Detection Range Expression
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Condition = null;

        /**
         * Target Detection Range Expression
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TargetCondition = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.RuleId = 'RuleId' in params ? params.RuleId : null;
        this.ConditionType = 'ConditionType' in params ? params.ConditionType : null;
        this.Condition = 'Condition' in params ? params.Condition : null;
        this.TargetCondition = 'TargetCondition' in params ? params.TargetCondition : null;

    }
}

/**
 * Real-time Task Log Content
 * @class
 */
class LogContent extends  AbstractModel {
    constructor(){
        super();

        /**
         * Log Timestamp, in milliseconds
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.Time = null;

        /**
         * Log Package ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.PkgId = null;

        /**
         * Log content
         * @type {string || null}
         */
        this.Log = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Time = 'Time' in params ? params.Time : null;
        this.PkgId = 'PkgId' in params ? params.PkgId : null;
        this.Log = 'Log' in params ? params.Log : null;

    }
}

/**
 * Real-time task synchronization speed trend
 * @class
 */
class RealTimeTaskSpeed extends  AbstractModel {
    constructor(){
        super();

        /**
         * Synchronous Speed Bar/s List
         * @type {Array.<RecordsSpeed> || null}
         */
        this.RecordsSpeedList = null;

        /**
         * Synchronous Speed Bytes/s List
         * @type {Array.<BytesSpeed> || null}
         */
        this.BytesSpeedList = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.RecordsSpeedList) {
            this.RecordsSpeedList = new Array();
            for (let z in params.RecordsSpeedList) {
                let obj = new RecordsSpeed();
                obj.deserialize(params.RecordsSpeedList[z]);
                this.RecordsSpeedList.push(obj);
            }
        }

        if (params.BytesSpeedList) {
            this.BytesSpeedList = new Array();
            for (let z in params.BytesSpeedList) {
                let obj = new BytesSpeed();
                obj.deserialize(params.BytesSpeedList[z]);
                this.BytesSpeedList.push(obj);
            }
        }

    }
}

/**
 * BatchCreateIntegrationTaskAlarms response structure.
 * @class
 */
class BatchCreateIntegrationTaskAlarmsResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.SuccessCount = null;

        /**
         * Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.FailedCount = null;

        /**
         * Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.SuccessCount = 'SuccessCount' in params ? params.SuccessCount : null;
        this.FailedCount = 'FailedCount' in params ? params.FailedCount : null;
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeIntegrationStatistics request structure.
 * @class
 */
class DescribeIntegrationStatisticsRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task Type (Real-time: 201, Offline: 202)
         * @type {number || null}
         */
        this.TaskType = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Query Date
         * @type {string || null}
         */
        this.QueryDate = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskType = 'TaskType' in params ? params.TaskType : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.QueryDate = 'QueryDate' in params ? params.QueryDate : null;

    }
}

/**
 * DescribeRuleGroup request structure.
 * @class
 */
class DescribeRuleGroupRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Rule Group ID
         * @type {number || null}
         */
        this.RuleGroupId = null;

        /**
         * Data Source ID
         * @type {string || null}
         */
        this.DatasourceId = null;

        /**
         * Data Table ID
         * @type {string || null}
         */
        this.TableId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Database ID
         * @type {string || null}
         */
        this.DatabaseId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.RuleGroupId = 'RuleGroupId' in params ? params.RuleGroupId : null;
        this.DatasourceId = 'DatasourceId' in params ? params.DatasourceId : null;
        this.TableId = 'TableId' in params ? params.TableId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.DatabaseId = 'DatabaseId' in params ? params.DatabaseId : null;

    }
}

/**
 * ModifyTaskName request structure.
 * @class
 */
class ModifyTaskNameRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Name
         * @type {string || null}
         */
        this.TaskName = null;

        /**
         * id
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Project/workspace ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Remarks
         * @type {string || null}
         */
        this.Notes = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskName = 'TaskName' in params ? params.TaskName : null;
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.Notes = 'Notes' in params ? params.Notes : null;

    }
}

/**
 * DescribeTrendStat request structure.
 * @class
 */
class DescribeTrendStatRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Start time, timestamp to the second
         * @type {string || null}
         */
        this.BeginDate = null;

        /**
         * End time, timestamp to the second
         * @type {string || null}
         */
        this.EndDate = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.BeginDate = 'BeginDate' in params ? params.BeginDate : null;
        this.EndDate = 'EndDate' in params ? params.EndDate : null;

    }
}

/**
 * DescribeOpsInstanceLogList response structure.
 * @class
 */
class DescribeOpsInstanceLogListResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Instance Log List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<InstanceLogInfo> || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            this.Data = new Array();
            for (let z in params.Data) {
                let obj = new InstanceLogInfo();
                obj.deserialize(params.Data[z]);
                this.Data.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeApproveTypeList response structure.
 * @class
 */
class DescribeApproveTypeListResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Get Approval Category List
         * @type {Array.<ApproveType> || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            this.Data = new Array();
            for (let z in params.Data) {
                let obj = new ApproveType();
                obj.deserialize(params.Data[z]);
                this.Data.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Rule Group Execution Result Pagination
 * @class
 */
class RuleGroupExecResultPage extends  AbstractModel {
    constructor(){
        super();

        /**
         * Record CountNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * Rule Group Execution ResultNote: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<RuleGroupExecResult> || null}
         */
        this.Items = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;

        if (params.Items) {
            this.Items = new Array();
            for (let z in params.Items) {
                let obj = new RuleGroupExecResult();
                obj.deserialize(params.Items[z]);
                this.Items.push(obj);
            }
        }

    }
}

/**
 * DescribeRuleGroupSubscription request structure.
 * @class
 */
class DescribeRuleGroupSubscriptionRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Rule Group ID
         * @type {number || null}
         */
        this.RuleGroupId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.RuleGroupId = 'RuleGroupId' in params ? params.RuleGroupId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * Function containing hierarchical information
 * @class
 */
class OrganizationalFunction extends  AbstractModel {
    constructor(){
        super();

        /**
         * Name
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Display Name
         * @type {string || null}
         */
        this.DisplayName = null;

        /**
         * Hierarchical Path
         * @type {string || null}
         */
        this.LayerPath = null;

        /**
         * Parent Hierarchical Path
         * @type {string || null}
         */
        this.ParentLayerPath = null;

        /**
         * Function Type
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Type = null;

        /**
         * Function Classification: Window functions, Aggregation functions, Date functions...
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Kind = null;

        /**
         * Function Category: System functions, Custom Definition functions
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Category = null;

        /**
         * Function Status
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Status = null;

        /**
         * Function DescriptionNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Description = null;

        /**
         * Function Usage
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Usage = null;

        /**
         * Function Parameter Description
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ParamDesc = null;

        /**
         * Function Return Value Description
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ReturnDesc = null;

        /**
         * Function Example
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Example = null;

        /**
         * Cluster Instance Engine IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ClusterIdentifier = null;

        /**
         * Function IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.FuncId = null;

        /**
         * Function Class Name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ClassName = null;

        /**
         * Function Resource List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<FunctionVersion> || null}
         */
        this.ResourceList = null;

        /**
         * Operator ID List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<number> || null}
         */
        this.OperatorUserIds = null;

        /**
         * Public cloud Owner ID list
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<number> || null}
         */
        this.OwnerUserIds = null;

        /**
         * Database nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DbName = null;

        /**
         * Submission failed error message
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.SubmitErrorMsg = null;

        /**
         * Pattern nameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.SchemaName = null;

        /**
         * Function Command FormatNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CommandFormat = null;

        /**
         * NameNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.OwnerName = null;

        /**
         * TimestampNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.SubmitTimestamp = null;

        /**
         * Function tag
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Tag = null;

        /**
         * Operator ID List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<string> || null}
         */
        this.OperatorUserIdsStr = null;

        /**
         * Public Cloud Owner ID List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<string> || null}
         */
        this.OwnerUserIdsStr = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Name = 'Name' in params ? params.Name : null;
        this.DisplayName = 'DisplayName' in params ? params.DisplayName : null;
        this.LayerPath = 'LayerPath' in params ? params.LayerPath : null;
        this.ParentLayerPath = 'ParentLayerPath' in params ? params.ParentLayerPath : null;
        this.Type = 'Type' in params ? params.Type : null;
        this.Kind = 'Kind' in params ? params.Kind : null;
        this.Category = 'Category' in params ? params.Category : null;
        this.Status = 'Status' in params ? params.Status : null;
        this.Description = 'Description' in params ? params.Description : null;
        this.Usage = 'Usage' in params ? params.Usage : null;
        this.ParamDesc = 'ParamDesc' in params ? params.ParamDesc : null;
        this.ReturnDesc = 'ReturnDesc' in params ? params.ReturnDesc : null;
        this.Example = 'Example' in params ? params.Example : null;
        this.ClusterIdentifier = 'ClusterIdentifier' in params ? params.ClusterIdentifier : null;
        this.FuncId = 'FuncId' in params ? params.FuncId : null;
        this.ClassName = 'ClassName' in params ? params.ClassName : null;

        if (params.ResourceList) {
            this.ResourceList = new Array();
            for (let z in params.ResourceList) {
                let obj = new FunctionVersion();
                obj.deserialize(params.ResourceList[z]);
                this.ResourceList.push(obj);
            }
        }
        this.OperatorUserIds = 'OperatorUserIds' in params ? params.OperatorUserIds : null;
        this.OwnerUserIds = 'OwnerUserIds' in params ? params.OwnerUserIds : null;
        this.DbName = 'DbName' in params ? params.DbName : null;
        this.SubmitErrorMsg = 'SubmitErrorMsg' in params ? params.SubmitErrorMsg : null;
        this.SchemaName = 'SchemaName' in params ? params.SchemaName : null;
        this.CommandFormat = 'CommandFormat' in params ? params.CommandFormat : null;
        this.OwnerName = 'OwnerName' in params ? params.OwnerName : null;
        this.SubmitTimestamp = 'SubmitTimestamp' in params ? params.SubmitTimestamp : null;
        this.Tag = 'Tag' in params ? params.Tag : null;
        this.OperatorUserIdsStr = 'OperatorUserIdsStr' in params ? params.OperatorUserIdsStr : null;
        this.OwnerUserIdsStr = 'OwnerUserIdsStr' in params ? params.OwnerUserIdsStr : null;

    }
}

/**
 * Universal Sort Field
 * @class
 */
class OrderField extends  AbstractModel {
    constructor(){
        super();

        /**
         * Sorting Field Name
         * @type {string || null}
         */
        this.Name = null;

        /**
         * Sorting Direction: ASC|DESC
         * @type {string || null}
         */
        this.Direction = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Name = 'Name' in params ? params.Name : null;
        this.Direction = 'Direction' in params ? params.Direction : null;

    }
}

/**
 * BatchSuspendIntegrationTasks response structure.
 * @class
 */
class BatchSuspendIntegrationTasksResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Number of Successfully Operated Tasks
         * @type {number || null}
         */
        this.SuccessCount = null;

        /**
         * Number of Failed Tasks
         * @type {number || null}
         */
        this.FailedCount = null;

        /**
         * Total Number of Tasks
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.SuccessCount = 'SuccessCount' in params ? params.SuccessCount : null;
        this.FailedCount = 'FailedCount' in params ? params.FailedCount : null;
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DeleteProjectUsers request structure.
 * @class
 */
class DeleteProjectUsersRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * User ID list
         * @type {Array.<string> || null}
         */
        this.UserIds = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.UserIds = 'UserIds' in params ? params.UserIds : null;

    }
}

/**
 * Tenant basic information
 * @class
 */
class BaseTenant extends  AbstractModel {
    constructor(){
        super();

        /**
         * Tenant IDNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TenantId = null;

        /**
         * Tenant ID
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.TenantName = null;

        /**
         * Tenant display name, usually the Chinese name
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.DisplayName = null;

        /**
         * RemarksNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Description = null;

        /**
         * Tenant Main Account
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.OwnerUserId = null;

        /**
         * Tenant's additional configuration parameters, in JSON format string
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.Params = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TenantId = 'TenantId' in params ? params.TenantId : null;
        this.TenantName = 'TenantName' in params ? params.TenantName : null;
        this.DisplayName = 'DisplayName' in params ? params.DisplayName : null;
        this.Description = 'Description' in params ? params.Description : null;
        this.OwnerUserId = 'OwnerUserId' in params ? params.OwnerUserId : null;
        this.Params = 'Params' in params ? params.Params : null;

    }
}

/**
 * DescribeWorkflowExecuteById request structure.
 * @class
 */
class DescribeWorkflowExecuteByIdRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Workflow ID
         * @type {string || null}
         */
        this.WorkFlowIdList = null;

        /**
         * Page size
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Pagination index
         * @type {number || null}
         */
        this.PageSize = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.WorkFlowIdList = 'WorkFlowIdList' in params ? params.WorkFlowIdList : null;
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;

    }
}

/**
 * User production workflow list pagination
 * @class
 */
class WorkflowExtOpsDtoPage extends  AbstractModel {
    constructor(){
        super();

        /**
         * Total Record Count
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * Record List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<WorkflowExtOpsDto> || null}
         */
        this.Items = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;

        if (params.Items) {
            this.Items = new Array();
            for (let z in params.Items) {
                let obj = new WorkflowExtOpsDto();
                obj.deserialize(params.Items[z]);
                this.Items.push(obj);
            }
        }

    }
}

/**
 * RegisterEvent response structure.
 * @class
 */
class RegisterEventResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Success or FailureNote: This field may return null, indicating that no valid value can be obtained.
         * @type {BatchReturn || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new BatchReturn();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeRuleExecLog request structure.
 * @class
 */
class DescribeRuleExecLogRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Rule Execution ID
         * @type {number || null}
         */
        this.RuleExecId = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Rule Group Execution ID
         * @type {number || null}
         */
        this.RuleGroupExecId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.RuleExecId = 'RuleExecId' in params ? params.RuleExecId : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.RuleGroupExecId = 'RuleGroupExecId' in params ? params.RuleGroupExecId : null;

    }
}

/**
 * BatchRerunIntegrationTaskInstances response structure.
 * @class
 */
class BatchRerunIntegrationTaskInstancesResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Number of Successfully Operated Tasks
         * @type {number || null}
         */
        this.SuccessCount = null;

        /**
         * Number of Failed Tasks
         * @type {number || null}
         */
        this.FailedCount = null;

        /**
         * Total Number of Tasks
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * What is actually passed is taskId
         * @type {Array.<string> || null}
         */
        this.TaskNames = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.SuccessCount = 'SuccessCount' in params ? params.SuccessCount : null;
        this.FailedCount = 'FailedCount' in params ? params.FailedCount : null;
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.TaskNames = 'TaskNames' in params ? params.TaskNames : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Rule Group Pagination
 * @class
 */
class RuleGroupPage extends  AbstractModel {
    constructor(){
        super();

        /**
         * Record CountNote: This field may return null, indicating that no valid value can be obtained.
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * Rule Group List
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {Array.<RuleGroup> || null}
         */
        this.Items = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;

        if (params.Items) {
            this.Items = new Array();
            for (let z in params.Items) {
                let obj = new RuleGroup();
                obj.deserialize(params.Items[z]);
                this.Items.push(obj);
            }
        }

    }
}

/**
 * DescribeApproveList response structure.
 * @class
 */
class DescribeApproveListResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Pending Approval List Details
Note: This field may return null, indicating that no valid value can be obtained.
         * @type {DescribeApply || null}
         */
        this.Data = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.Data) {
            let obj = new DescribeApply();
            obj.deserialize(params.Data)
            this.Data = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeIntegrationTasks request structure.
 * @class
 */
class DescribeIntegrationTasksRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

        /**
         * Page n of Pagination
         * @type {number || null}
         */
        this.PageNumber = null;

        /**
         * Page size
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Query Filter
         * @type {Array.<Filter> || null}
         */
        this.Filters = null;

        /**
         * Sorting Field Information
         * @type {Array.<OrderField> || null}
         */
        this.OrderFields = null;

        /**
         * Start Time
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * End time
         * @type {string || null}
         */
        this.EndTime = null;

        /**
         * 201. Real-time synchronization, 202. Offline Synchronization Default is real-time
         * @type {number || null}
         */
        this.TaskType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;
        this.PageNumber = 'PageNumber' in params ? params.PageNumber : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;

        if (params.Filters) {
            this.Filters = new Array();
            for (let z in params.Filters) {
                let obj = new Filter();
                obj.deserialize(params.Filters[z]);
                this.Filters.push(obj);
            }
        }

        if (params.OrderFields) {
            this.OrderFields = new Array();
            for (let z in params.OrderFields) {
                let obj = new OrderField();
                obj.deserialize(params.OrderFields[z]);
                this.OrderFields.push(obj);
            }
        }
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;
        this.TaskType = 'TaskType' in params ? params.TaskType : null;

    }
}

/**
 * BatchMakeUpIntegrationTasks response structure.
 * @class
 */
class BatchMakeUpIntegrationTasksResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Number of Successfully Operated Tasks
         * @type {number || null}
         */
        this.SuccessCount = null;

        /**
         * Number of Failed Tasks
         * @type {number || null}
         */
        this.FailedCount = null;

        /**
         * Total Number of Tasks
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.SuccessCount = 'SuccessCount' in params ? params.SuccessCount : null;
        this.FailedCount = 'FailedCount' in params ? params.FailedCount : null;
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * SubmitCustomFunction request structure.
 * @class
 */
class SubmitCustomFunctionRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Function Unique Identifier
         * @type {string || null}
         */
        this.FunctionId = null;

        /**
         * Cluster Instance ID
         * @type {string || null}
         */
        this.ClusterIdentifier = null;

        /**
         * Remark Information
         * @type {string || null}
         */
        this.Comment = null;

        /**
         * Project ID
         * @type {string || null}
         */
        this.ProjectId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.FunctionId = 'FunctionId' in params ? params.FunctionId : null;
        this.ClusterIdentifier = 'ClusterIdentifier' in params ? params.ClusterIdentifier : null;
        this.Comment = 'Comment' in params ? params.Comment : null;
        this.ProjectId = 'ProjectId' in params ? params.ProjectId : null;

    }
}

/**
 * Task Lock Status
 * @class
 */
class TaskLockStatus extends  AbstractModel {
    constructor(){
        super();

        /**
         * Task ID
         * @type {string || null}
         */
        this.TaskId = null;

        /**
         * Lock Holder
         * @type {string || null}
         */
        this.Locker = null;

        /**
         * Is the current operating user the lock holder? 1 means yes, 0 means no
         * @type {number || null}
         */
        this.IsLocker = null;

        /**
         * Is lock contention possible? 1 means yes, 0 means no
         * @type {number || null}
         */
        this.IsRob = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TaskId = 'TaskId' in params ? params.TaskId : null;
        this.Locker = 'Locker' in params ? params.Locker : null;
        this.IsLocker = 'IsLocker' in params ? params.IsLocker : null;
        this.IsRob = 'IsRob' in params ? params.IsRob : null;

    }
}

/**
 * Event Consumption Record
 * @class
 */
class EventCaseConsumeLogOptDto extends  AbstractModel {
    constructor(){
        super();

        /**
         * Consumer ID\nNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ConsumeLogId = null;

        /**
         * Event Case ID\nNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.EventCaseId = null;

        /**
         * Consumer ID\nNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.ConsumerId = null;

        /**
         * Consumption Timestamp\nNote: This field may return null, indicating that no valid value can be obtained.
         * @type {string || null}
         */
        this.CreationTimestamp = null;

        /**
         * Task DetailsNote: This field may return null, indicating that no valid value can be obtained.
         * @type {TaskOpsDto || null}
         */
        this.ConsumerDetail = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ConsumeLogId = 'ConsumeLogId' in params ? params.ConsumeLogId : null;
        this.EventCaseId = 'EventCaseId' in params ? params.EventCaseId : null;
        this.ConsumerId = 'ConsumerId' in params ? params.ConsumerId : null;
        this.CreationTimestamp = 'CreationTimestamp' in params ? params.CreationTimestamp : null;

        if (params.ConsumerDetail) {
            let obj = new TaskOpsDto();
            obj.deserialize(params.ConsumerDetail)
            this.ConsumerDetail = obj;
        }

    }
}

module.exports = {
    DescribeEventConsumeTasksResponse: DescribeEventConsumeTasksResponse,
    CreateRuleTemplateResponse: CreateRuleTemplateResponse,
    AlarmInfo: AlarmInfo,
    DescribeBatchOperateTaskPage: DescribeBatchOperateTaskPage,
    DescribeIntegrationStatisticsResponse: DescribeIntegrationStatisticsResponse,
    UnlockIntegrationTaskResponse: UnlockIntegrationTaskResponse,
    DescribeReportTaskListRequest: DescribeReportTaskListRequest,
    DescribeStreamTaskLogListRequest: DescribeStreamTaskLogListRequest,
    DescribeIntegrationNodeResponse: DescribeIntegrationNodeResponse,
    LogContentInfo: LogContentInfo,
    ModifyIntegrationTaskRequest: ModifyIntegrationTaskRequest,
    DescribeRuleDimStatResponse: DescribeRuleDimStatResponse,
    RegisterEventListenerResponse: RegisterEventListenerResponse,
    DescribeTaskAlarmRegulationsResponse: DescribeTaskAlarmRegulationsResponse,
    ColumnBasicInfo: ColumnBasicInfo,
    DescribeWorkflowInfoByIdRequest: DescribeWorkflowInfoByIdRequest,
    CreateDataSourceRequest: CreateDataSourceRequest,
    IntegrationNodeSchemaMapping: IntegrationNodeSchemaMapping,
    DescribeTrendStatResponse: DescribeTrendStatResponse,
    DescribeRealTimeTaskSpeedRequest: DescribeRealTimeTaskSpeedRequest,
    DescribeRuleDimStatRequest: DescribeRuleDimStatRequest,
    DescribeRuleTemplatesResponse: DescribeRuleTemplatesResponse,
    CreateIntegrationNodeResponse: CreateIntegrationNodeResponse,
    TaskInnerInfo: TaskInnerInfo,
    CreateDsFolderResponse: CreateDsFolderResponse,
    UserFileInfo: UserFileInfo,
    FreezeOpsTasksRequest: FreezeOpsTasksRequest,
    InstanceOpsInfoPage: InstanceOpsInfoPage,
    DescribeRulesResponse: DescribeRulesResponse,
    WorkFlowExecuteDto: WorkFlowExecuteDto,
    RecordsSpeed: RecordsSpeed,
    ColumnLineageInfo: ColumnLineageInfo,
    SubmitTaskRequest: SubmitTaskRequest,
    ListInstancesResponse: ListInstancesResponse,
    DescribeTableMetasRequest: DescribeTableMetasRequest,
    RuleExecResultDetail: RuleExecResultDetail,
    DataSourceInfoPage: DataSourceInfoPage,
    OpsTaskInfoPage: OpsTaskInfoPage,
    DescribeRuleGroupExecResultsByPageRequest: DescribeRuleGroupExecResultsByPageRequest,
    EventCaseAuditLogOptDto: EventCaseAuditLogOptDto,
    DescribeTableLineageRequest: DescribeTableLineageRequest,
    KillOpsMakePlanInstancesRequest: KillOpsMakePlanInstancesRequest,
    DescribeEventCasesRequest: DescribeEventCasesRequest,
    BatchResumeIntegrationTasksResponse: BatchResumeIntegrationTasksResponse,
    DescribeFieldBasicInfoResponse: DescribeFieldBasicInfoResponse,
    ColumnItem: ColumnItem,
    RuleGroupExecResult: RuleGroupExecResult,
    AlarmEventInfo: AlarmEventInfo,
    BytesSpeed: BytesSpeed,
    CheckTaskNameExistRequest: CheckTaskNameExistRequest,
    ThresholdValue: ThresholdValue,
    DescribeFunctionKindsRequest: DescribeFunctionKindsRequest,
    DescribeFunctionKindsResponse: DescribeFunctionKindsResponse,
    DescribeTemplateDimCountRequest: DescribeTemplateDimCountRequest,
    ModifyIntegrationTaskResponse: ModifyIntegrationTaskResponse,
    DescribeDataSourceListRequest: DescribeDataSourceListRequest,
    DescribeInstanceByCycleResponse: DescribeInstanceByCycleResponse,
    DescribeIntegrationStatisticsRecordsTrendRequest: DescribeIntegrationStatisticsRecordsTrendRequest,
    DescribeDataCheckStatRequest: DescribeDataCheckStatRequest,
    TablePropertyScore: TablePropertyScore,
    SubscribeWebHook: SubscribeWebHook,
    GetOfflineInstanceListRequest: GetOfflineInstanceListRequest,
    TaskTypeMap: TaskTypeMap,
    InstanceLifeDetailDto: InstanceLifeDetailDto,
    Workflow: Workflow,
    DescribeRuleExecResultsRequest: DescribeRuleExecResultsRequest,
    InstanceDownloadLogInfo: InstanceDownloadLogInfo,
    EventCaseDTO: EventCaseDTO,
    InstanceOpsDto: InstanceOpsDto,
    SubmitWorkflowResponse: SubmitWorkflowResponse,
    TriggerEventRequest: TriggerEventRequest,
    WorkflowTaskCountOpsDto: WorkflowTaskCountOpsDto,
    StageCloudApiRequest: StageCloudApiRequest,
    DescribeDependOpsTasksRequest: DescribeDependOpsTasksRequest,
    RuleGroupTable: RuleGroupTable,
    DescribeInstanceLogRequest: DescribeInstanceLogRequest,
    DescribeRuleGroupSubscriptionResponse: DescribeRuleGroupSubscriptionResponse,
    BaseClusterInfo: BaseClusterInfo,
    DescribeIntegrationStatisticsTaskStatusTrendResponse: DescribeIntegrationStatisticsTaskStatusTrendResponse,
    DeleteResourceFileRequest: DeleteResourceFileRequest,
    SaveCustomFunctionRequest: SaveCustomFunctionRequest,
    DescribeSchedulerTaskTypeCntRequest: DescribeSchedulerTaskTypeCntRequest,
    MakePlanTaskOpsDto: MakePlanTaskOpsDto,
    RuleGroupExecStrategy: RuleGroupExecStrategy,
    ModifyWorkflowScheduleRequest: ModifyWorkflowScheduleRequest,
    CreateDsFolderRequest: CreateDsFolderRequest,
    RegisterEventRequest: RegisterEventRequest,
    InstanceDetailVO: InstanceDetailVO,
    MakePlanOpsDtoCollection: MakePlanOpsDtoCollection,
    DescribeTableMetasResponse: DescribeTableMetasResponse,
    UploadContentResponse: UploadContentResponse,
    RuleExecLog: RuleExecLog,
    RuleTemplate: RuleTemplate,
    DescribeRuleGroupsByPageRequest: DescribeRuleGroupsByPageRequest,
    BatchDeleteIntegrationTasksResponse: BatchDeleteIntegrationTasksResponse,
    SearchConditionInstanceNew: SearchConditionInstanceNew,
    DescribeThirdTaskRunLogRequest: DescribeThirdTaskRunLogRequest,
    BatchRerunIntegrationTaskInstancesRequest: BatchRerunIntegrationTaskInstancesRequest,
    DescribeWorkflowTaskCountResponse: DescribeWorkflowTaskCountResponse,
    TaskTag: TaskTag,
    TaskTypeCnt: TaskTypeCnt,
    SubmitCustomFunctionResponse: SubmitCustomFunctionResponse,
    DescribeTopTableStatRequest: DescribeTopTableStatRequest,
    SearchCondition: SearchCondition,
    Rule: Rule,
    DescribeTableLineageResponse: DescribeTableLineageResponse,
    ModifyRuleGroupSubscriptionRequest: ModifyRuleGroupSubscriptionRequest,
    DescribeDataSourceListResponse: DescribeDataSourceListResponse,
    AgentStatus: AgentStatus,
    DescribeInstanceLogDetailRequest: DescribeInstanceLogDetailRequest,
    BatchSuspendIntegrationTasksRequest: BatchSuspendIntegrationTasksRequest,
    DeleteDsFolderResponse: DeleteDsFolderResponse,
    DescribeDrInstancePageResponse: DescribeDrInstancePageResponse,
    MoveTasksToFolderRequest: MoveTasksToFolderRequest,
    MoveTasksToFolderResponse: MoveTasksToFolderResponse,
    UpdateWorkflowOwnerRequest: UpdateWorkflowOwnerRequest,
    DescribeSchedulerTaskTypeCntResponse: DescribeSchedulerTaskTypeCntResponse,
    DeleteCustomFunctionResponse: DeleteCustomFunctionResponse,
    DimensionScoreInfo: DimensionScoreInfo,
    DescribeTaskScriptResponse: DescribeTaskScriptResponse,
    InstancePageVO: InstancePageVO,
    CollectionInstanceOpsDto: CollectionInstanceOpsDto,
    DrInstanceOpsDtoPage: DrInstanceOpsDtoPage,
    TableLineageInfo: TableLineageInfo,
    DescribeSchedulerInstanceStatusResponse: DescribeSchedulerInstanceStatusResponse,
    CountOpsInstanceStateRequest: CountOpsInstanceStateRequest,
    EventCaseOpsDto: EventCaseOpsDto,
    CreateTaskVersionDsResponse: CreateTaskVersionDsResponse,
    InstanceNodeInfo: InstanceNodeInfo,
    BatchUpdateIntegrationTasksRequest: BatchUpdateIntegrationTasksRequest,
    BatchModifyOpsOwnersRequest: BatchModifyOpsOwnersRequest,
    ModifyTaskNameResponse: ModifyTaskNameResponse,
    BatchDeleteOpsTasksRequest: BatchDeleteOpsTasksRequest,
    ResumeIntegrationTaskResponse: ResumeIntegrationTaskResponse,
    WorkflowExtOpsDto: WorkflowExtOpsDto,
    LineageParamRecord: LineageParamRecord,
    BatchResult: BatchResult,
    InstanceLogVO: InstanceLogVO,
    StartTaskInfo: StartTaskInfo,
    DescribeIntegrationStatisticsInstanceTrendResponse: DescribeIntegrationStatisticsInstanceTrendResponse,
    DescribeInstanceLogListRequest: DescribeInstanceLogListRequest,
    IntegrationNodeInfo: IntegrationNodeInfo,
    DescribeRuleGroupResponse: DescribeRuleGroupResponse,
    DeleteDataSourcesResponse: DeleteDataSourcesResponse,
    DescribeBatchOperateTaskDTO: DescribeBatchOperateTaskDTO,
    DescribeReportTaskListResponse: DescribeReportTaskListResponse,
    DescribeOpsMakePlansResponse: DescribeOpsMakePlansResponse,
    EventCaseConsumeLogOptDtoCollection: EventCaseConsumeLogOptDtoCollection,
    DeleteFileRequest: DeleteFileRequest,
    DeleteDataSourcesRequest: DeleteDataSourcesRequest,
    ModifyTaskAlarmRegularRequest: ModifyTaskAlarmRegularRequest,
    SubmitSqlTaskResponse: SubmitSqlTaskResponse,
    DescribeColumnsMetaRequest: DescribeColumnsMetaRequest,
    DescribeOrganizationalFunctionsRequest: DescribeOrganizationalFunctionsRequest,
    DescribeRuleTemplateResponse: DescribeRuleTemplateResponse,
    DescribeDependTaskListsRequest: DescribeDependTaskListsRequest,
    DatabaseMeta: DatabaseMeta,
    DescribeAllByFolderNewRequest: DescribeAllByFolderNewRequest,
    DescribeTaskRunHistoryResponse: DescribeTaskRunHistoryResponse,
    BatchStopWorkflowsByIdsRequest: BatchStopWorkflowsByIdsRequest,
    DescribeBatchOperateTaskResponse: DescribeBatchOperateTaskResponse,
    CommitIntegrationTaskRequest: CommitIntegrationTaskRequest,
    DescribeTableInfoListRequest: DescribeTableInfoListRequest,
    DescribeQualityScoreRequest: DescribeQualityScoreRequest,
    RunForceSucScheduleInstancesResponse: RunForceSucScheduleInstancesResponse,
    CommitIntegrationTaskResponse: CommitIntegrationTaskResponse,
    Apply: Apply,
    IntegrationTaskInfo: IntegrationTaskInfo,
    DeleteResourceFilesRequest: DeleteResourceFilesRequest,
    DeleteResourceFileResponse: DeleteResourceFileResponse,
    SubmitTaskResponse: SubmitTaskResponse,
    ModifyApproveStatusResponse: ModifyApproveStatusResponse,
    DescribeAlarmEventsResponse: DescribeAlarmEventsResponse,
    DescribeInstanceLogListResponse: DescribeInstanceLogListResponse,
    RuleGroup: RuleGroup,
    DescribeTableQualityDetailsRequest: DescribeTableQualityDetailsRequest,
    DescribeScheduleInstancesResponse: DescribeScheduleInstancesResponse,
    DeleteProjectParamDsResponse: DeleteProjectParamDsResponse,
    DescribeOpsWorkflowsRequest: DescribeOpsWorkflowsRequest,
    CreateOfflineTaskResponse: CreateOfflineTaskResponse,
    DescribeColumnLineageRequest: DescribeColumnLineageRequest,
    CreateTaskAlarmRegularRequest: CreateTaskAlarmRegularRequest,
    ModifyRuleRequest: ModifyRuleRequest,
    BatchReturn: BatchReturn,
    FindAllFolderResponse: FindAllFolderResponse,
    ResourcePathTree: ResourcePathTree,
    DescribeRuleExecLogResponse: DescribeRuleExecLogResponse,
    ParamInfo: ParamInfo,
    DescribeDsFolderTreeRequest: DescribeDsFolderTreeRequest,
    TableMetaProperty: TableMetaProperty,
    BatchDeleteIntegrationTasksRequest: BatchDeleteIntegrationTasksRequest,
    KillOpsMakePlanInstancesResponse: KillOpsMakePlanInstancesResponse,
    TaskLogRequest: TaskLogRequest,
    OpsTaskLinkInfoDto: OpsTaskLinkInfoDto,
    DescribeIntegrationStatisticsTaskStatusRequest: DescribeIntegrationStatisticsTaskStatusRequest,
    GetFileInfoResponse: GetFileInfoResponse,
    BaseUser: BaseUser,
    InstanceCondition: InstanceCondition,
    ReportTaskDetail: ReportTaskDetail,
    FreezeOpsTasksResponse: FreezeOpsTasksResponse,
    IntegrationNodeMapping: IntegrationNodeMapping,
    ColumnAggregationLineage: ColumnAggregationLineage,
    ModifyRuleGroupSubscriptionResponse: ModifyRuleGroupSubscriptionResponse,
    CreateWorkflowDsResponse: CreateWorkflowDsResponse,
    CreateHiveTableByDDLResponse: CreateHiveTableByDDLResponse,
    DescribeTaskByCycleResponse: DescribeTaskByCycleResponse,
    DescribeExecStrategyResponse: DescribeExecStrategyResponse,
    DescribeSuccessorOpsTaskInfosResponse: DescribeSuccessorOpsTaskInfosResponse,
    DeleteResourceResponse: DeleteResourceResponse,
    ModifyRuleResponse: ModifyRuleResponse,
    DescribeInstanceLogFileResponse: DescribeInstanceLogFileResponse,
    PairDto: PairDto,
    ModifyTaskLinksRequest: ModifyTaskLinksRequest,
    DeleteTaskDsResponse: DeleteTaskDsResponse,
    DescribeAllByFolderNewResponse: DescribeAllByFolderNewResponse,
    DescribeDsParentFolderTreeRequest: DescribeDsParentFolderTreeRequest,
    KillScheduleInstancesResponse: KillScheduleInstancesResponse,
    UnlockIntegrationTaskRequest: UnlockIntegrationTaskRequest,
    DescribeWorkflowTaskCountRequest: DescribeWorkflowTaskCountRequest,
    DescribeInstanceListRequest: DescribeInstanceListRequest,
    ModifyWorkflowScheduleResponse: ModifyWorkflowScheduleResponse,
    DeleteCustomFunctionRequest: DeleteCustomFunctionRequest,
    DrInstanceOpsDto: DrInstanceOpsDto,
    InstanceLogInfo: InstanceLogInfo,
    GetFileInfoRequest: GetFileInfoRequest,
    TableLineageBaseInfo: TableLineageBaseInfo,
    InstanceList: InstanceList,
    SqlExpressionTable: SqlExpressionTable,
    OrderFieldOptional: OrderFieldOptional,
    DryRunDIOfflineTaskRequest: DryRunDIOfflineTaskRequest,
    CreateOfflineTaskRequest: CreateOfflineTaskRequest,
    DescribeIntegrationStatisticsRecordsTrendResponse: DescribeIntegrationStatisticsRecordsTrendResponse,
    EventOpsDto: EventOpsDto,
    DescribeFolderWorkflowListData: DescribeFolderWorkflowListData,
    ScreenTaskInfo: ScreenTaskInfo,
    TableConfig: TableConfig,
    FilterOptional: FilterOptional,
    TaskInstanceCountDto: TaskInstanceCountDto,
    TableScoreStatisticsInfo: TableScoreStatisticsInfo,
    BatchForceSuccessIntegrationTaskInstancesResponse: BatchForceSuccessIntegrationTaskInstancesResponse,
    InstanceLifeCycleOpsDto: InstanceLifeCycleOpsDto,
    AlarmReceiverInfo: AlarmReceiverInfo,
    GeneralTaskParam: GeneralTaskParam,
    DescribeTableBasicInfoResponse: DescribeTableBasicInfoResponse,
    Property: Property,
    ModifyRuleTemplateRequest: ModifyRuleTemplateRequest,
    DescribeRuleExecStatResponse: DescribeRuleExecStatResponse,
    TaskByCycle: TaskByCycle,
    DagInstancesResponse: DagInstancesResponse,
    DimensionScore: DimensionScore,
    GetInstanceLogResponse: GetInstanceLogResponse,
    DescribeTableLineageInfoRequest: DescribeTableLineageInfoRequest,
    CreateTaskFolderRequest: CreateTaskFolderRequest,
    EngineTaskInfo: EngineTaskInfo,
    IntegrationNodeDetail: IntegrationNodeDetail,
    DescribeEventResponse: DescribeEventResponse,
    DescribeOpsMakePlanInstancesRequest: DescribeOpsMakePlanInstancesRequest,
    GenHiveTableDDLSqlRequest: GenHiveTableDDLSqlRequest,
    BatchCreateIntegrationTaskAlarmsRequest: BatchCreateIntegrationTaskAlarmsRequest,
    QualityScore: QualityScore,
    LockIntegrationTaskResponse: LockIntegrationTaskResponse,
    KillScheduleInstancesRequest: KillScheduleInstancesRequest,
    SearchConditionNew: SearchConditionNew,
    BatchStopOpsTasksRequest: BatchStopOpsTasksRequest,
    DescribeFunctionTypesResponse: DescribeFunctionTypesResponse,
    ModifyRuleTemplateResponse: ModifyRuleTemplateResponse,
    BatchUpdateIntegrationTasksResponse: BatchUpdateIntegrationTasksResponse,
    TaskLogResponse: TaskLogResponse,
    QuietPeriod: QuietPeriod,
    AdhocDetail: AdhocDetail,
    DescribeInstanceLastLogRequest: DescribeInstanceLastLogRequest,
    DescribeEventRequest: DescribeEventRequest,
    TableQualityDetailPage: TableQualityDetailPage,
    TaskTypeOpsDto: TaskTypeOpsDto,
    BatchModifyOpsOwnersResponse: BatchModifyOpsOwnersResponse,
    CreateTaskAlarmRegularResponse: CreateTaskAlarmRegularResponse,
    DeleteRuleTemplateRequest: DeleteRuleTemplateRequest,
    DescribeOpsMakePlanTasksRequest: DescribeOpsMakePlanTasksRequest,
    TaskVersionInstance: TaskVersionInstance,
    TableInfo: TableInfo,
    DescribeProjectRequest: DescribeProjectRequest,
    GetTaskInstanceResponse: GetTaskInstanceResponse,
    CreateIntegrationTaskResponse: CreateIntegrationTaskResponse,
    DescribeIntegrationTasksResponse: DescribeIntegrationTasksResponse,
    DeleteProjectUsersResponse: DeleteProjectUsersResponse,
    DescribeAlarmReceiverRequest: DescribeAlarmReceiverRequest,
    InstanceVO: InstanceVO,
    SchedulerTaskInstanceInfo: SchedulerTaskInstanceInfo,
    DescribeSchedulerTaskCntByStatusResponse: DescribeSchedulerTaskCntByStatusResponse,
    TaskExtInfo: TaskExtInfo,
    ModifyWorkflowInfoRequest: ModifyWorkflowInfoRequest,
    MakePlanOpsDto: MakePlanOpsDto,
    SubmitWorkflow: SubmitWorkflow,
    BatchResumeIntegrationTasksRequest: BatchResumeIntegrationTasksRequest,
    OperationOpsDto: OperationOpsDto,
    DeleteTaskAlarmRegularResponse: DeleteTaskAlarmRegularResponse,
    DeleteWorkflowByIdRequest: DeleteWorkflowByIdRequest,
    ProjectBaseInfoOpsRequest: ProjectBaseInfoOpsRequest,
    DeleteRuleResponse: DeleteRuleResponse,
    MakePlanTaskOpsDtoCollection: MakePlanTaskOpsDtoCollection,
    SimpleColumnInfo: SimpleColumnInfo,
    CreateWorkflowDsRequest: CreateWorkflowDsRequest,
    CreateTaskResponse: CreateTaskResponse,
    TableQualityDetail: TableQualityDetail,
    BatchStopIntegrationTasksResponse: BatchStopIntegrationTasksResponse,
    DescribeApproveTypeListRequest: DescribeApproveTypeListRequest,
    DeleteIntegrationNodeResponse: DeleteIntegrationNodeResponse,
    DescribeDataSourceInfoListRequest: DescribeDataSourceInfoListRequest,
    DescribeIntegrationNodeRequest: DescribeIntegrationNodeRequest,
    SetTaskAlarmNewResponse: SetTaskAlarmNewResponse,
    GetOfflineDIInstanceListResponse: GetOfflineDIInstanceListResponse,
    DescribeDatasourceResponse: DescribeDatasourceResponse,
    DescribeStatisticInstanceStatusTrendOpsRequest: DescribeStatisticInstanceStatusTrendOpsRequest,
    RuleExecConfig: RuleExecConfig,
    SuspendIntegrationTaskResponse: SuspendIntegrationTaskResponse,
    ListInstancesRequest: ListInstancesRequest,
    DescribeSchedulerRunTimeInstanceCntByStatusResponse: DescribeSchedulerRunTimeInstanceCntByStatusResponse,
    CreateTaskFolderResponse: CreateTaskFolderResponse,
    RunForceSucScheduleInstancesRequest: RunForceSucScheduleInstancesRequest,
    DescribeQualityScoreResponse: DescribeQualityScoreResponse,
    DescribeRulesByPageResponse: DescribeRulesByPageResponse,
    DescribeDsParentFolderTreeResponse: DescribeDsParentFolderTreeResponse,
    TopTableStatItem: TopTableStatItem,
    DescribeEventConsumeTasksRequest: DescribeEventConsumeTasksRequest,
    DescribeDataSourceInfoListResponse: DescribeDataSourceInfoListResponse,
    InstanceStatisticInfo: InstanceStatisticInfo,
    CommitRuleGroupTaskRequest: CommitRuleGroupTaskRequest,
    CheckIntegrationNodeNameExistsRequest: CheckIntegrationNodeNameExistsRequest,
    InstanceLifeCycleVO: InstanceLifeCycleVO,
    DescribeReportTaskDetailRequest: DescribeReportTaskDetailRequest,
    GetOfflineInstanceListResponse: GetOfflineInstanceListResponse,
    DescribeOpsMakePlansRequest: DescribeOpsMakePlansRequest,
    CreateOpsMakePlanRequest: CreateOpsMakePlanRequest,
    DescribeDimensionScoreResponse: DescribeDimensionScoreResponse,
    ScriptRequestInfo: ScriptRequestInfo,
    DescribeOrganizationalFunctionsResponse: DescribeOrganizationalFunctionsResponse,
    CollectionFolderOpsDto: CollectionFolderOpsDto,
    FreezeTasksByWorkflowIdsRequest: FreezeTasksByWorkflowIdsRequest,
    DescribeTaskByCycleReportResponse: DescribeTaskByCycleReportResponse,
    BatchDeleteOpsTasksResponse: BatchDeleteOpsTasksResponse,
    CheckIntegrationTaskNameExistsResponse: CheckIntegrationTaskNameExistsResponse,
    BatchOperateResultOpsDto: BatchOperateResultOpsDto,
    DeleteRuleRequest: DeleteRuleRequest,
    ApproveType: ApproveType,
    TableNameFilter: TableNameFilter,
    RealTimeTaskInstanceNodeInfo: RealTimeTaskInstanceNodeInfo,
    DeleteResourceFilesResponse: DeleteResourceFilesResponse,
    DescribeFieldBasicInfoRequest: DescribeFieldBasicInfoRequest,
    DiagnoseProRequest: DiagnoseProRequest,
    CreateOpsMakePlanResponse: CreateOpsMakePlanResponse,
    DescribeStreamTaskLogListResponse: DescribeStreamTaskLogListResponse,
    DlcDataGovernPolicy: DlcDataGovernPolicy,
    DescribeRuleGroupExecResultsByPageResponse: DescribeRuleGroupExecResultsByPageResponse,
    DescribeInstanceByCycleRequest: DescribeInstanceByCycleRequest,
    GetIntegrationNodeColumnSchemaRequest: GetIntegrationNodeColumnSchemaRequest,
    DeleteWorkflowByIdResponse: DeleteWorkflowByIdResponse,
    RulePage: RulePage,
    DeleteIntegrationNodeRequest: DeleteIntegrationNodeRequest,
    ModifyIntegrationNodeResponse: ModifyIntegrationNodeResponse,
    DescribeIntegrationStatisticsTaskStatusTrendRequest: DescribeIntegrationStatisticsTaskStatusTrendRequest,
    DescribeTableMetaRequest: DescribeTableMetaRequest,
    DescribeWorkflowInfoByIdResponse: DescribeWorkflowInfoByIdResponse,
    OpsTaskCanvasInfoList: OpsTaskCanvasInfoList,
    SubmitTaskTestRunResponse: SubmitTaskTestRunResponse,
    ModifyDimensionWeightResponse: ModifyDimensionWeightResponse,
    ModifyTaskAlarmRegularResponse: ModifyTaskAlarmRegularResponse,
    InstanceSearchCondition: InstanceSearchCondition,
    CreateRuleResponse: CreateRuleResponse,
    ModifyTaskLinksResponse: ModifyTaskLinksResponse,
    DescribeTaskRunHistoryRequest: DescribeTaskRunHistoryRequest,
    BatchMakeUpIntegrationTasksRequest: BatchMakeUpIntegrationTasksRequest,
    OfflineInstance: OfflineInstance,
    BatchCreateTaskVersionDTO: BatchCreateTaskVersionDTO,
    CreateTaskVersionDsRequest: CreateTaskVersionDsRequest,
    DeleteOfflineTaskRequest: DeleteOfflineTaskRequest,
    WeightInfo: WeightInfo,
    DescribeDatabaseInfoListResponse: DescribeDatabaseInfoListResponse,
    ModifyDsFolderResponse: ModifyDsFolderResponse,
    CommonContent: CommonContent,
    DescribeTableScoreTrendResponse: DescribeTableScoreTrendResponse,
    ModifyIntegrationNodeRequest: ModifyIntegrationNodeRequest,
    ModifyMonitorStatusResponse: ModifyMonitorStatusResponse,
    DescribeRuleTemplatesByPageResponse: DescribeRuleTemplatesByPageResponse,
    DescribeTemplateDimCountResponse: DescribeTemplateDimCountResponse,
    DescribeFunctionTypesRequest: DescribeFunctionTypesRequest,
    DimensionCount: DimensionCount,
    AttributeItemDTO: AttributeItemDTO,
    DescribeInstanceLogResponse: DescribeInstanceLogResponse,
    ApproveModify: ApproveModify,
    DescribeOpsMakePlanTasksResponse: DescribeOpsMakePlanTasksResponse,
    InstanceLogList: InstanceLogList,
    ModifyMonitorStatusRequest: ModifyMonitorStatusRequest,
    DescribeColumnLineageResponse: DescribeColumnLineageResponse,
    DescribeIntegrationTaskRequest: DescribeIntegrationTaskRequest,
    DiagnoseRep: DiagnoseRep,
    DescribeWorkflowListByProjectIdResponse: DescribeWorkflowListByProjectIdResponse,
    DeleteFilePathRequest: DeleteFilePathRequest,
    DescribeRulesByPageRequest: DescribeRulesByPageRequest,
    DescribeTopTableStatResponse: DescribeTopTableStatResponse,
    ProdSchedulerTask: ProdSchedulerTask,
    WorkflowSchedulerOpsDto: WorkflowSchedulerOpsDto,
    SourceFieldInfo: SourceFieldInfo,
    GetTaskInstanceRequest: GetTaskInstanceRequest,
    DeleteDsFolderRequest: DeleteDsFolderRequest,
    SaveCustomFunctionResponse: SaveCustomFunctionResponse,
    ModifyDsFolderRequest: ModifyDsFolderRequest,
    AdhocRecord: AdhocRecord,
    TriggerDsEventResponse: TriggerDsEventResponse,
    EventBatchCaseDTO: EventBatchCaseDTO,
    CreateTaskRequest: CreateTaskRequest,
    DescribeDatabaseMetasRequest: DescribeDatabaseMetasRequest,
    SearchColumnDocVO: SearchColumnDocVO,
    SimpleTaskInfo: SimpleTaskInfo,
    DescribeSchedulerTaskCntByStatusRequest: DescribeSchedulerTaskCntByStatusRequest,
    DescribeRealTimeTaskInstanceNodeInfoRequest: DescribeRealTimeTaskInstanceNodeInfoRequest,
    EventCaseAuditLogVOCollection: EventCaseAuditLogVOCollection,
    DescribeDependTaskListsResponse: DescribeDependTaskListsResponse,
    CreateHiveTableResponse: CreateHiveTableResponse,
    RuleTemplatePage: RuleTemplatePage,
    ModifyDataSourceResponse: ModifyDataSourceResponse,
    DescribeTaskByStatusReportResponse: DescribeTaskByStatusReportResponse,
    ModifyDimensionWeightRequest: ModifyDimensionWeightRequest,
    CreateMakeDatetimeInfo: CreateMakeDatetimeInfo,
    InstanceApiOpsRequest: InstanceApiOpsRequest,
    SubmitSqlTaskRequest: SubmitSqlTaskRequest,
    DescribeTaskLockStatusResponse: DescribeTaskLockStatusResponse,
    ReportTaskListInfo: ReportTaskListInfo,
    RemoveWorkflowDsRequest: RemoveWorkflowDsRequest,
    BatchKillIntegrationTaskInstancesRequest: BatchKillIntegrationTaskInstancesRequest,
    DeleteTaskDsRequest: DeleteTaskDsRequest,
    BatchStopOpsTasksResponse: BatchStopOpsTasksResponse,
    InstanceLogInfoOpsDto: InstanceLogInfoOpsDto,
    DeleteFilePathResponse: DeleteFilePathResponse,
    FailMessage: FailMessage,
    RunRerunScheduleInstancesResponse: RunRerunScheduleInstancesResponse,
    DependencyConfig: DependencyConfig,
    RobAndLockIntegrationTaskRequest: RobAndLockIntegrationTaskRequest,
    ModifyTaskInfoResponse: ModifyTaskInfoResponse,
    DataCheckStat: DataCheckStat,
    CreateRuleRequest: CreateRuleRequest,
    IntegrationNodeSchema: IntegrationNodeSchema,
    DescribeColumnsMetaResponse: DescribeColumnsMetaResponse,
    DescribeRuleExecResultsResponse: DescribeRuleExecResultsResponse,
    QualityScoreTrend: QualityScoreTrend,
    DeleteFileResponse: DeleteFileResponse,
    ResumeIntegrationTaskRequest: ResumeIntegrationTaskRequest,
    ModifyDataSourceRequest: ModifyDataSourceRequest,
    TriggerEventResponse: TriggerEventResponse,
    TaskAlarmInfo: TaskAlarmInfo,
    ModifyApproveStatusRequest: ModifyApproveStatusRequest,
    DescribeOperateOpsTasksResponse: DescribeOperateOpsTasksResponse,
    DescribeResourceManagePathTreesRequest: DescribeResourceManagePathTreesRequest,
    FunctionResource: FunctionResource,
    DescribeTableQualityDetailsResponse: DescribeTableQualityDetailsResponse,
    CommonIdOpsDto: CommonIdOpsDto,
    BatchStopWorkflowsByIdsResponse: BatchStopWorkflowsByIdsResponse,
    RuleGroupSchedulerInfo: RuleGroupSchedulerInfo,
    DatasourceBaseInfo: DatasourceBaseInfo,
    LinkOpsDto: LinkOpsDto,
    DlcMergeManifestsInfo: DlcMergeManifestsInfo,
    DescribeWorkflowListByProjectIdRequest: DescribeWorkflowListByProjectIdRequest,
    AlarmIndicatorInfo: AlarmIndicatorInfo,
    DescribeStatisticInstanceStatusTrendOpsResponse: DescribeStatisticInstanceStatusTrendOpsResponse,
    TableMeta: TableMeta,
    CountOpsInstanceStateResponse: CountOpsInstanceStateResponse,
    SubscribeReceiver: SubscribeReceiver,
    TriggerDsEventRequest: TriggerDsEventRequest,
    DescribeQualityScoreTrendRequest: DescribeQualityScoreTrendRequest,
    RobLockState: RobLockState,
    SubmitTaskTestRunRequest: SubmitTaskTestRunRequest,
    DescribeAlarmEventsRequest: DescribeAlarmEventsRequest,
    CompareResult: CompareResult,
    CheckAlarmRegularNameExistResponse: CheckAlarmRegularNameExistResponse,
    DeleteProjectParamDsRequest: DeleteProjectParamDsRequest,
    Content: Content,
    SpeedValue: SpeedValue,
    FunctionVersion: FunctionVersion,
    RuleExecDateStat: RuleExecDateStat,
    DescribeThirdTaskRunLogResponse: DescribeThirdTaskRunLogResponse,
    DescribeTaskAlarmRegulationsRequest: DescribeTaskAlarmRegulationsRequest,
    CreateCustomFunctionResponse: CreateCustomFunctionResponse,
    ScreenInstanceInfo: ScreenInstanceInfo,
    ModifyTaskInfoRequest: ModifyTaskInfoRequest,
    DescribeOperateOpsTasksRequest: DescribeOperateOpsTasksRequest,
    DataSourceInfo: DataSourceInfo,
    DescribeTableMetaResponse: DescribeTableMetaResponse,
    TaskOpsDto: TaskOpsDto,
    DescribeOfflineTaskTokenRequest: DescribeOfflineTaskTokenRequest,
    DescribeRuleExecDetailRequest: DescribeRuleExecDetailRequest,
    DeleteResourceRequest: DeleteResourceRequest,
    RuleGroupSubscribe: RuleGroupSubscribe,
    RegisterEventListenerRequest: RegisterEventListenerRequest,
    BatchRunOpsTaskResponse: BatchRunOpsTaskResponse,
    CheckIntegrationNodeNameExistsResponse: CheckIntegrationNodeNameExistsResponse,
    RobAndLockIntegrationTaskResponse: RobAndLockIntegrationTaskResponse,
    MakePlanInstanceOpsDtoCollection: MakePlanInstanceOpsDtoCollection,
    DeleteTaskAlarmRegularRequest: DeleteTaskAlarmRegularRequest,
    CompareRule: CompareRule,
    CompareRuleItem: CompareRuleItem,
    DescribeInstanceLogFileRequest: DescribeInstanceLogFileRequest,
    DeleteOfflineTaskResponse: DeleteOfflineTaskResponse,
    IntegrationInstanceLog: IntegrationInstanceLog,
    TaskScriptContent: TaskScriptContent,
    IntegrationStatisticsTrendResult: IntegrationStatisticsTrendResult,
    DescribeDrInstancePageRequest: DescribeDrInstancePageRequest,
    RuntimeInstanceCntTop: RuntimeInstanceCntTop,
    ColumnMeta: ColumnMeta,
    GenHiveTableDDLSqlResponse: GenHiveTableDDLSqlResponse,
    DescribeRuleGroupTableRequest: DescribeRuleGroupTableRequest,
    CheckAlarmRegularNameExistRequest: CheckAlarmRegularNameExistRequest,
    ColumnData: ColumnData,
    RuleExecResult: RuleExecResult,
    Table: Table,
    DescribeWorkflowExecuteByIdResponse: DescribeWorkflowExecuteByIdResponse,
    CreateIntegrationTaskRequest: CreateIntegrationTaskRequest,
    BatchRunOpsTaskRequest: BatchRunOpsTaskRequest,
    FieldConfig: FieldConfig,
    DescribeRealTimeTaskMetricOverviewRequest: DescribeRealTimeTaskMetricOverviewRequest,
    DescribeDatabaseMetasResponse: DescribeDatabaseMetasResponse,
    OfflineTaskAddParam: OfflineTaskAddParam,
    FreezeTasksByWorkflowIdsResponse: FreezeTasksByWorkflowIdsResponse,
    SubmitWorkflowRequest: SubmitWorkflowRequest,
    DescribeResourceManagePathTreesResponse: DescribeResourceManagePathTreesResponse,
    RunRerunScheduleInstancesRequest: RunRerunScheduleInstancesRequest,
    RuleGroupTableInnerInfo: RuleGroupTableInnerInfo,
    DeleteIntegrationTaskRequest: DeleteIntegrationTaskRequest,
    CompareResultItem: CompareResultItem,
    ModifyTaskScriptRequest: ModifyTaskScriptRequest,
    CreateIntegrationNodeRequest: CreateIntegrationNodeRequest,
    DescribeTableSchemaInfoRequest: DescribeTableSchemaInfoRequest,
    DescribeTableScoreTrendRequest: DescribeTableScoreTrendRequest,
    RuleExecResultPage: RuleExecResultPage,
    DescribeTaskByStatusReportRequest: DescribeTaskByStatusReportRequest,
    ModifyExecStrategyRequest: ModifyExecStrategyRequest,
    BatchForceSuccessIntegrationTaskInstancesRequest: BatchForceSuccessIntegrationTaskInstancesRequest,
    DescribeRealTimeTaskInstanceNodeInfoResponse: DescribeRealTimeTaskInstanceNodeInfoResponse,
    DescribeTaskByCycleReportRequest: DescribeTaskByCycleReportRequest,
    DescribeInstanceLogDetailResponse: DescribeInstanceLogDetailResponse,
    DescribeApproveListRequest: DescribeApproveListRequest,
    DescribeBatchOperateTaskRequest: DescribeBatchOperateTaskRequest,
    StartIntegrationTaskResponse: StartIntegrationTaskResponse,
    CommitRuleGroupTaskResponse: CommitRuleGroupTaskResponse,
    Project: Project,
    DescribeRealTimeTaskMetricOverviewResponse: DescribeRealTimeTaskMetricOverviewResponse,
    DescribeOfflineTaskTokenResponse: DescribeOfflineTaskTokenResponse,
    DescribeTableInfoListResponse: DescribeTableInfoListResponse,
    RemoveWorkflowDsResponse: RemoveWorkflowDsResponse,
    GetOfflineDIInstanceListRequest: GetOfflineDIInstanceListRequest,
    ModifyExecStrategyResponse: ModifyExecStrategyResponse,
    BatchStartIntegrationTasksRequest: BatchStartIntegrationTasksRequest,
    CreateCustomFunctionRequest: CreateCustomFunctionRequest,
    DescribeTableBasicInfoRequest: DescribeTableBasicInfoRequest,
    DescribeDatasourceRequest: DescribeDatasourceRequest,
    RuleExecStat: RuleExecStat,
    BatchOperationOpsDto: BatchOperationOpsDto,
    DescribeEventCasesResponse: DescribeEventCasesResponse,
    DescribeTableSchemaInfoResponse: DescribeTableSchemaInfoResponse,
    DiagnoseProResponse: DiagnoseProResponse,
    DescribeReportTaskDetailResponse: DescribeReportTaskDetailResponse,
    UpdateWorkflowOwnerResponse: UpdateWorkflowOwnerResponse,
    SetTaskAlarmNewRequest: SetTaskAlarmNewRequest,
    DescribeInstanceListResponse: DescribeInstanceListResponse,
    DescribeOpsInstanceLogListRequest: DescribeOpsInstanceLogListRequest,
    UploadContentRequest: UploadContentRequest,
    StartIntegrationTaskRequest: StartIntegrationTaskRequest,
    DescribeProjectResponse: DescribeProjectResponse,
    StopIntegrationTaskRequest: StopIntegrationTaskRequest,
    FunctionTypeOrKind: FunctionTypeOrKind,
    DescribeApply: DescribeApply,
    CreateDataSourceResponse: CreateDataSourceResponse,
    TaskByStatus: TaskByStatus,
    DescribeFolderWorkflowListResponse: DescribeFolderWorkflowListResponse,
    RecordField: RecordField,
    DescribeIntegrationVersionNodesInfoResponse: DescribeIntegrationVersionNodesInfoResponse,
    DescribeRulesRequest: DescribeRulesRequest,
    DescribeRuleResponse: DescribeRuleResponse,
    DescribeTaskScriptRequest: DescribeTaskScriptRequest,
    SchemaDetail: SchemaDetail,
    DescribeRuleRequest: DescribeRuleRequest,
    BatchOpsDTO: BatchOpsDTO,
    DescribeAlarmReceiverResponse: DescribeAlarmReceiverResponse,
    DescribeTableLineageInfoResponse: DescribeTableLineageInfoResponse,
    DlcExpiredSnapshotsInfo: DlcExpiredSnapshotsInfo,
    DescribeWorkflowCanvasInfoResponse: DescribeWorkflowCanvasInfoResponse,
    Partition: Partition,
    RuleDimCnt: RuleDimCnt,
    BatchOperateResult: BatchOperateResult,
    ModifyTaskScriptResponse: ModifyTaskScriptResponse,
    DescribeDimensionScoreRequest: DescribeDimensionScoreRequest,
    FindAllFolderRequest: FindAllFolderRequest,
    FolderDsDto: FolderDsDto,
    BatchStartIntegrationTasksResponse: BatchStartIntegrationTasksResponse,
    DescribeIntegrationVersionNodesInfoRequest: DescribeIntegrationVersionNodesInfoRequest,
    DescribeSuccessorOpsTaskInfosRequest: DescribeSuccessorOpsTaskInfosRequest,
    DescribeSchedulerInstanceStatusRequest: DescribeSchedulerInstanceStatusRequest,
    DescribeScheduleInstancesRequest: DescribeScheduleInstancesRequest,
    DescribeRealTimeTaskSpeedResponse: DescribeRealTimeTaskSpeedResponse,
    ModifyWorkflowInfoResponse: ModifyWorkflowInfoResponse,
    DescribeFolderWorkflowListRequest: DescribeFolderWorkflowListRequest,
    RuleFieldConfig: RuleFieldConfig,
    CheckTaskNameExistResponse: CheckTaskNameExistResponse,
    DescribeSchedulerRunTimeInstanceCntByStatusRequest: DescribeSchedulerRunTimeInstanceCntByStatusRequest,
    StrToStrMap: StrToStrMap,
    WorkflowCanvasOpsDto: WorkflowCanvasOpsDto,
    DlcRemoveOrphanFilesInfo: DlcRemoveOrphanFilesInfo,
    LockIntegrationTaskRequest: LockIntegrationTaskRequest,
    BatchStopIntegrationTasksRequest: BatchStopIntegrationTasksRequest,
    DescribeRuleTemplatesByPageRequest: DescribeRuleTemplatesByPageRequest,
    RunTasksByMultiWorkflowResponse: RunTasksByMultiWorkflowResponse,
    DescribeInstanceLastLogResponse: DescribeInstanceLastLogResponse,
    TableHeat: TableHeat,
    DescribeExecStrategyRequest: DescribeExecStrategyRequest,
    ScriptInfoResponse: ScriptInfoResponse,
    CreateHiveTableRequest: CreateHiveTableRequest,
    BatchKillIntegrationTaskInstancesResponse: BatchKillIntegrationTaskInstancesResponse,
    RunTasksByMultiWorkflowRequest: RunTasksByMultiWorkflowRequest,
    EventListenerOpsDto: EventListenerOpsDto,
    CheckIntegrationTaskNameExistsRequest: CheckIntegrationTaskNameExistsRequest,
    DescribeRuleGroupTableResponse: DescribeRuleGroupTableResponse,
    DailyScoreInfo: DailyScoreInfo,
    SuspendIntegrationTaskRequest: SuspendIntegrationTaskRequest,
    DescribeDependOpsTasksResponse: DescribeDependOpsTasksResponse,
    DeleteRuleTemplateResponse: DeleteRuleTemplateResponse,
    DescribeRuleTemplateRequest: DescribeRuleTemplateRequest,
    SqlExpression: SqlExpression,
    DescribeTaskByCycleRequest: DescribeTaskByCycleRequest,
    CommonId: CommonId,
    CreateRuleTemplateRequest: CreateRuleTemplateRequest,
    DlcRewriteDataInfo: DlcRewriteDataInfo,
    TopTableStat: TopTableStat,
    WorkFlowExecuteDtoByPage: WorkFlowExecuteDtoByPage,
    DescribeRuleExecDetailResponse: DescribeRuleExecDetailResponse,
    Filter: Filter,
    Pair: Pair,
    DeleteIntegrationTaskResponse: DeleteIntegrationTaskResponse,
    TableBaseInfo: TableBaseInfo,
    DescribeRuleGroupsByPageResponse: DescribeRuleGroupsByPageResponse,
    TableBasicInfo: TableBasicInfo,
    DescribeIntegrationStatisticsTaskStatusResponse: DescribeIntegrationStatisticsTaskStatusResponse,
    DescribeOpsMakePlanInstancesResponse: DescribeOpsMakePlanInstancesResponse,
    DescribeDatabaseInfoListRequest: DescribeDatabaseInfoListRequest,
    DescribeIntegrationTaskResponse: DescribeIntegrationTaskResponse,
    TaskInfoVo: TaskInfoVo,
    DescribeQualityScoreTrendResponse: DescribeQualityScoreTrendResponse,
    RuleDimStat: RuleDimStat,
    CreateHiveTableByDDLRequest: CreateHiveTableByDDLRequest,
    DatabaseInfo: DatabaseInfo,
    GetIntegrationNodeColumnSchemaResponse: GetIntegrationNodeColumnSchemaResponse,
    StopIntegrationTaskResponse: StopIntegrationTaskResponse,
    DescribeOpsWorkflowsResponse: DescribeOpsWorkflowsResponse,
    OpsTaskCanvasDto: OpsTaskCanvasDto,
    DescribeRuleTemplatesRequest: DescribeRuleTemplatesRequest,
    DescribeDataCheckStatResponse: DescribeDataCheckStatResponse,
    DescribeIntegrationStatisticsInstanceTrendRequest: DescribeIntegrationStatisticsInstanceTrendRequest,
    DescribeDsFolderTreeResponse: DescribeDsFolderTreeResponse,
    PathNodeDsVO: PathNodeDsVO,
    DescribeWorkflowCanvasInfoRequest: DescribeWorkflowCanvasInfoRequest,
    DagInstancesRequest: DagInstancesRequest,
    DryRunDIOfflineTaskResponse: DryRunDIOfflineTaskResponse,
    FolderOpsDto: FolderOpsDto,
    DescribeTaskLockStatusRequest: DescribeTaskLockStatusRequest,
    DescribeRuleExecStatRequest: DescribeRuleExecStatRequest,
    GetInstanceLogRequest: GetInstanceLogRequest,
    RuleConfig: RuleConfig,
    LogContent: LogContent,
    RealTimeTaskSpeed: RealTimeTaskSpeed,
    BatchCreateIntegrationTaskAlarmsResponse: BatchCreateIntegrationTaskAlarmsResponse,
    DescribeIntegrationStatisticsRequest: DescribeIntegrationStatisticsRequest,
    DescribeRuleGroupRequest: DescribeRuleGroupRequest,
    ModifyTaskNameRequest: ModifyTaskNameRequest,
    DescribeTrendStatRequest: DescribeTrendStatRequest,
    DescribeOpsInstanceLogListResponse: DescribeOpsInstanceLogListResponse,
    DescribeApproveTypeListResponse: DescribeApproveTypeListResponse,
    RuleGroupExecResultPage: RuleGroupExecResultPage,
    DescribeRuleGroupSubscriptionRequest: DescribeRuleGroupSubscriptionRequest,
    OrganizationalFunction: OrganizationalFunction,
    OrderField: OrderField,
    BatchSuspendIntegrationTasksResponse: BatchSuspendIntegrationTasksResponse,
    DeleteProjectUsersRequest: DeleteProjectUsersRequest,
    BaseTenant: BaseTenant,
    DescribeWorkflowExecuteByIdRequest: DescribeWorkflowExecuteByIdRequest,
    WorkflowExtOpsDtoPage: WorkflowExtOpsDtoPage,
    RegisterEventResponse: RegisterEventResponse,
    DescribeRuleExecLogRequest: DescribeRuleExecLogRequest,
    BatchRerunIntegrationTaskInstancesResponse: BatchRerunIntegrationTaskInstancesResponse,
    RuleGroupPage: RuleGroupPage,
    DescribeApproveListResponse: DescribeApproveListResponse,
    DescribeIntegrationTasksRequest: DescribeIntegrationTasksRequest,
    BatchMakeUpIntegrationTasksResponse: BatchMakeUpIntegrationTasksResponse,
    SubmitCustomFunctionRequest: SubmitCustomFunctionRequest,
    TaskLockStatus: TaskLockStatus,
    EventCaseConsumeLogOptDto: EventCaseConsumeLogOptDto,

}
